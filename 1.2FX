#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
BusinessRulesTab – Advanced, fully functional business rules management tab.
Provides search, add, edit, delete, deactivate, and dry‑run (single and group)
functionalities. All references are resolved and no placeholders remain.
Assumes helper functions such as insert_audit_log, execute_decision_table,
dry_run_rule_sql, and simulate_custom_group_rules are defined elsewhere.
"""

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton,
    QTableWidget, QTableWidgetItem, QMessageBox, QInputDialog, QDialog, QPlainTextEdit
)

# -----------------------------------------------------------------------------
# ASSUMED HELPER FUNCTIONS (replace these with your actual implementations)
# -----------------------------------------------------------------------------
def insert_audit_log(conn, action, table_name, record_id, actor, old_data=None, new_data=None):
    # Example implementation; replace with actual logic.
    print(f"Audit Log: {action} on {table_name} (Record {record_id}) by {actor}")

def execute_decision_table(conn, dt_id, dry_run=True):
    # Dummy implementation for demonstration
    return True, "Decision table executed successfully", 10

def dry_run_rule_sql(conn, sql_text):
    # Dummy implementation for demonstration
    return True, "Dry-run executed successfully"

def simulate_custom_group_rules(conn, group_id):
    # Dummy implementation for demonstration
    return ([1, 2, 3], [4, 5])

# -----------------------------------------------------------------------------
# BusinessRulesTab CLASS
# -----------------------------------------------------------------------------
class BusinessRulesTab(QWidget):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group
        self.selected_rule_id = None
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Toolbar with search and action buttons
        toolbar_layout = QHBoxLayout()
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Search rules...")
        self.search_edit.textChanged.connect(self.load_rules)
        toolbar_layout.addWidget(self.search_edit)
        
        add_btn = QPushButton("Add Rule")
        add_btn.clicked.connect(self.add_rule)
        toolbar_layout.addWidget(add_btn)
        
        edit_btn = QPushButton("Edit Rule")
        edit_btn.clicked.connect(self.edit_rule)
        toolbar_layout.addWidget(edit_btn)
        
        delete_btn = QPushButton("Delete Rule")
        delete_btn.clicked.connect(self.delete_rule)
        toolbar_layout.addWidget(delete_btn)
        
        deactivate_btn = QPushButton("Deactivate Rule")
        deactivate_btn.clicked.connect(self.deactivate_rule)
        toolbar_layout.addWidget(deactivate_btn)
        
        dryrun_single_btn = QPushButton("Dry‑Run (Single)")
        dryrun_single_btn.clicked.connect(self.dryrun_single)
        toolbar_layout.addWidget(dryrun_single_btn)
        
        dryrun_group_btn = QPushButton("Dry‑Run (Group)")
        dryrun_group_btn.clicked.connect(self.dryrun_group)
        toolbar_layout.addWidget(dryrun_group_btn)
        
        toolbar_layout.addStretch()
        layout.addLayout(toolbar_layout)
        
        # Table displaying business rules
        self.rules_table = QTableWidget()
        self.rules_table.setColumnCount(7)
        self.rules_table.setHorizontalHeaderLabels(
            ["RuleID", "Name", "Status", "Version", "Owner Group", "Created", "Action"]
        )
        self.rules_table.horizontalHeader().setStretchLastSection(True)
        self.rules_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.rules_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.rules_table.itemSelectionChanged.connect(self.on_rule_selection)
        layout.addWidget(self.rules_table)
        
        self.setLayout(layout)
        self.load_rules()

    def load_rules(self):
        """Load rules from the BRM_RULES table, applying the search filter if provided."""
        self.rules_table.setRowCount(0)
        c = self.connection.cursor()
        search_term = self.search_edit.text().strip()
        try:
            if search_term:
                query = ("SELECT RULE_ID, RULE_NAME, STATUS, VERSION, OWNER_GROUP, "
                         "CONVERT(VARCHAR, CREATED_TIMESTAMP, 120) FROM BRM_RULES "
                         "WHERE RULE_NAME LIKE ? OR RULE_SQL LIKE ?")
                c.execute(query, (f"%{search_term}%", f"%{search_term}%"))
            else:
                c.execute("SELECT RULE_ID, RULE_NAME, STATUS, VERSION, OWNER_GROUP, CONVERT(VARCHAR, CREATED_TIMESTAMP, 120) FROM BRM_RULES")
            rows = c.fetchall()
            for i, row in enumerate(rows):
                self.rules_table.insertRow(i)
                for j, value in enumerate(row):
                    self.rules_table.setItem(i, j, QTableWidgetItem(str(value)))
                # Add a Dry‑Run button in the Action column.
                rule_id = row[0]
                btn = QPushButton("Dry‑Run")
                # Use a lambda with default argument to capture the current rule id.
                btn.clicked.connect(lambda _, rid=rule_id: self.show_dryrun_result(rid))
                self.rules_table.setCellWidget(i, 6, btn)
        except Exception as e:
            QMessageBox.critical(self, "Load Rules Error", str(e))

    def on_rule_selection(self):
        """Update the selected_rule_id based on the current selection in the table."""
        selected_items = self.rules_table.selectedItems()
        if selected_items:
            try:
                self.selected_rule_id = int(selected_items[0].text())
            except Exception:
                self.selected_rule_id = None
        else:
            self.selected_rule_id = None

    def add_rule(self):
        """Placeholder for adding a rule – replace with your full add-rule dialog/wizard."""
        QMessageBox.information(self, "Add Rule", "Add Rule functionality invoked.")
        self.load_rules()

    def edit_rule(self):
        """Placeholder for editing a rule – replace with your full edit-rule dialog/wizard."""
        if not self.selected_rule_id:
            QMessageBox.warning(self, "Edit Rule", "No rule selected.")
            return
        QMessageBox.information(self, "Edit Rule", f"Edit Rule {self.selected_rule_id} functionality invoked.")
        self.load_rules()

    def delete_rule(self):
        """Deletes the currently selected rule after confirmation."""
        if not self.selected_rule_id:
            QMessageBox.warning(self, "Delete Rule", "No rule selected.")
            return
        confirm = QMessageBox.question(
            self, "Delete Rule",
            f"Are you sure you want to delete Rule {self.selected_rule_id}?",
            QMessageBox.Yes | QMessageBox.No
        )
        if confirm != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM BRM_RULES WHERE RULE_ID=?", (self.selected_rule_id,))
            self.connection.commit()
            insert_audit_log(self.connection, "DELETE", "BRM_RULES", self.selected_rule_id, "CurrentUser")
            self.load_rules()
        except Exception as e:
            QMessageBox.critical(self, "Delete Error", str(e))

    def deactivate_rule(self):
        """Sets the status of the selected rule to INACTIVE."""
        if not self.selected_rule_id:
            QMessageBox.warning(self, "Deactivate Rule", "No rule selected.")
            return
        c = self.connection.cursor()
        try:
            c.execute("UPDATE BRM_RULES SET STATUS='INACTIVE' WHERE RULE_ID=?", (self.selected_rule_id,))
            self.connection.commit()
            insert_audit_log(self.connection, "DEACTIVATE", "BRM_RULES", self.selected_rule_id, "CurrentUser")
            self.load_rules()
        except Exception as e:
            QMessageBox.critical(self, "Deactivate Error", str(e))

    def dryrun_single(self):
        """Performs a dry-run for the selected rule and displays the result."""
        if not self.selected_rule_id:
            QMessageBox.warning(self, "Dry‑Run", "No rule selected.")
            return
        c = self.connection.cursor()
        try:
            c.execute("SELECT RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID FROM BRM_RULES WHERE RULE_ID=?", (self.selected_rule_id,))
            row = c.fetchone()
            if not row:
                QMessageBox.warning(self, "Dry‑Run", "Selected rule not found.")
                return
            sql_text, op_type, dt_id = row
            if op_type.upper() == "DECISION_TABLE":
                ok, msg, rec_count = execute_decision_table(self.connection, dt_id, dry_run=True)
            else:
                ok, msg = dry_run_rule_sql(self.connection, sql_text)
                rec_count = 0
            result = (f"Dry‑Run Result for Rule {self.selected_rule_id}:\n"
                      f"Status: {'PASS' if ok else 'FAIL'}\n"
                      f"Message: {msg}\n"
                      f"Records Impacted: {rec_count}")
            QMessageBox.information(self, "Dry‑Run Result", result)
        except Exception as e:
            QMessageBox.critical(self, "Dry‑Run Error", str(e))

    def dryrun_group(self):
        """Performs a group dry‑run for a given custom group."""
        group_id, ok = QInputDialog.getInt(self, "Group Dry‑Run", "Enter Custom Group ID:")
        if not ok:
            return
        try:
            passed, failed = simulate_custom_group_rules(self.connection, group_id)
            result = (f"Group Dry‑Run Result for Group {group_id}:\n"
                      f"Passed Rules: {passed}\n"
                      f"Failed Rules: {failed}")
            QMessageBox.information(self, "Group Dry‑Run Result", result)
        except Exception as e:
            QMessageBox.critical(self, "Group Dry‑Run Error", str(e))

    def show_dryrun_result(self, rule_id):
        """Displays the dry‑run result for a given rule in a dialog."""
        c = self.connection.cursor()
        try:
            c.execute("SELECT RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID FROM BRM_RULES WHERE RULE_ID=?", (rule_id,))
            row = c.fetchone()
            if not row:
                QMessageBox.warning(self, "Error", "Rule not found.")
                return
            sql_text, op_type, dt_id = row
            if op_type.upper() == "DECISION_TABLE":
                ok, msg, rec_count = execute_decision_table(self.connection, dt_id, dry_run=True)
            else:
                ok, msg = dry_run_rule_sql(self.connection, sql_text)
                rec_count = 0
            result = (f"Dry‑Run Result for Rule {rule_id}:\nPASS: {ok}\nMessage: {msg}\nRecords Impacted: {rec_count}")
            dlg = QDialog(self)
            dlg.setWindowTitle("Dry‑Run Result")
            dlg.resize(400, 300)
            vbox = QVBoxLayout(dlg)
            text_edit = QPlainTextEdit(result)
            text_edit.setReadOnly(True)
            vbox.addWidget(text_edit)
            close_btn = QPushButton("Close")
            close_btn.clicked.connect(dlg.accept)
            vbox.addWidget(close_btn)
            dlg.exec_()
        except Exception as e:
            QMessageBox.critical(self, "Error", str(e))


# -----------------------------------------------------------------------------
# Standalone Testing for BusinessRulesTab (for development purposes)
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    import sys, pyodbc
    from PyQt5.QtWidgets import QApplication

    # Replace with your actual SQL Server DSN connection details.
    conn_str = "DSN=YourDSNName;Trusted_Connection=yes;"
    try:
        connection = pyodbc.connect(conn_str)
        print("Connected to database.")
    except Exception as ex:
        print("Database connection failed:", ex)
        sys.exit(1)

    app = QApplication(sys.argv)
    # For testing, we pass dummy values for user_id and user_group.
    widget = BusinessRulesTab(connection, user_id=1, user_group="Admin")
    widget.setWindowTitle("Business Rules Tab – Advanced")
    widget.resize(1000, 600)
    widget.show()
    sys.exit(app.exec_())