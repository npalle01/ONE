-- 1. USERS
INSERT INTO USERS (USERNAME, PASSWORD, USER_GROUP)
VALUES 
('alice', 'password_hash1', 'Admin'),
('bob', 'password_hash2', 'BG1'),
('carol', 'password_hash3', 'BG2'),
('dave', 'password_hash4', 'BG1');

-- 2. BRM_RULE_GROUPS
INSERT INTO BRM_RULE_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES 
('BG1', 'Business Group 1', 'bg1@example.com'),
('BG2', 'Business Group 2', 'bg2@example.com'),
('Admin', 'Administration', 'admin@example.com');

-- 3. BRM_RULE_TYPES
INSERT INTO BRM_RULE_TYPES (RULE_TYPE_NAME)
VALUES 
('SQL Rule'),
('Composite Rule'),
('Decision Table Rule');

-- 4. BUSINESS_GROUP_APPROVERS
INSERT INTO BUSINESS_GROUP_APPROVERS (GROUP_NAME, USERNAME)
VALUES 
('BG1', 'bob'),
('BG2', 'carol'),
('Admin', 'alice');

-- 5. DECISION_TABLES
INSERT INTO DECISION_TABLES (TABLE_NAME, DESCRIPTION)
VALUES 
('DT_CreditCheck', 'Decision table for credit check rules');

-- 6. BRM_RULES  
-- Insert a few sample rules. (Assume RULE_TYPE_ID 1 = SQL Rule)
INSERT INTO BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    CREATED_TIMESTAMP, UPDATED_BY, OWNER_GROUP, CLUSTER_NAME,
    APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE,
    LIFECYCLE_STATE, DECISION_TABLE_ID
)
VALUES
-- A simple rule that returns 1 (pass)
(1, NULL, 1, 'Check Sales > 1000', 'SELECT 1 AS RESULT',
 '2023-01-01', '2025-12-31', 'INACTIVE', 1,
 'alice', 'Ensure sales are high enough', 'SELECT', 'Need high sales',
 GETDATE(), NULL, 'BG1', 'Cluster1',
 'APPROVAL_IN_PROGRESS', 0, 0, 'NONE', 'NONE',
 'DRAFT', NULL),
-- A rule that fails (returns 0)
(1, NULL, 1, 'Check Inventory', 'SELECT 0 AS RESULT',
 '2023-01-01', NULL, 'INACTIVE', 1,
 'bob', 'Ensure inventory is sufficient', 'SELECT', 'Inventory check',
 GETDATE(), NULL, 'BG1', NULL,
 'APPROVAL_IN_PROGRESS', 0, 1, 'GROUP', 'NONE',
 'DRAFT', NULL),
-- A global rule
(2, NULL, 1, 'Global Financial Check', 'SELECT 1 AS RESULT',
 '2023-01-01', NULL, 'INACTIVE', 1,
 'alice', 'Global rule for finance', 'SELECT', 'Finance justification',
 GETDATE(), NULL, 'Admin', 'ClusterGlobal',
 'APPROVAL_IN_PROGRESS', 1, 1, 'GLOBAL', 'NONE',
 'DRAFT', NULL);

-- 7. BRM_RULE_TABLE_DEPENDENCIES
-- Suppose the first rule touches the Sales table and the second touches Inventory.
INSERT INTO BRM_RULE_TABLE_DEPENDENCIES (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES
(1, 'SalesDB', 'Sales', 'TotalSales', 'READ'),
(2, 'InventoryDB', 'Inventory', 'StockCount', 'WRITE');

-- 8. BRM_AUDIT_LOG
-- Sample audit log entry
INSERT INTO BRM_AUDIT_LOG (ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA)
VALUES
('INSERT', 'BRM_RULES', '1', 'alice', NULL, '{"RULE_NAME":"Check Sales > 1000","STATUS":"DRAFT"}');

-- 9. BRM_RULE_APPROVALS
-- For rule 1, approvals for BG1. (Stage 1: BG1; Stage 2: FINAL)
INSERT INTO BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(1, 'BG1', 'bob', 0, 1),
(1, 'FINAL', 'final_approver', 0, 2);

-- 10. BRM_GLOBAL_CRITICAL_LINKS
-- Link rule 3 (global) as critical parent to rule 2 (for example)
INSERT INTO BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES (3, 2);

-- 11. RULE_EXECUTION_LOGS
INSERT INTO RULE_EXECUTION_LOGS (RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT)
VALUES 
(1, 1, 'Passed successfully', 1),
(2, 0, 'Failed due to insufficient stock', 0);

-- 12. RULE_CONFLICTS
INSERT INTO RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES 
(1, 2, 10);

-- 13. COMPOSITE_RULES
INSERT INTO COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES 
('Composite Check', 'Rule1==PASS AND Rule2==PASS', 'Notify Supervisor');

-- 14. RULE_SNAPSHOTS
INSERT INTO RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON)
VALUES 
('Snapshot 1', 'alice', '{"rules": "snapshot content"}');

-- 15. RULE_TAGS
INSERT INTO RULE_TAGS (RULE_ID, TAG_NAME)
VALUES 
(1, 'Sales'),
(2, 'Inventory'),
(3, 'Finance');

-- 16. DATA_VALIDATIONS
INSERT INTO DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES 
('Sales', 'TotalSales', 'RANGE', 'min=1000;max=1000000'),
('Inventory', 'StockCount', 'NOT NULL', '');

-- 17. BRM_COLUMN_MAPPING
INSERT INTO BRM_COLUMN_MAPPING (SOURCE_RULE_ID, RULE_ID, SOURCE_COLUMN, TARGET_COLUMN)
VALUES 
(1, 1, 'Total_Sales', 'Sales_Total');

-- 18. BRM_CUSTOM_RULE_GROUPS
INSERT INTO BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
VALUES 
('CustomGroup1', 'BG1', 'bob'),
('CustomGroup2', 'BG2', 'carol');

-- 19. BRM_CUSTOM_GROUP_MEMBERS
INSERT INTO BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES 
(1, 1),
(1, 2),
(2, 3);

-- 20. BRM_CUSTOM_GROUP_BACKUPS
INSERT INTO BRM_CUSTOM_GROUP_BACKUPS (CUSTOM_GROUP_ID, BACKUP_VERSION, BACKUP_JSON)
VALUES 
(1, 1, '{"group_name":"CustomGroup1","members":[1,2]}');

-- 21. RULE_SCHEDULES
INSERT INTO RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS)
VALUES 
(1, DATEADD(HOUR, 2, GETDATE()), 'Scheduled'),
(2, DATEADD(HOUR, 4, GETDATE()), 'Scheduled');

-- 22. RULE_LOCKS
INSERT INTO RULE_LOCKS (RULE_ID, LOCKED_BY, LAST_ACTIVE_TIMESTAMP)
VALUES 
(1, 'bob', GETDATE()),
(2, 'carol', GETDATE());