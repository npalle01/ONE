-------------------------------------------------------------------------------
-- 0) Clean out existing data if needed (use caution in real environments)
-------------------------------------------------------------------------------
-- TRUNCATE or DELETE in reverse dependency order if you have foreign keys.
-- For demonstration, we'll do some simple deletes:

DELETE FROM RULE_PERF_STATS;
DELETE FROM RULE_EXECUTION_LOGS;
DELETE FROM DATA_VALIDATION_RESULTS;
DELETE FROM DATA_VALIDATIONS;
DELETE FROM RULE_TAGS;
DELETE FROM RULE_SNAPSHOTS;
DELETE FROM COMPOSITE_RULES;
DELETE FROM RULE_CONFLICTS;
DELETE FROM DECISION_TABLES;
DELETE FROM RULE_SCHEDULES;
DELETE FROM BRM_GLOBAL_CRITICAL_LINKS;
DELETE FROM BRM_CUSTOM_GROUP_MEMBERS;
DELETE FROM BRM_CUSTOM_RULE_GROUPS;
DELETE FROM BUSINESS_GROUP_APPROVERS;
DELETE FROM BRM_RULE_APPROVALS;
DELETE FROM BRM_RULE_COMMENTS;
DELETE FROM BRM_COLUMN_MAPPING;
DELETE FROM BRM_RULE_LINEAGE;
DELETE FROM BRM_GROUP_BACKUPS;
DELETE FROM BRM_RULE_TABLE_DEPENDENCIES;
DELETE FROM BRM_RULES;
DELETE FROM BRM_RULE_GROUPS;
DELETE FROM BRM_RULE_TYPES;
DELETE FROM GROUP_PERMISSIONS;
DELETE FROM BUSINESS_GROUPS;
DELETE FROM USERS;

-------------------------------------------------------------------------------
-- 1) USERS
-------------------------------------------------------------------------------
INSERT INTO [dbo].[USERS] (USERNAME, [PASSWORD], USER_GROUP)
VALUES
    ('admin_user', 'admin_pass', 'Admin'),  -- ID=1
    ('normal_user', 'test123', 'BG1'),      -- ID=2
    ('power_user', 'pword', 'BG2');        -- ID=3 (example)

-------------------------------------------------------------------------------
-- 2) BUSINESS_GROUPS
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BUSINESS_GROUPS] (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES
    ('Admin', 'Administrators Group', 'admin@example.com'),
    ('BG1', 'Business Group 1', 'bg1@example.com'),
    ('BG2', 'Business Group 2', 'bg2@example.com');

-------------------------------------------------------------------------------
-- 3) GROUP_PERMISSIONS
--   - Admin can access ANY
--   - BG1 can access some table, e.g. dbo.Customers
-------------------------------------------------------------------------------
INSERT INTO [dbo].[GROUP_PERMISSIONS] (GROUP_NAME, TARGET_TABLE)
VALUES
    ('Admin', 'ANY'),
    ('BG1', 'dbo.Customers'),
    ('BG2', 'dbo.Orders');   -- example

-------------------------------------------------------------------------------
-- 4) BRM_RULE_TYPES
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BRM_RULE_TYPES] (RULE_TYPE_NAME)
VALUES
    ('SQL-Based Rule'),      -- ID=1
    ('Decision Table Rule'); -- ID=2

-------------------------------------------------------------------------------
-- 5) BRM_RULE_GROUPS (logical groupings for rules, separate from business groups)
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BRM_RULE_GROUPS] (GROUP_NAME)
VALUES
    ('RG1'),                 -- ID=1
    ('RG2');                 -- ID=2

-------------------------------------------------------------------------------
-- 6) BRM_RULES (create a few rules)
-- Let's create 4 rules:
--   Rule 1: top-level, references "dbo.Customers", parent = NULL, is_global=1
--   Rule 2: child of Rule 1, references "dbo.Orders", critical=1, locked example
--   Rule 3: another child of Rule 1
--   Rule 4: a "Decision Table" rule (operation_type=DECISION_TABLE)
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BRM_RULES] (
    GROUP_ID,
    PARENT_RULE_ID,
    RULE_TYPE_ID,
    RULE_NAME,
    RULE_SQL,
    EFFECTIVE_START_DATE,
    EFFECTIVE_END_DATE,
    STATUS,
    VERSION,
    CREATED_BY,
    DESCRIPTION,
    OPERATION_TYPE,
    BUSINESS_JUSTIFICATION,
    CREATED_TIMESTAMP,
    UPDATED_BY,
    OWNER_GROUP,
    CLUSTER_NAME,
    APPROVAL_STATUS,
    IS_GLOBAL,
    CRITICAL_RULE,
    CRITICAL_SCOPE,
    CDC_TYPE,
    LIFECYCLE_STATE,
    DECISION_TABLE_ID,
    ENCRYPTED_FLAG,
    LOCK_STATUS,
    LOCKED_BY,
    LOCKED_AT
)
VALUES
(
    1,                 -- GROUP_ID=1 => "RG1"
    NULL,              -- no parent (root rule)
    1,                 -- RULE_TYPE_ID=1 => "SQL-Based Rule"
    'Customer Check', 
    'SELECT CASE WHEN COUNT(*)>0 THEN 1 ELSE 0 END FROM dbo.Customers', 
    GETDATE(), 
    DATEADD(DAY, 30, GETDATE()), 
    'ACTIVE', 
    1, 
    'admin_user', 
    'Top-level rule to check customers exist', 
    'SELECT', 
    'Need to confirm customers', 
    GETDATE(), 
    NULL, 
    'Admin',           -- OWNER_GROUP => Admin
    'ClusterA',
    'APPROVED',
    1,                 -- IS_GLOBAL
    0,                 -- CRITICAL_RULE
    'NONE',
    'NONE',
    'ACTIVE',
    NULL,              -- DECISION_TABLE_ID
    0,                 -- ENCRYPTED_FLAG
    0,                 -- LOCK_STATUS
    NULL,              -- LOCKED_BY
    NULL               -- LOCKED_AT
),
(
    1,                 -- still RG1
    1,                 -- parent rule = 1
    1,                 -- SQL-based
    'Order Check', 
    'SELECT CASE WHEN COUNT(*)>0 THEN 1 ELSE 0 END FROM dbo.Orders', 
    GETDATE(), 
    NULL, 
    'INACTIVE', 
    1, 
    'normal_user', 
    'Child rule checking orders exist', 
    'SELECT', 
    'Sub-check for orders', 
    GETDATE(), 
    NULL, 
    'BG1',             -- belongs to BG1
    'ClusterA',
    'APPROVAL_IN_PROGRESS',
    0,                 -- not global
    1,                 -- CRITICAL_RULE = 1
    'GROUP',           -- CRITICAL_SCOPE
    'INSERT_ONLY', 
    'UNDER_APPROVAL', 
    NULL, 
    0,
    1,                 -- LOCK_STATUS => locked
    'User:2',          -- LOCKED_BY => e.g. normal_user
    GETDATE() 
),
(
    1,                 -- RG1
    1,                 -- parent = rule 1
    1,                 -- SQL-based
    'Payment Validate',
    'SELECT CASE WHEN SUM(Amount) > 1000 THEN 0 ELSE 1 END FROM dbo.Payments',
    GETDATE(),
    NULL,
    'INACTIVE',
    1,
    'normal_user',
    'Another child rule, sums payments',
    'SELECT',
    'Check total payments not excessive',
    GETDATE(),
    NULL,
    'BG1',
    'ClusterA',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE',
    'NONE',
    'UNDER_APPROVAL',
    NULL,
    0,
    0,
    NULL,
    NULL
),
(
    1,                 -- RG1
    NULL,              -- no parent
    2,                 -- RULE_TYPE_ID=2 => Decision Table
    'CreditScore Decision',
    '',                -- no direct SQL, since it's a decision table
    GETDATE(),
    NULL,
    'INACTIVE',
    1,
    'admin_user',
    'Decision table checks credit score ranges',
    'DECISION_TABLE',
    'Runs credit logic',
    GETDATE(),
    NULL,
    'Admin',
    'ClusterA',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE',
    'NONE',
    'UNDER_APPROVAL',
    1,                 -- DECISION_TABLE_ID=1 (will insert below)
    0,
    0,
    NULL,
    NULL
);

-------------------------------------------------------------------------------
-- 7) BRM_RULE_TABLE_DEPENDENCIES
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BRM_RULE_TABLE_DEPENDENCIES] 
    (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES
    (1, 'dbo', 'Customers', 'CustID', 'READ'),
    (2, 'dbo', 'Orders',    'OrderID', 'READ'),
    (3, 'dbo', 'Payments',  'Amount',  'READ');

-------------------------------------------------------------------------------
-- 8) DECISION_TABLES
-------------------------------------------------------------------------------
INSERT INTO [dbo].[DECISION_TABLES] (TABLE_NAME, DESCRIPTION)
VALUES
    ('CreditScoreDT', 'Example decision table for credit ranges'); -- ID=1

-------------------------------------------------------------------------------
-- 9) RULE_CONFLICTS
-------------------------------------------------------------------------------
INSERT INTO [dbo].[RULE_CONFLICTS] (RULE_ID1, RULE_ID2, PRIORITY)
VALUES
    (2, 3, 5);  -- conflict between "Order Check" and "Payment Validate"

-------------------------------------------------------------------------------
-- 10) COMPOSITE_RULES
-------------------------------------------------------------------------------
INSERT INTO [dbo].[COMPOSITE_RULES] (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES
    ('OrderPlusPayment', 'Rule2==PASS AND Rule3==PASS', 'SendEmail');

-------------------------------------------------------------------------------
-- 11) RULE_SCHEDULES
-------------------------------------------------------------------------------
INSERT INTO [dbo].[RULE_SCHEDULES] (RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS)
VALUES
    (2, DATEADD(HOUR, 24, GETDATE()), 'Scheduled', 1),  -- next day
    (4, DATEADD(MINUTE, 30, GETDATE()), 'Scheduled', 0); -- in 30 minutes

-------------------------------------------------------------------------------
-- 12) DATA_VALIDATIONS
-------------------------------------------------------------------------------
INSERT INTO [dbo].[DATA_VALIDATIONS] (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES
    ('dbo.Customers', 'CustID', 'NOT NULL', NULL),
    ('dbo.Payments',  'Amount', 'RANGE', 'min=0;max=100000');

-------------------------------------------------------------------------------
-- 13) BRM_CUSTOM_RULE_GROUPS (ID=1 => "MyCustomGroup")
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BRM_CUSTOM_RULE_GROUPS] (
    CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY
)
VALUES
    ('MyCustomGroup', 'BG1', 'normal_user');

-------------------------------------------------------------------------------
-- 14) BRM_CUSTOM_GROUP_MEMBERS
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BRM_CUSTOM_GROUP_MEMBERS] (CUSTOM_GROUP_ID, RULE_ID)
VALUES
    (1, 1),  -- group #1 includes rule #1
    (1, 2);  -- group #1 includes rule #2

-------------------------------------------------------------------------------
-- 15) BUSINESS_GROUP_APPROVERS
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BUSINESS_GROUP_APPROVERS] (GROUP_NAME, USERNAME)
VALUES
    ('BG1', 'normal_user'),
    ('Admin', 'admin_user');

-------------------------------------------------------------------------------
-- 16) BRM_RULE_APPROVALS
-- Let's say rule #2 is pending approval by BG1 at stage=1, then final by Admin
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BRM_RULE_APPROVALS] (
    RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVED_TIMESTAMP, APPROVAL_STAGE
)
VALUES
    (2, 'BG1', 'normal_user', 0, NULL, 1),  -- stage=1, pending
    (2, 'Admin', 'admin_user', 0, NULL, 2), -- stage=2, pending
    (3, 'BG1', 'normal_user', 0, NULL, 1),  -- stage=1 for rule #3
    (4, 'Admin', 'admin_user', 0, NULL, 1); -- stage=1 for rule #4

-------------------------------------------------------------------------------
-- 17) BRM_GLOBAL_CRITICAL_LINKS
-- Suppose rule 1 is "global-critical parent" for rule 2
-------------------------------------------------------------------------------
INSERT INTO [dbo].[BRM_GLOBAL_CRITICAL_LINKS] (GCR_RULE_ID, TARGET_RULE_ID)
VALUES
    (1, 2);

-------------------------------------------------------------------------------
-- (Optional) Insert example logs into RULE_EXECUTION_LOGS or RULE_PERF_STATS
-- to see metrics, etc.
-------------------------------------------------------------------------------
INSERT INTO [dbo].[RULE_EXECUTION_LOGS] (
    RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT
)
VALUES
    (1, 1, 'Initial run => PASS', 10),
    (2, 0, 'Failed => no orders found', 0);

INSERT INTO [dbo].[RULE_PERF_STATS] (
    RULE_ID, DATE_KEY, EXEC_TIME_MS, MEMORY_KB, USAGE_COUNT
)
VALUES
    (1, '20250310', 150.0, 2000, 1),
    (2, '20250310', 3000.0, 8000, 1),
    (3, '20250310', 50.0,   1500, 2);

-------------------------------------------------------------------------------
-- DONE: This should be enough sample data to test BFS logic, approvals, 
-- scheduling, data validations, lineage, etc.
-------------------------------------------------------------------------------