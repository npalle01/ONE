/****************************************************************************
 * PART 1: DROP statements
 ****************************************************************************/
IF OBJECT_ID('dbo.USERS','U') IS NOT NULL DROP TABLE dbo.USERS;
IF OBJECT_ID('dbo.BUSINESS_GROUPS','U') IS NOT NULL DROP TABLE dbo.BUSINESS_GROUPS;
IF OBJECT_ID('dbo.GROUP_PERMISSIONS','U') IS NOT NULL DROP TABLE dbo.GROUP_PERMISSIONS;
IF OBJECT_ID('dbo.BRM_RULE_TYPES','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_TYPES;
IF OBJECT_ID('dbo.BRM_RULE_GROUPS','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_GROUPS;
IF OBJECT_ID('dbo.BRM_RULES','U') IS NOT NULL DROP TABLE dbo.BRM_RULES;
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
IF OBJECT_ID('dbo.BRM_AUDIT_LOG','U') IS NOT NULL DROP TABLE dbo.BRM_AUDIT_LOG;
IF OBJECT_ID('dbo.BRM_RULE_LINEAGE','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_LINEAGE;
IF OBJECT_ID('dbo.BRM_GROUP_BACKUPS','U') IS NOT NULL DROP TABLE dbo.BRM_GROUP_BACKUPS;
IF OBJECT_ID('dbo.BRM_COLUMN_MAPPING','U') IS NOT NULL DROP TABLE dbo.BRM_COLUMN_MAPPING;
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS','U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS','U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
IF OBJECT_ID('dbo.BUSINESS_GROUP_APPROVERS','U') IS NOT NULL DROP TABLE dbo.BUSINESS_GROUP_APPROVERS;
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_APPROVALS;
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_BACKUPS','U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS;
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS','U') IS NOT NULL DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
IF OBJECT_ID('dbo.RULE_SCHEDULES','U') IS NOT NULL DROP TABLE dbo.RULE_SCHEDULES;
IF OBJECT_ID('dbo.BRM_RULE_COMMENTS','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_COMMENTS;
IF OBJECT_ID('dbo.DECISION_TABLES','U') IS NOT NULL DROP TABLE dbo.DECISION_TABLES;
IF OBJECT_ID('dbo.RULE_CONFLICTS','U') IS NOT NULL DROP TABLE dbo.RULE_CONFLICTS;
IF OBJECT_ID('dbo.COMPOSITE_RULES','U') IS NOT NULL DROP TABLE dbo.COMPOSITE_RULES;
IF OBJECT_ID('dbo.RULE_SNAPSHOTS','U') IS NOT NULL DROP TABLE dbo.RULE_SNAPSHOTS;
IF OBJECT_ID('dbo.RULE_TAGS','U') IS NOT NULL DROP TABLE dbo.RULE_TAGS;
IF OBJECT_ID('dbo.DATA_VALIDATIONS','U') IS NOT NULL DROP TABLE dbo.DATA_VALIDATIONS;
IF OBJECT_ID('dbo.RULE_EXECUTION_LOGS','U') IS NOT NULL DROP TABLE dbo.RULE_EXECUTION_LOGS;
IF OBJECT_ID('dbo.DATA_VALIDATION_LOGS','U') IS NOT NULL DROP TABLE dbo.DATA_VALIDATION_LOGS;
IF OBJECT_ID('dbo.BRM_RULE_LOCKS','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_LOCKS;


/****************************************************************************
 * PART 2: CREATE statements (DDL)
 ****************************************************************************/

---------------------------
-- USERS
---------------------------
CREATE TABLE dbo.USERS (
    USER_ID       INT            NOT NULL IDENTITY(1,1),
    USERNAME      NVARCHAR(100)  NOT NULL,
    PASSWORD      NVARCHAR(100)  NOT NULL,
    USER_GROUP    NVARCHAR(100)  NOT NULL,
    PRIMARY KEY (USER_ID)
);

---------------------------
-- BUSINESS_GROUPS
---------------------------
CREATE TABLE dbo.BUSINESS_GROUPS (
    GROUP_NAME       NVARCHAR(100) NOT NULL PRIMARY KEY,
    DESCRIPTION      NVARCHAR(500) NULL,
    EMAIL            NVARCHAR(200) NULL,
    IS_OWNER_GROUP   BIT           NOT NULL DEFAULT(0)
);

---------------------------
-- GROUP_PERMISSIONS
---------------------------
CREATE TABLE dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT            NOT NULL IDENTITY(1,1),
    GROUP_NAME    NVARCHAR(100) NOT NULL,
    TARGET_TABLE  NVARCHAR(200) NOT NULL,
    PRIMARY KEY (PERMISSION_ID)
);

---------------------------
-- BRM_RULE_TYPES
---------------------------
CREATE TABLE dbo.BRM_RULE_TYPES (
    RULE_TYPE_ID   INT            NOT NULL,
    RULE_TYPE_NAME NVARCHAR(100)  NOT NULL,
    PRIMARY KEY (RULE_TYPE_ID)
);

---------------------------
-- BRM_RULE_GROUPS
---------------------------
CREATE TABLE dbo.BRM_RULE_GROUPS (
    GROUP_ID   INT           NOT NULL,
    GROUP_NAME NVARCHAR(100) NOT NULL,
    PRIMARY KEY (GROUP_ID)
);

---------------------------
-- BRM_RULES
---------------------------
CREATE TABLE dbo.BRM_RULES (
    RULE_ID             INT            NOT NULL IDENTITY(1,1),
    RULE_NAME           NVARCHAR(200)  NOT NULL,
    GROUP_ID            INT            NULL,
    PARENT_RULE_ID      INT            NULL,
    RULE_TYPE_ID        INT            NULL,
    RULE_SQL            NVARCHAR(MAX)  NULL,
    EFFECTIVE_START_DATE   DATETIME    NULL,
    EFFECTIVE_END_DATE     DATETIME    NULL,
    STATUS             NVARCHAR(50)    NULL,
    VERSION            INT             NOT NULL DEFAULT(1),
    CREATED_BY         NVARCHAR(100)   NULL,
    DESCRIPTION        NVARCHAR(MAX)   NULL,
    OPERATION_TYPE     NVARCHAR(20)    NULL,
    BUSINESS_JUSTIFICATION NVARCHAR(MAX) NULL,
    CREATED_TIMESTAMP  DATETIME        NULL,
    UPDATED_BY         NVARCHAR(100)   NULL,
    OWNER_GROUP        NVARCHAR(100)   NULL,
    CLUSTER_NAME       NVARCHAR(100)   NULL,
    APPROVAL_STATUS    NVARCHAR(50)    NULL,
    IS_GLOBAL          BIT             NOT NULL DEFAULT(0),
    CRITICAL_RULE      BIT             NOT NULL DEFAULT(0),
    CRITICAL_SCOPE     NVARCHAR(50)    NULL,
    CDC_TYPE           NVARCHAR(50)    NULL,
    LIFECYCLE_STATE    NVARCHAR(50)    NULL,

    -- Additional optional fields used in sample code:
    LOCK_STATUS        NVARCHAR(50)    NULL,
    PERF_MS_AVG        DECIMAL(10,2)   NULL,
    EXECUTION_STATE    NVARCHAR(50)    NULL,
    ENCRYPTED_FILE_PATH NVARCHAR(500)  NULL,

    PRIMARY KEY (RULE_ID)
);

---------------------------
-- BRM_RULE_TABLE_DEPENDENCIES
---------------------------
CREATE TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT            NOT NULL IDENTITY(1,1),
    RULE_ID       INT            NOT NULL,
    DATABASE_NAME NVARCHAR(100)  NULL,
    TABLE_NAME    NVARCHAR(200)  NULL,
    COLUMN_NAME   NVARCHAR(200)  NULL,
    COLUMN_OP     NVARCHAR(10)   NULL,  -- 'READ','WRITE'
    PRIMARY KEY (DEPENDENCY_ID)
);

---------------------------
-- BRM_AUDIT_LOG
---------------------------
CREATE TABLE dbo.BRM_AUDIT_LOG (
    AUDIT_ID        INT            NOT NULL IDENTITY(1,1),
    ACTION          NVARCHAR(50)   NOT NULL,
    TABLE_NAME      NVARCHAR(100)  NOT NULL,
    RECORD_ID       NVARCHAR(50)   NULL,
    ACTION_BY       NVARCHAR(100)  NULL,
    OLD_DATA        NVARCHAR(MAX)  NULL,
    NEW_DATA        NVARCHAR(MAX)  NULL,
    ACTION_TIMESTAMP DATETIME      NOT NULL DEFAULT(GETDATE()),
    PRIMARY KEY (AUDIT_ID)
);

---------------------------
-- BRM_RULE_LINEAGE
---------------------------
CREATE TABLE dbo.BRM_RULE_LINEAGE (
    LINEAGE_ID   INT            NOT NULL IDENTITY(1,1),
    RULE_ID      INT            NOT NULL,
    REF_RULE_ID  INT            NULL,
    DESCRIPTION  NVARCHAR(200)  NULL,
    PRIMARY KEY (LINEAGE_ID)
);

---------------------------
-- BRM_GROUP_BACKUPS
---------------------------
CREATE TABLE dbo.BRM_GROUP_BACKUPS (
    BACKUP_ID          INT            NOT NULL IDENTITY(1,1),
    GROUP_NAME         NVARCHAR(100)  NOT NULL,
    BACKUP_TIMESTAMP   DATETIME       NOT NULL DEFAULT(GETDATE()),
    BACKUP_JSON        NVARCHAR(MAX)  NULL,
    PRIMARY KEY (BACKUP_ID)
);

---------------------------
-- BRM_COLUMN_MAPPING
---------------------------
CREATE TABLE dbo.BRM_COLUMN_MAPPING (
    MAPPING_ID   INT            NOT NULL IDENTITY(1,1),
    SOURCE_RULE_ID INT          NULL,
    RULE_ID       INT           NULL,
    COLUMN_NAME   NVARCHAR(200) NULL,
    MAP_DETAILS   NVARCHAR(MAX) NULL,
    PRIMARY KEY (MAPPING_ID)
);

---------------------------
-- BRM_CUSTOM_RULE_GROUPS
---------------------------
CREATE TABLE dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID     INT              NOT NULL IDENTITY(1,1),
    CUSTOM_GROUP_NAME   NVARCHAR(200)    NOT NULL,
    OWNER_BUSINESS_GROUP NVARCHAR(100)   NULL,
    CREATED_BY          NVARCHAR(100)    NULL,
    CREATED_TIMESTAMP   DATETIME         NOT NULL DEFAULT(GETDATE()),
    PRIMARY KEY (CUSTOM_GROUP_ID)
);

---------------------------
-- BRM_CUSTOM_GROUP_MEMBERS
---------------------------
CREATE TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID       INT NOT NULL IDENTITY(1,1),
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID         INT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
);

---------------------------
-- BUSINESS_GROUP_APPROVERS
---------------------------
CREATE TABLE dbo.BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT            NOT NULL IDENTITY(1,1),
    GROUP_NAME  NVARCHAR(100)  NOT NULL,
    USERNAME    NVARCHAR(100)  NOT NULL,
    PRIMARY KEY (APPROVER_ID)
);

---------------------------
-- BRM_RULE_APPROVALS
---------------------------
CREATE TABLE dbo.BRM_RULE_APPROVALS (
    APPROVAL_ID    INT NOT NULL IDENTITY(1,1),
    RULE_ID        INT NOT NULL,
    GROUP_NAME     NVARCHAR(100) NULL,
    USERNAME       NVARCHAR(100) NULL,
    APPROVED_FLAG  INT NOT NULL DEFAULT(0),  -- 0=pending,1=approved,2=rejected
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVAL_STAGE INT NOT NULL DEFAULT(1),
    PRIMARY KEY (APPROVAL_ID)
);

---------------------------
-- BRM_CUSTOM_GROUP_BACKUPS
---------------------------
CREATE TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ROW_ID    INT NOT NULL IDENTITY(1,1),
    CUSTOM_GROUP_ID  INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    BACKUP_VERSION   INT NOT NULL,
    BACKUP_JSON      NVARCHAR(MAX) NULL,
    PRIMARY KEY (BACKUP_ROW_ID)
);

---------------------------
-- BRM_GLOBAL_CRITICAL_LINKS
---------------------------
CREATE TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID       INT NOT NULL IDENTITY(1,1),
    GCR_RULE_ID   INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL,
    PRIMARY KEY (LINK_ID)
);

---------------------------
-- RULE_SCHEDULES
---------------------------
CREATE TABLE dbo.RULE_SCHEDULES (
    SCHEDULE_ID    INT NOT NULL IDENTITY(1,1),
    RULE_ID        INT NOT NULL,
    SCHEDULE_TIME  DATETIME NOT NULL,
    STATUS         NVARCHAR(50) NOT NULL DEFAULT('Scheduled'),
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    VALIDATION_FLAG BIT NOT NULL DEFAULT(0),
    PRIMARY KEY (SCHEDULE_ID)
);

---------------------------
-- BRM_RULE_COMMENTS
---------------------------
CREATE TABLE dbo.BRM_RULE_COMMENTS (
    COMMENT_ID  INT NOT NULL IDENTITY(1,1),
    RULE_ID     INT NOT NULL,
    COMMENT_TXT NVARCHAR(MAX) NOT NULL,
    CREATED_BY  NVARCHAR(100) NULL,
    CREATED_TS  DATETIME NOT NULL DEFAULT(GETDATE()),
    PRIMARY KEY (COMMENT_ID)
);

---------------------------
-- DECISION_TABLES
---------------------------
CREATE TABLE dbo.DECISION_TABLES (
    DECISION_TABLE_ID INT NOT NULL IDENTITY(1,1),
    TABLE_NAME        NVARCHAR(200) NOT NULL,
    DESCRIPTION       NVARCHAR(MAX) NULL,
    PRIMARY KEY (DECISION_TABLE_ID)
);

---------------------------
-- RULE_CONFLICTS
---------------------------
CREATE TABLE dbo.RULE_CONFLICTS (
    CONFLICT_ID INT NOT NULL IDENTITY(1,1),
    RULE_ID1    INT NOT NULL,
    RULE_ID2    INT NOT NULL,
    PRIORITY    INT NOT NULL DEFAULT(0),
    PRIMARY KEY (CONFLICT_ID)
);

---------------------------
-- COMPOSITE_RULES
---------------------------
CREATE TABLE dbo.COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT NOT NULL IDENTITY(1,1),
    CRULE_NAME        NVARCHAR(200) NOT NULL,
    LOGIC_EXPR        NVARCHAR(MAX) NULL,
    ACTION_ON_PASS    NVARCHAR(200) NULL,
    PRIMARY KEY (COMPOSITE_RULE_ID)
);

---------------------------
-- RULE_SNAPSHOTS
---------------------------
CREATE TABLE dbo.RULE_SNAPSHOTS (
    SNAPSHOT_ID     INT NOT NULL IDENTITY(1,1),
    SNAPSHOT_NAME   NVARCHAR(200) NOT NULL,
    CREATED_BY      NVARCHAR(100) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    SNAPSHOT_JSON   NVARCHAR(MAX) NULL,
    PRIMARY KEY (SNAPSHOT_ID)
);

---------------------------
-- RULE_TAGS
---------------------------
CREATE TABLE dbo.RULE_TAGS (
    TAG_ID   INT NOT NULL IDENTITY(1,1),
    RULE_ID  INT NOT NULL,
    TAG_NAME NVARCHAR(100) NOT NULL,
    PRIMARY KEY (TAG_ID)
);

---------------------------
-- DATA_VALIDATIONS
---------------------------
CREATE TABLE dbo.DATA_VALIDATIONS (
    VALIDATION_ID   INT NOT NULL IDENTITY(1,1),
    TABLE_NAME      NVARCHAR(200) NOT NULL,
    COLUMN_NAME     NVARCHAR(200) NOT NULL,
    VALIDATION_TYPE NVARCHAR(50)  NOT NULL,
    PARAMS          NVARCHAR(200) NULL,
    PRIMARY KEY (VALIDATION_ID)
);

---------------------------
-- RULE_EXECUTION_LOGS
---------------------------
CREATE TABLE dbo.RULE_EXECUTION_LOGS (
    LOG_ID               INT NOT NULL IDENTITY(1,1),
    RULE_ID              INT NOT NULL,
    EXECUTION_TIMESTAMP  DATETIME NOT NULL DEFAULT(GETDATE()),
    PASS_FLAG            BIT NOT NULL DEFAULT(0),
    MESSAGE              NVARCHAR(MAX) NULL,
    RECORD_COUNT         INT NOT NULL DEFAULT(0),
    EXECUTION_TIME_MS    INT NOT NULL DEFAULT(0),
    PRIMARY KEY (LOG_ID)
);

---------------------------
-- DATA_VALIDATION_LOGS
---------------------------
CREATE TABLE dbo.DATA_VALIDATION_LOGS (
    DVL_ID               INT NOT NULL IDENTITY(1,1),
    VALIDATION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    VALIDATION_ID        INT NOT NULL,
    TABLE_NAME           NVARCHAR(200) NOT NULL,
    COLUMN_NAME          NVARCHAR(200) NOT NULL,
    RESULT_FLAG          NVARCHAR(10)  NOT NULL DEFAULT('PASS'), -- 'PASS' or 'FAIL'
    DETAILS              NVARCHAR(MAX) NULL,
    PRIMARY KEY (DVL_ID)
);

---------------------------
-- BRM_RULE_LOCKS
---------------------------
CREATE TABLE dbo.BRM_RULE_LOCKS (
    LOCK_ID         INT NOT NULL IDENTITY(1,1),
    RULE_ID         INT NOT NULL,
    LOCKED_BY       INT NULL,   -- references a user_id
    LOCK_TIMESTAMP  DATETIME NOT NULL DEFAULT(GETDATE()),
    EXPIRY_TIMESTAMP DATETIME NULL,
    FORCE_LOCK      BIT NOT NULL DEFAULT(0),
    ACTIVE_LOCK     BIT NOT NULL DEFAULT(1),
    PRIMARY KEY (LOCK_ID)
);


/****************************************************************************
 * PART 3: SAMPLE INSERTS
 ****************************************************************************/

---------------------------
-- 1) BUSINESS_GROUPS
---------------------------
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL, IS_OWNER_GROUP)
VALUES
('BG1', 'Business Group 1', 'bg1@example.com', 0),
('BG2', 'Business Group 2', 'bg2@example.com', 0),
('Admin', 'Administrative Group', 'admin@example.com', 1);

---------------------------
-- 2) USERS
---------------------------
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP)
VALUES
('alice', 'alice_pass', 'BG1'),
('bob', 'bob_pass', 'BG2'),
('adminuser', 'admin_pass', 'Admin');

---------------------------
-- 3) GROUP_PERMISSIONS
---------------------------
INSERT INTO dbo.GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE)
VALUES
('BG1', 'dbo.Customers'),
('BG1', 'dbo.CustomersArchive'),
('BG2', 'dbo.Orders'),
('Admin', 'dbo.AnyTable'),
('Admin', 'dbo.Customers'),
('Admin', 'dbo.Orders');

---------------------------
-- 4) BRM_RULE_TYPES
---------------------------
INSERT INTO dbo.BRM_RULE_TYPES (RULE_TYPE_ID, RULE_TYPE_NAME)
VALUES
(1, 'DataCheck'),
(2, 'BusinessValidation'),
(3, 'ETLTransformation');

---------------------------
-- 5) BRM_RULE_GROUPS
---------------------------
INSERT INTO dbo.BRM_RULE_GROUPS (GROUP_ID, GROUP_NAME)
VALUES
(10, 'FinanceGroup'),
(20, 'SalesGroup');

---------------------------
-- 6) BRM_RULES
---------------------------
INSERT INTO dbo.BRM_RULES (
    RULE_NAME, GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID,
    RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE,
    STATUS, VERSION, CREATED_BY, DESCRIPTION, OPERATION_TYPE,
    BUSINESS_JUSTIFICATION, CREATED_TIMESTAMP, UPDATED_BY,
    OWNER_GROUP, CLUSTER_NAME, APPROVAL_STATUS,
    IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE, LIFECYCLE_STATE
)
VALUES
('RootRuleA', 10, NULL, 1,
 N'SELECT 1 AS pass', '2023-01-01', NULL,
 N'ACTIVE', 1, N'adminuser', N'Root BFS rule', N'SELECT',
 N'JustifyRoot', GETDATE(), NULL,
 N'BG1', N'ClusterX', N'APPROVED',
 0, 0, N'NONE', N'NONE', N'ACTIVE'
),
('ChildRuleB', 10, 1, 2,
 N'SELECT 1 AS pass', '2023-01-01', NULL,
 N'ACTIVE', 1, N'adminuser', N'Child BFS rule B', N'SELECT',
 N'ChildJustification', GETDATE(), NULL,
 N'BG1', N'ClusterX', N'APPROVED',
 0, 1, N'GROUP', N'NONE', N'ACTIVE'
),
('AnotherRuleC', 20, NULL, 1,
 N'UPDATE dbo.Customers SET SomeCol=1', '2023-01-01', NULL,
 N'INACTIVE', 1, N'alice', N'Update rule on customers', N'UPDATE',
 N'We update customers', GETDATE(), N'alice',
 N'BG1', N'ClusterY', N'REJECTED',
 0, 0, N'NONE', N'UPSERT', N'INACTIVE'
),
('GlobalRuleX', 20, NULL, 3,
 N'SELECT 1 AS pass', '2023-01-10', NULL,
 N'ACTIVE', 1, N'adminuser', N'Global BFS rule', N'SELECT',
 N'Company wide rule', GETDATE(), NULL,
 N'Admin', N'', N'APPROVED',
 1, 0, N'GLOBAL', N'NONE', N'ACTIVE'
),
('ChildRuleD', 20, 4, 2,
 N'SELECT 0 AS fail', '2023-02-01', NULL,
 N'INACTIVE', 2, N'bob', N'Fails BFS if run', N'SELECT',
 N'We intentionally fail BFS', GETDATE(), N'bob',
 N'BG2', N'', N'APPROVAL_IN_PROGRESS',
 0, 1, N'GROUP', N'NONE', N'UNDER_APPROVAL'
);

---------------------------
-- 7) BRM_RULE_TABLE_DEPENDENCIES
---------------------------
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES (
    RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP
)
VALUES
(1, N'dbo', N'Customers', N'*', N'READ'),
(2, N'dbo', N'Customers', N'SomeCol', N'WRITE'),
(3, N'dbo', N'Customers', N'SomeCol', N'WRITE'),
(4, N'dbo', N'Orders',    N'*',       N'READ'),
(5, N'dbo', N'Customers', N'SomeCol', N'READ');

---------------------------
-- 8) BRM_AUDIT_LOG
---------------------------
INSERT INTO dbo.BRM_AUDIT_LOG (
    ACTION, TABLE_NAME, RECORD_ID, ACTION_BY,
    OLD_DATA, NEW_DATA, ACTION_TIMESTAMP
)
VALUES
(N'INSERT', N'BRM_RULES', N'1', N'adminuser',
 NULL,
 N'{"RULE_NAME":"RootRuleA"}',
 GETDATE()
);

---------------------------
-- 9) BRM_RULE_LINEAGE
---------------------------
INSERT INTO dbo.BRM_RULE_LINEAGE (
    RULE_ID, REF_RULE_ID, DESCRIPTION
)
VALUES
(2, 1, N'Child depends on Root'),
(5, 4, N'Child depends on Global');

---------------------------
-- 10) BRM_GROUP_BACKUPS
---------------------------
INSERT INTO dbo.BRM_GROUP_BACKUPS (
    GROUP_NAME, BACKUP_TIMESTAMP, BACKUP_JSON
)
VALUES
('BG1', GETDATE(), N'{"members":["alice"],"desc":"Backup test"}');

---------------------------
-- 11) BRM_COLUMN_MAPPING
---------------------------
INSERT INTO dbo.BRM_COLUMN_MAPPING (
    SOURCE_RULE_ID, RULE_ID, COLUMN_NAME, MAP_DETAILS
)
VALUES
(1,2, N'SomeCol', N'Mapped from rule1 => rule2');

---------------------------
-- 12) BRM_CUSTOM_RULE_GROUPS
---------------------------
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY
)
VALUES
(N'VIP Custom Group', 'BG1', 'adminuser'),
(N'Test Custom Group', 'BG2', 'alice');

---------------------------
-- 13) BRM_CUSTOM_GROUP_MEMBERS
---------------------------
-- Adjust CUSTOM_GROUP_ID after checking identity values
-- We assume they inserted as IDs 1 and 2, but verify in your DB:
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (
    CUSTOM_GROUP_ID, RULE_ID
)
VALUES
(1, 2),
(1, 4),
(2, 3);

---------------------------
-- 14) BUSINESS_GROUP_APPROVERS
---------------------------
INSERT INTO dbo.BUSINESS_GROUP_APPROVERS (GROUP_NAME, USERNAME)
VALUES
('BG1', 'alice'),
('BG2', 'bob'),
('Admin', 'adminuser');

---------------------------
-- 15) BRM_RULE_APPROVALS
---------------------------
INSERT INTO dbo.BRM_RULE_APPROVALS (
    RULE_ID, GROUP_NAME, USERNAME,
    APPROVED_FLAG, APPROVED_TIMESTAMP, APPROVAL_STAGE
)
VALUES
(5, 'BG2', 'bob', 0, NULL, 1),
(5, 'FINAL', 'final_approver', 0, NULL, 2);

---------------------------
-- 16) BRM_CUSTOM_GROUP_BACKUPS
---------------------------
INSERT INTO dbo.BRM_CUSTOM_GROUP_BACKUPS (
    CUSTOM_GROUP_ID, BACKUP_TIMESTAMP, BACKUP_VERSION, BACKUP_JSON
)
VALUES
(1, GETDATE(), 1, N'{"group_name":"VIP Custom Group","members":[2,4]}');

---------------------------
-- 17) BRM_GLOBAL_CRITICAL_LINKS
---------------------------
INSERT INTO dbo.BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES
(4, 5);

---------------------------
-- 18) RULE_SCHEDULES
---------------------------
INSERT INTO dbo.RULE_SCHEDULES (
    RULE_ID, SCHEDULE_TIME, STATUS, VALIDATION_FLAG
)
VALUES
(3, DATEADD(day,1,GETDATE()), 'Scheduled', 1);

---------------------------
-- 19) BRM_RULE_COMMENTS
---------------------------
INSERT INTO dbo.BRM_RULE_COMMENTS (
    RULE_ID, COMMENT_TXT, CREATED_BY
)
VALUES
(2, N"Need BFS child logic check", 'adminuser');

---------------------------
-- 20) DECISION_TABLES
---------------------------
INSERT INTO dbo.DECISION_TABLES (TABLE_NAME, DESCRIPTION)
VALUES
('LoanDecisionTable', 'Handles Loan approvals'),
('PremiumCalcTable', 'Calculates insurance premium tiers');

---------------------------
-- 21) RULE_CONFLICTS
---------------------------
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES
(2, 3, 10);

---------------------------
-- 22) COMPOSITE_RULES
---------------------------
INSERT INTO dbo.COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES
('CompositeAB', 'Rule2==PASS AND Rule4==PASS', 'SendEmail'),
('CompositeC', 'Rule1==PASS OR Rule3==PASS', 'LogResult');

---------------------------
-- 23) RULE_SNAPSHOTS
---------------------------
INSERT INTO dbo.RULE_SNAPSHOTS (
    SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON
)
VALUES
('FirstSnapshot','adminuser',
 N'[{"RULE_ID":1,"RULE_NAME":"RootRuleA"},{"RULE_ID":2,"RULE_NAME":"ChildRuleB"}]'
);

---------------------------
-- 24) RULE_TAGS
---------------------------
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME)
VALUES
(1, N'core'),
(2, N'high_priority');

---------------------------
-- 25) DATA_VALIDATIONS
---------------------------
INSERT INTO dbo.DATA_VALIDATIONS (
    TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS
)
VALUES
('dbo.Customers','CreditScore','RANGE','300,850'),
('dbo.Customers','Email','NOT NULL','');

---------------------------
-- 26) RULE_EXECUTION_LOGS
---------------------------
INSERT INTO dbo.RULE_EXECUTION_LOGS (
    RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS
)
VALUES
(1, 1, 'Test pass', 10, 123),
(5, 0, 'Test fail', 0, 789);

---------------------------
-- 27) DATA_VALIDATION_LOGS
---------------------------
INSERT INTO dbo.DATA_VALIDATION_LOGS (
    VALIDATION_ID, TABLE_NAME, COLUMN_NAME, RESULT_FLAG, DETAILS
)
VALUES
(1, 'dbo.Customers','CreditScore','PASS','All scores valid'),
(2, 'dbo.Customers','Email','FAIL','Found 5 nulls');

---------------------------
-- 28) BRM_RULE_LOCKS
---------------------------
INSERT INTO dbo.BRM_RULE_LOCKS (
    RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK
)
VALUES
(2, 1, DATEADD(hour,-1,GETDATE()), DATEADD(hour,1,GETDATE()), 0, 1),
(3, 2, DATEADD(hour,-7,GETDATE()), DATEADD(hour,-1,GETDATE()), 0, 1);