-----------------------------------------------------
-- 1) Drop tables in an order that avoids dependency
-----------------------------------------------------
DROP TABLE IF EXISTS RULE_EXECUTION_LOGS;
DROP TABLE IF EXISTS DATA_VALIDATIONS;
DROP TABLE IF EXISTS RULE_TAGS;
DROP TABLE IF EXISTS RULE_SNAPSHOTS;
DROP TABLE IF EXISTS COMPOSITE_RULES;
DROP TABLE IF EXISTS RULE_CONFLICTS;
DROP TABLE IF EXISTS DECISION_TABLES;
DROP TABLE IF EXISTS BRM_RULE_COMMENTS;
DROP TABLE IF EXISTS RULE_SCHEDULES;
DROP TABLE IF EXISTS BRM_GLOBAL_CRITICAL_LINKS;
DROP TABLE IF EXISTS BRM_CUSTOM_GROUP_BACKUPS;
DROP TABLE IF EXISTS BRM_RULE_APPROVALS;
DROP TABLE IF EXISTS BUSINESS_GROUP_APPROVERS;
DROP TABLE IF EXISTS BRM_CUSTOM_GROUP_MEMBERS;
DROP TABLE IF EXISTS BRM_CUSTOM_RULE_GROUPS;
DROP TABLE IF EXISTS BRM_COLUMN_MAPPING;
DROP TABLE IF EXISTS BRM_GROUP_BACKUPS;
DROP TABLE IF EXISTS BRM_RULE_LINEAGE;
DROP TABLE IF EXISTS BRM_AUDIT_LOG;
DROP TABLE IF EXISTS BRM_RULE_TABLE_DEPENDENCIES;
DROP TABLE IF EXISTS BRM_RULES;
DROP TABLE IF EXISTS BRM_RULE_GROUPS;
DROP TABLE IF EXISTS BRM_RULE_TYPES;
DROP TABLE IF EXISTS GROUP_PERMISSIONS;
DROP TABLE IF EXISTS BUSINESS_GROUPS;
DROP TABLE IF EXISTS USERS;

-----------------------------------------------------
-- 2) Create each table, no foreign key constraints
-----------------------------------------------------

-----------------------------------------------------
-- USERS
-----------------------------------------------------
CREATE TABLE USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME VARCHAR(100) NOT NULL,
    PASSWORD VARCHAR(100) NOT NULL,
    USER_GROUP VARCHAR(100) NOT NULL
);

-----------------------------------------------------
-- BUSINESS_GROUPS
-----------------------------------------------------
CREATE TABLE BUSINESS_GROUPS (
    GROUP_NAME VARCHAR(100) NOT NULL PRIMARY KEY,
    DESCRIPTION VARCHAR(MAX) NULL,
    EMAIL VARCHAR(200) NULL
);

-----------------------------------------------------
-- GROUP_PERMISSIONS
-----------------------------------------------------
CREATE TABLE GROUP_PERMISSIONS (
    GROUP_NAME VARCHAR(100) NOT NULL,
    TARGET_TABLE VARCHAR(200) NOT NULL
    -- No foreign key constraints for demonstration
);

-----------------------------------------------------
-- BRM_RULE_TYPES
-----------------------------------------------------
CREATE TABLE BRM_RULE_TYPES (
    RULE_TYPE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_TYPE_NAME VARCHAR(100) NOT NULL
);

-----------------------------------------------------
-- BRM_RULE_GROUPS
-----------------------------------------------------
CREATE TABLE BRM_RULE_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(200) NOT NULL
);

-----------------------------------------------------
-- BRM_RULES
-----------------------------------------------------
CREATE TABLE BRM_RULES (
    RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT NULL,
    PARENT_RULE_ID INT NULL,
    RULE_TYPE_ID INT NULL,
    RULE_NAME VARCHAR(200) NOT NULL,
    RULE_SQL VARCHAR(MAX) NULL,
    EFFECTIVE_START_DATE DATETIME NULL,
    EFFECTIVE_END_DATE DATETIME NULL,
    STATUS VARCHAR(50) NULL,
    VERSION INT NOT NULL DEFAULT 1,
    CREATED_BY VARCHAR(100) NULL,
    DESCRIPTION VARCHAR(MAX) NULL,
    OPERATION_TYPE VARCHAR(20) NULL,
    BUSINESS_JUSTIFICATION VARCHAR(MAX) NULL,
    CREATED_TIMESTAMP DATETIME NULL,
    UPDATED_BY VARCHAR(100) NULL,
    OWNER_GROUP VARCHAR(100) NULL,
    CLUSTER_NAME VARCHAR(100) NULL,
    APPROVAL_STATUS VARCHAR(50) NULL,
    IS_GLOBAL BIT NOT NULL DEFAULT 0,
    CRITICAL_RULE BIT NOT NULL DEFAULT 0,
    CRITICAL_SCOPE VARCHAR(20) NULL,
    CDC_TYPE VARCHAR(20) NULL,
    LIFECYCLE_STATE VARCHAR(50) NULL
);

-----------------------------------------------------
-- BRM_RULE_TABLE_DEPENDENCIES
-----------------------------------------------------
CREATE TABLE BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DATABASE_NAME VARCHAR(100) NULL,
    TABLE_NAME VARCHAR(200) NOT NULL,
    COLUMN_NAME VARCHAR(200) NOT NULL,
    COLUMN_OP VARCHAR(10) NOT NULL
);

-----------------------------------------------------
-- BRM_AUDIT_LOG
-----------------------------------------------------
CREATE TABLE BRM_AUDIT_LOG (
    AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
    ACTION VARCHAR(50) NOT NULL,
    TABLE_NAME VARCHAR(50) NOT NULL,
    RECORD_ID VARCHAR(50) NULL,
    ACTION_BY VARCHAR(50) NOT NULL,
    OLD_DATA VARCHAR(MAX) NULL,
    NEW_DATA VARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL
);

-----------------------------------------------------
-- BRM_RULE_LINEAGE
-- (Used if you store lineage edges or snapshots. 
--  If not needed, skip or adapt.)
-----------------------------------------------------
CREATE TABLE BRM_RULE_LINEAGE (
    LINEAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    LINEAGE_DATA VARCHAR(MAX) NULL
);

-----------------------------------------------------
-- BRM_GROUP_BACKUPS
-----------------------------------------------------
CREATE TABLE BRM_GROUP_BACKUPS (
    GROUP_BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL,
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON VARCHAR(MAX) NOT NULL
);

-----------------------------------------------------
-- BRM_COLUMN_MAPPING
-- (If your code references this for column references. 
--  E.g. "SELECT * FROM BRM_COLUMN_MAPPING WHERE SOURCE_RULE_ID=?" 
--  This is a placeholder structure.)
-----------------------------------------------------
CREATE TABLE BRM_COLUMN_MAPPING (
    MAPPING_ID INT IDENTITY(1,1) PRIMARY KEY,
    SOURCE_RULE_ID INT NOT NULL,
    RULE_ID INT NOT NULL,
    COLUMN_NAME VARCHAR(200) NOT NULL,
    EXTRA_INFO VARCHAR(MAX) NULL
);

-----------------------------------------------------
-- BRM_CUSTOM_RULE_GROUPS
-----------------------------------------------------
CREATE TABLE BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME VARCHAR(200) NOT NULL,
    OWNER_BUSINESS_GROUP VARCHAR(100) NOT NULL,
    CREATED_BY VARCHAR(100) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL
);

-----------------------------------------------------
-- BRM_CUSTOM_GROUP_MEMBERS
-----------------------------------------------------
CREATE TABLE BRM_CUSTOM_GROUP_MEMBERS (
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID INT NOT NULL
    -- PK not strictly needed, but you can add composite if you want
);

-----------------------------------------------------
-- BUSINESS_GROUP_APPROVERS
-----------------------------------------------------
CREATE TABLE BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    USERNAME VARCHAR(100) NOT NULL
);

-----------------------------------------------------
-- BRM_RULE_APPROVALS
-----------------------------------------------------
CREATE TABLE BRM_RULE_APPROVALS (
    RULE_ID INT NOT NULL,
    GROUP_NAME VARCHAR(100) NOT NULL,
    USERNAME VARCHAR(100) NOT NULL,
    APPROVED_FLAG INT NOT NULL DEFAULT 0,
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVAL_STAGE INT NOT NULL
);

-----------------------------------------------------
-- BRM_CUSTOM_GROUP_BACKUPS
-----------------------------------------------------
CREATE TABLE BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL,
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON VARCHAR(MAX) NOT NULL
);

-----------------------------------------------------
-- BRM_GLOBAL_CRITICAL_LINKS
-----------------------------------------------------
CREATE TABLE BRM_GLOBAL_CRITICAL_LINKS (
    GCR_LINK_ID INT IDENTITY(1,1) PRIMARY KEY,
    GCR_RULE_ID INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);

-----------------------------------------------------
-- RULE_SCHEDULES
-----------------------------------------------------
CREATE TABLE RULE_SCHEDULES (
    SCHEDULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    SCHEDULE_TIME DATETIME NOT NULL,
    STATUS VARCHAR(20) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL
);

-----------------------------------------------------
-- BRM_RULE_COMMENTS
-- (If your code references "BRM_RULE_COMMENTS". 
--  Otherwise skip.)
-----------------------------------------------------
CREATE TABLE BRM_RULE_COMMENTS (
    COMMENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    COMMENT_TEXT VARCHAR(MAX) NOT NULL,
    COMMENT_TIMESTAMP DATETIME NOT NULL
);

-----------------------------------------------------
-- DECISION_TABLES
-----------------------------------------------------
CREATE TABLE DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(MAX) NULL
);

-----------------------------------------------------
-- RULE_CONFLICTS
-----------------------------------------------------
CREATE TABLE RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID1 INT NOT NULL,
    RULE_ID2 INT NOT NULL,
    PRIORITY INT NOT NULL
);

-----------------------------------------------------
-- COMPOSITE_RULES
-----------------------------------------------------
CREATE TABLE COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_NAME VARCHAR(200) NOT NULL,
    LOGIC_EXPR VARCHAR(MAX) NULL,
    ACTION_ON_PASS VARCHAR(MAX) NULL
);

-----------------------------------------------------
-- RULE_SNAPSHOTS
-----------------------------------------------------
CREATE TABLE RULE_SNAPSHOTS (
    SNAPSHOT_ID INT IDENTITY(1,1) PRIMARY KEY,
    SNAPSHOT_NAME VARCHAR(200) NOT NULL,
    CREATED_BY VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    SNAPSHOT_JSON VARCHAR(MAX) NOT NULL
);

-----------------------------------------------------
-- RULE_TAGS
-----------------------------------------------------
CREATE TABLE RULE_TAGS (
    TAG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    TAG_NAME VARCHAR(100) NOT NULL
);

-----------------------------------------------------
-- DATA_VALIDATIONS
-----------------------------------------------------
CREATE TABLE DATA_VALIDATIONS (
    VALIDATION_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(200) NOT NULL,
    COLUMN_NAME VARCHAR(200) NOT NULL,
    VALIDATION_TYPE VARCHAR(50) NOT NULL,
    PARAMS VARCHAR(MAX) NULL
);

-----------------------------------------------------
-- RULE_EXECUTION_LOGS
-----------------------------------------------------
CREATE TABLE RULE_EXECUTION_LOGS (
    EXEC_LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    PASS_FLAG BIT NOT NULL DEFAULT 0,
    MESSAGE VARCHAR(MAX) NULL,
    RECORD_COUNT INT NOT NULL DEFAULT 0
);