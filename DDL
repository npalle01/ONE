/********************************************************************
  USERS
********************************************************************/
IF OBJECT_ID('dbo.USERS','U') IS NOT NULL
    DROP TABLE dbo.USERS;
GO
CREATE TABLE dbo.USERS (
    USER_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    USERNAME  NVARCHAR(100) NOT NULL,
    [PASSWORD] NVARCHAR(100) NOT NULL,
    USER_GROUP NVARCHAR(50)  NOT NULL
);
GO

/********************************************************************
  BUSINESS_GROUPS
********************************************************************/
IF OBJECT_ID('dbo.BUSINESS_GROUPS','U') IS NOT NULL
    DROP TABLE dbo.BUSINESS_GROUPS;
GO
CREATE TABLE dbo.BUSINESS_GROUPS (
    GROUP_NAME  NVARCHAR(100) NOT NULL PRIMARY KEY,
    DESCRIPTION NVARCHAR(500) NULL,
    EMAIL       NVARCHAR(200) NULL
);
GO

/********************************************************************
  GROUP_PERMISSIONS
********************************************************************/
IF OBJECT_ID('dbo.GROUP_PERMISSIONS','U') IS NOT NULL
    DROP TABLE dbo.GROUP_PERMISSIONS;
GO
CREATE TABLE dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME    NVARCHAR(100) NOT NULL,
    TARGET_TABLE  NVARCHAR(200) NOT NULL
);
GO

/********************************************************************
  BRM_RULE_TYPES
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_TYPES','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TYPES;
GO
CREATE TABLE dbo.BRM_RULE_TYPES (
    RULE_TYPE_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_TYPE_NAME NVARCHAR(100) NOT NULL
);
GO

/********************************************************************
  BRM_RULE_GROUPS
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_GROUPS','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_GROUPS;
GO
CREATE TABLE dbo.BRM_RULE_GROUPS (
    GROUP_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME NVARCHAR(100) NOT NULL
);
GO

/********************************************************************
  DECISION_TABLES
********************************************************************/
IF OBJECT_ID('dbo.DECISION_TABLES','U') IS NOT NULL
    DROP TABLE dbo.DECISION_TABLES;
GO
CREATE TABLE dbo.DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    TABLE_NAME        NVARCHAR(200) NOT NULL,
    [DESCRIPTION]     NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  BRM_RULES
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULES','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULES;
GO
CREATE TABLE dbo.BRM_RULES (
    RULE_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_ID       INT              NULL,
    PARENT_RULE_ID INT              NULL,
    RULE_TYPE_ID   INT              NOT NULL,
    RULE_NAME      NVARCHAR(200)    NOT NULL,
    RULE_SQL       NVARCHAR(MAX)    NOT NULL,
    EFFECTIVE_START_DATE DATETIME   NULL,
    EFFECTIVE_END_DATE   DATETIME   NULL,
    [STATUS]       NVARCHAR(50)     NOT NULL DEFAULT('INACTIVE'),
    [VERSION]      INT              NOT NULL DEFAULT(1),
    CREATED_BY     NVARCHAR(100)    NULL,
    [DESCRIPTION]  NVARCHAR(MAX)    NULL,
    OPERATION_TYPE NVARCHAR(50)     NULL,
    BUSINESS_JUSTIFICATION NVARCHAR(MAX) NULL,
    CREATED_TIMESTAMP DATETIME      NOT NULL DEFAULT(GETDATE()),
    UPDATED_BY     NVARCHAR(100)    NULL,
    OWNER_GROUP    NVARCHAR(100)    NOT NULL,
    CLUSTER_NAME   NVARCHAR(100)    NULL,
    APPROVAL_STATUS NVARCHAR(50)    NOT NULL DEFAULT('APPROVAL_IN_PROGRESS'),
    IS_GLOBAL      BIT              NOT NULL DEFAULT(0),
    CRITICAL_RULE  BIT              NOT NULL DEFAULT(0),
    CRITICAL_SCOPE NVARCHAR(50)     NOT NULL DEFAULT('NONE'),
    CDC_TYPE       NVARCHAR(50)     NOT NULL DEFAULT('NONE'),
    DECISION_TABLE_ID INT           NULL,
    LOCKED_BY      NVARCHAR(100)    NULL,
    LOCK_TIMESTAMP DATETIME         NULL
);
GO

/********************************************************************
  BRM_RULE_TABLE_DEPENDENCIES
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
GO
CREATE TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID       INT NOT NULL,
    DATABASE_NAME NVARCHAR(100) NOT NULL,
    TABLE_NAME    NVARCHAR(200) NOT NULL,
    COLUMN_NAME   NVARCHAR(200) NOT NULL,
    COLUMN_OP     NVARCHAR(10)  NOT NULL
);
GO

/********************************************************************
  BRM_AUDIT_LOG
********************************************************************/
IF OBJECT_ID('dbo.BRM_AUDIT_LOG','U') IS NOT NULL
    DROP TABLE dbo.BRM_AUDIT_LOG;
GO
CREATE TABLE dbo.BRM_AUDIT_LOG (
    AUDIT_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    [ACTION]        NVARCHAR(50)  NOT NULL,
    TABLE_NAME      NVARCHAR(100) NOT NULL,
    RECORD_ID       NVARCHAR(50)  NULL,
    ACTION_BY       NVARCHAR(100) NOT NULL,
    OLD_DATA        NVARCHAR(MAX)  NULL,
    NEW_DATA        NVARCHAR(MAX)  NULL,
    ACTION_TIMESTAMP DATETIME      NOT NULL DEFAULT(GETDATE())
);
GO

/********************************************************************
  BRM_RULE_LINEAGE
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_LINEAGE','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_LINEAGE;
GO
CREATE TABLE dbo.BRM_RULE_LINEAGE (
    LINEAGE_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID      INT NOT NULL,
    LINEAGE_JSON NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  BRM_GROUP_BACKUPS
********************************************************************/
IF OBJECT_ID('dbo.BRM_GROUP_BACKUPS','U') IS NOT NULL
    DROP TABLE dbo.BRM_GROUP_BACKUPS;
GO
CREATE TABLE dbo.BRM_GROUP_BACKUPS (
    BACKUP_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME       NVARCHAR(100) NOT NULL,
    BACKUP_TIMESTAMP DATETIME      NOT NULL DEFAULT(GETDATE()),
    BACKUP_JSON      NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  BRM_COLUMN_MAPPING
********************************************************************/
IF OBJECT_ID('dbo.BRM_COLUMN_MAPPING','U') IS NOT NULL
    DROP TABLE dbo.BRM_COLUMN_MAPPING;
GO
CREATE TABLE dbo.BRM_COLUMN_MAPPING (
    MAPPING_ID    INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SOURCE_RULE_ID INT NOT NULL,
    RULE_ID        INT NOT NULL,
    COLUMN_NAME    NVARCHAR(200) NOT NULL
);
GO

/********************************************************************
  BRM_CUSTOM_RULE_GROUPS
********************************************************************/
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS','U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
GO
CREATE TABLE dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_NAME      NVARCHAR(200) NOT NULL,
    OWNER_BUSINESS_GROUP   NVARCHAR(100) NOT NULL,
    CREATED_BY            NVARCHAR(100)  NOT NULL,
    CREATED_TIMESTAMP     DATETIME       NOT NULL DEFAULT(GETDATE())
);
GO

/********************************************************************
  BRM_CUSTOM_GROUP_MEMBERS
********************************************************************/
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS','U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
GO
CREATE TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID         INT NOT NULL
);
GO

/********************************************************************
  BUSINESS_GROUP_APPROVERS
********************************************************************/
IF OBJECT_ID('dbo.BUSINESS_GROUP_APPROVERS','U') IS NOT NULL
    DROP TABLE dbo.BUSINESS_GROUP_APPROVERS;
GO
CREATE TABLE dbo.BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME  NVARCHAR(100) NOT NULL,
    USERNAME    NVARCHAR(100) NOT NULL
);
GO

/********************************************************************
  BRM_RULE_APPROVALS
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_APPROVALS;
GO
CREATE TABLE dbo.BRM_RULE_APPROVALS (
    APPROVAL_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID          INT NOT NULL,
    GROUP_NAME       NVARCHAR(100) NOT NULL,
    USERNAME         NVARCHAR(100) NOT NULL,
    APPROVED_FLAG    INT NOT NULL DEFAULT(0),
    APPROVED_TIMESTAMP DATETIME  NULL,
    APPROVAL_STAGE   INT NOT NULL DEFAULT(1),
    ACTION_TYPE      NVARCHAR(50) NOT NULL DEFAULT('CREATE_OR_UPDATE')
);
GO

/********************************************************************
  BRM_CUSTOM_GROUP_BACKUPS
********************************************************************/
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_BACKUPS','U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS;
GO
CREATE TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON    NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  BRM_GLOBAL_CRITICAL_LINKS
********************************************************************/
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS','U') IS NOT NULL
    DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
GO
CREATE TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GCR_RULE_ID   INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);
GO

/********************************************************************
  RULE_SCHEDULES
********************************************************************/
IF OBJECT_ID('dbo.RULE_SCHEDULES','U') IS NOT NULL
    DROP TABLE dbo.RULE_SCHEDULES;
GO
CREATE TABLE dbo.RULE_SCHEDULES (
    SCHEDULE_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID          INT NOT NULL,
    SCHEDULE_TIME    DATETIME NOT NULL,
    [STATUS]         NVARCHAR(50) NOT NULL DEFAULT('Scheduled'),
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

/********************************************************************
  BRM_RULE_COMMENTS (optional)
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_COMMENTS','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_COMMENTS;
GO
CREATE TABLE dbo.BRM_RULE_COMMENTS (
    COMMENT_ID  INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID     INT NOT NULL,
    COMMENT_TEXT NVARCHAR(MAX) NULL,
    CREATED_BY   NVARCHAR(100) NOT NULL,
    CREATED_TS   DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

/********************************************************************
  RULE_CONFLICTS
********************************************************************/
IF OBJECT_ID('dbo.RULE_CONFLICTS','U') IS NOT NULL
    DROP TABLE dbo.RULE_CONFLICTS;
GO
CREATE TABLE dbo.RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID1    INT NOT NULL,
    RULE_ID2    INT NOT NULL,
    PRIORITY    INT NOT NULL
);
GO

/********************************************************************
  COMPOSITE_RULES
********************************************************************/
IF OBJECT_ID('dbo.COMPOSITE_RULES','U') IS NOT NULL
    DROP TABLE dbo.COMPOSITE_RULES;
GO
CREATE TABLE dbo.COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CRULE_NAME        NVARCHAR(200) NOT NULL,
    LOGIC_EXPR        NVARCHAR(MAX) NULL,
    ACTION_ON_PASS    NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  RULE_SNAPSHOTS
********************************************************************/
IF OBJECT_ID('dbo.RULE_SNAPSHOTS','U') IS NOT NULL
    DROP TABLE dbo.RULE_SNAPSHOTS;
GO
CREATE TABLE dbo.RULE_SNAPSHOTS (
    SNAPSHOT_ID     INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SNAPSHOT_NAME   NVARCHAR(200) NOT NULL,
    CREATED_BY      NVARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    SNAPSHOT_JSON   NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  RULE_TAGS
********************************************************************/
IF OBJECT_ID('dbo.RULE_TAGS','U') IS NOT NULL
    DROP TABLE dbo.RULE_TAGS;
GO
CREATE TABLE dbo.RULE_TAGS (
    TAG_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID  INT NOT NULL,
    TAG_NAME NVARCHAR(200) NOT NULL
);
GO

/********************************************************************
  DATA_VALIDATIONS
********************************************************************/
IF OBJECT_ID('dbo.DATA_VALIDATIONS','U') IS NOT NULL
    DROP TABLE dbo.DATA_VALIDATIONS;
GO
CREATE TABLE dbo.DATA_VALIDATIONS (
    VALIDATION_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    TABLE_NAME      NVARCHAR(200) NOT NULL,
    COLUMN_NAME     NVARCHAR(200) NOT NULL,
    VALIDATION_TYPE NVARCHAR(50)  NOT NULL,
    PARAMS          NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  RULE_EXECUTION_LOGS
********************************************************************/
IF OBJECT_ID('dbo.RULE_EXECUTION_LOGS','U') IS NOT NULL
    DROP TABLE dbo.RULE_EXECUTION_LOGS;
GO
CREATE TABLE dbo.RULE_EXECUTION_LOGS (
    EXEC_LOG_ID    INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID        INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    PASS_FLAG      BIT NOT NULL,
    MESSAGE        NVARCHAR(MAX) NULL,
    RECORD_COUNT   INT NOT NULL DEFAULT(0)
);
GO

/****************************************************************************
 TRIGGERS TO SIMULATE FOREIGN KEY CHECKS FOR THE BRM TOOL
****************************************************************************/

/******************************************************************************
 1) BRM_RULES references multiple parent tables/fields:
   - RULE_TYPE_ID => BRM_RULE_TYPES(RULE_TYPE_ID)
   - GROUP_ID => BRM_RULE_GROUPS(GROUP_ID)
   - PARENT_RULE_ID => BRM_RULES(RULE_ID) (self-reference)
   - DECISION_TABLE_ID => DECISION_TABLES(DECISION_TABLE_ID)
   - OWNER_GROUP => BUSINESS_GROUPS(GROUP_NAME)
******************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_rules_ref_checks
ON dbo.BRM_RULES
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    /**** Check RULE_TYPE_ID => BRM_RULE_TYPES ****/
    IF EXISTS (
        SELECT 1
        FROM inserted i
        WHERE i.RULE_TYPE_ID IS NOT NULL
          AND NOT EXISTS (
             SELECT 1 FROM dbo.BRM_RULE_TYPES rt 
             WHERE rt.RULE_TYPE_ID = i.RULE_TYPE_ID
          )
    )
    BEGIN
        RAISERROR('Invalid RULE_TYPE_ID in BRM_RULES. No matching row in BRM_RULE_TYPES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    /**** Check GROUP_ID => BRM_RULE_GROUPS ****/
    IF EXISTS (
        SELECT 1
        FROM inserted i
        WHERE i.GROUP_ID IS NOT NULL
          AND NOT EXISTS (
             SELECT 1 FROM dbo.BRM_RULE_GROUPS rg
             WHERE rg.GROUP_ID = i.GROUP_ID
          )
    )
    BEGIN
        RAISERROR('Invalid GROUP_ID in BRM_RULES. No matching row in BRM_RULE_GROUPS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    /**** Check PARENT_RULE_ID => BRM_RULES (self reference) ****/
    IF EXISTS (
        SELECT 1
        FROM inserted i
        WHERE i.PARENT_RULE_ID IS NOT NULL
          AND NOT EXISTS (
             SELECT 1 FROM dbo.BRM_RULES r2
             WHERE r2.RULE_ID = i.PARENT_RULE_ID
          )
    )
    BEGIN
        RAISERROR('Invalid PARENT_RULE_ID in BRM_RULES. That parent rule does not exist.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    /**** Check DECISION_TABLE_ID => DECISION_TABLES ****/
    IF EXISTS (
        SELECT 1
        FROM inserted i
        WHERE i.DECISION_TABLE_ID IS NOT NULL
          AND NOT EXISTS (
             SELECT 1 FROM dbo.DECISION_TABLES dt
             WHERE dt.DECISION_TABLE_ID = i.DECISION_TABLE_ID
          )
    )
    BEGIN
        RAISERROR('Invalid DECISION_TABLE_ID in BRM_RULES. No matching row in DECISION_TABLES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    /**** Check OWNER_GROUP => BUSINESS_GROUPS(GROUP_NAME) ****/
    IF EXISTS (
        SELECT 1
        FROM inserted i
        WHERE NOT EXISTS (
             SELECT 1 FROM dbo.BUSINESS_GROUPS bg
             WHERE bg.GROUP_NAME = i.OWNER_GROUP
          )
    )
    BEGIN
        RAISERROR('Invalid OWNER_GROUP in BRM_RULES. No matching row in BUSINESS_GROUPS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 2) BRM_RULE_TABLE_DEPENDENCIES(RULE_ID => BRM_RULES(RULE_ID))
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_rule_table_dep_rule_check
ON dbo.BRM_RULE_TABLE_DEPENDENCIES
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
        SELECT 1
        FROM inserted i
        WHERE NOT EXISTS (
          SELECT 1 FROM dbo.BRM_RULES r
          WHERE r.RULE_ID = i.RULE_ID
        )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in BRM_RULE_TABLE_DEPENDENCIES. Rule not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 3) GROUP_PERMISSIONS(GROUP_NAME => BUSINESS_GROUPS(GROUP_NAME))
****************************************************************************/
CREATE OR ALTER TRIGGER tr_group_permissions_bg_check
ON dbo.GROUP_PERMISSIONS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
        SELECT 1
        FROM inserted i
        WHERE NOT EXISTS (
           SELECT 1 FROM dbo.BUSINESS_GROUPS bg
           WHERE bg.GROUP_NAME = i.GROUP_NAME
        )
    )
    BEGIN
        RAISERROR('Invalid GROUP_NAME in GROUP_PERMISSIONS. Not found in BUSINESS_GROUPS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 4) BRM_RULE_LINEAGE(RULE_ID => BRM_RULES(RULE_ID))
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_rule_lineage_rule_check
ON dbo.BRM_RULE_LINEAGE
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
       SELECT 1 
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.RULE_ID
       )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in BRM_RULE_LINEAGE.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 5) BRM_GROUP_BACKUPS(GROUP_NAME => BUSINESS_GROUPS(GROUP_NAME))
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_group_backups_bg_check
ON dbo.BRM_GROUP_BACKUPS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BUSINESS_GROUPS bg
         WHERE bg.GROUP_NAME = i.GROUP_NAME
       )
    )
    BEGIN
        RAISERROR('Invalid GROUP_NAME in BRM_GROUP_BACKUPS. Not found in BUSINESS_GROUPS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 6) BRM_COLUMN_MAPPING => references RULES for (SOURCE_RULE_ID, RULE_ID)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_column_mapping_check
ON dbo.BRM_COLUMN_MAPPING
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    /**** Check SOURCE_RULE_ID => BRM_RULES ****/
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.SOURCE_RULE_ID
       )
    )
    BEGIN
        RAISERROR('Invalid SOURCE_RULE_ID in BRM_COLUMN_MAPPING. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    /**** Check RULE_ID => BRM_RULES ****/
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.RULE_ID
       )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in BRM_COLUMN_MAPPING. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 7) BRM_CUSTOM_RULE_GROUPS(OWNER_BUSINESS_GROUP => BUSINESS_GROUPS(GROUP_NAME))
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_custom_rule_groups_check
ON dbo.BRM_CUSTOM_RULE_GROUPS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BUSINESS_GROUPS bg
         WHERE bg.GROUP_NAME = i.OWNER_BUSINESS_GROUP
       )
    )
    BEGIN
        RAISERROR('Invalid OWNER_BUSINESS_GROUP in BRM_CUSTOM_RULE_GROUPS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 8) BRM_CUSTOM_GROUP_MEMBERS => references (CUSTOM_GROUP_ID => BRM_CUSTOM_RULE_GROUPS)
   and (RULE_ID => BRM_RULES)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_custom_group_members_check
ON dbo.BRM_CUSTOM_GROUP_MEMBERS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    /**** Check CUSTOM_GROUP_ID => BRM_CUSTOM_RULE_GROUPS ****/
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_CUSTOM_RULE_GROUPS cg
         WHERE cg.CUSTOM_GROUP_ID = i.CUSTOM_GROUP_ID
       )
    )
    BEGIN
        RAISERROR('Invalid CUSTOM_GROUP_ID in BRM_CUSTOM_GROUP_MEMBERS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    /**** Check RULE_ID => BRM_RULES ****/
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.RULE_ID
       )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in BRM_CUSTOM_GROUP_MEMBERS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 9) BUSINESS_GROUP_APPROVERS(GROUP_NAME => BUSINESS_GROUPS(GROUP_NAME))
****************************************************************************/
CREATE OR ALTER TRIGGER tr_business_group_approvers_check
ON dbo.BUSINESS_GROUP_APPROVERS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BUSINESS_GROUPS bg
         WHERE bg.GROUP_NAME = i.GROUP_NAME
       )
    )
    BEGIN
        RAISERROR('Invalid GROUP_NAME in BUSINESS_GROUP_APPROVERS. Not found in BUSINESS_GROUPS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 10) BRM_RULE_APPROVALS => references (RULE_ID => BRM_RULES) and (GROUP_NAME => BUSINESS_GROUPS)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_rule_approvals_check
ON dbo.BRM_RULE_APPROVALS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    /**** Check RULE_ID => BRM_RULES ****/
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.RULE_ID
       )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in BRM_RULE_APPROVALS. Rule not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    /**** Check GROUP_NAME => BUSINESS_GROUPS ****/
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BUSINESS_GROUPS bg
         WHERE bg.GROUP_NAME = i.GROUP_NAME
       )
    )
    BEGIN
        RAISERROR('Invalid GROUP_NAME in BRM_RULE_APPROVALS. Not found in BUSINESS_GROUPS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 11) BRM_CUSTOM_GROUP_BACKUPS => references (CUSTOM_GROUP_ID => BRM_CUSTOM_RULE_GROUPS)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_custom_group_backups_check
ON dbo.BRM_CUSTOM_GROUP_BACKUPS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_CUSTOM_RULE_GROUPS cg
         WHERE cg.CUSTOM_GROUP_ID = i.CUSTOM_GROUP_ID
       )
    )
    BEGIN
        RAISERROR('Invalid CUSTOM_GROUP_ID in BRM_CUSTOM_GROUP_BACKUPS.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 12) BRM_GLOBAL_CRITICAL_LINKS => references (GCR_RULE_ID => BRM_RULES) and (TARGET_RULE_ID => BRM_RULES)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_global_critical_links_check
ON dbo.BRM_GLOBAL_CRITICAL_LINKS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.GCR_RULE_ID
       )
    )
    BEGIN
        RAISERROR('Invalid GCR_RULE_ID in BRM_GLOBAL_CRITICAL_LINKS. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.TARGET_RULE_ID
       )
    )
    BEGIN
        RAISERROR('Invalid TARGET_RULE_ID in BRM_GLOBAL_CRITICAL_LINKS. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 13) RULE_SCHEDULES => references (RULE_ID => BRM_RULES)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_rule_schedules_check
ON dbo.RULE_SCHEDULES
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
      SELECT 1
      FROM inserted i
      WHERE NOT EXISTS (
        SELECT 1 FROM dbo.BRM_RULES r
        WHERE r.RULE_ID = i.RULE_ID
      )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in RULE_SCHEDULES. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 14) BRM_RULE_COMMENTS => references (RULE_ID => BRM_RULES)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_brm_rule_comments_check
ON dbo.BRM_RULE_COMMENTS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
      SELECT 1
      FROM inserted i
      WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.RULE_ID
      )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in BRM_RULE_COMMENTS. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 15) RULE_CONFLICTS => references (RULE_ID1 => BRM_RULES, RULE_ID2 => BRM_RULES)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_rule_conflicts_check
ON dbo.RULE_CONFLICTS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    /**** Check RULE_ID1 => BRM_RULES ****/
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.RULE_ID1
       )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID1 in RULE_CONFLICTS. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;

    /**** Check RULE_ID2 => BRM_RULES ****/
    IF EXISTS (
       SELECT 1
       FROM inserted i
       WHERE NOT EXISTS (
         SELECT 1 FROM dbo.BRM_RULES r
         WHERE r.RULE_ID = i.RULE_ID2
       )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID2 in RULE_CONFLICTS. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 16) RULE_TAGS => references (RULE_ID => BRM_RULES)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_rule_tags_check
ON dbo.RULE_TAGS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
      SELECT 1 
      FROM inserted i
      WHERE NOT EXISTS (
        SELECT 1 FROM dbo.BRM_RULES r
        WHERE r.RULE_ID = i.RULE_ID
      )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in RULE_TAGS. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO


/****************************************************************************
 17) RULE_EXECUTION_LOGS => references (RULE_ID => BRM_RULES)
****************************************************************************/
CREATE OR ALTER TRIGGER tr_rule_execution_logs_check
ON dbo.RULE_EXECUTION_LOGS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
      SELECT 1
      FROM inserted i
      WHERE NOT EXISTS (
        SELECT 1 FROM dbo.BRM_RULES r
        WHERE r.RULE_ID = i.RULE_ID
      )
    )
    BEGIN
        RAISERROR('Invalid RULE_ID in RULE_EXECUTION_LOGS. Not found in BRM_RULES.',16,1);
        ROLLBACK TRANSACTION;
        RETURN;
    END;
END;
GO

/****************************************************************************
   Done. Now all referencing tables have triggers that simulate foreign keys.
****************************************************************************/