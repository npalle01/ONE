Below is a complete set of SQL Server DDL statements that create all of the tables used by the tool. These statements define each table with the necessary columns (and basic primary‐key constraints) so that the application can work properly. Note that no foreign‐key “REFERENCES” clauses have been added per your request.

You can run these scripts (for example in SQL Server Management Studio) to create the required schema.

⸻



-- 1. BRM_AUDIT_LOG
CREATE TABLE BRM_AUDIT_LOG (
    AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
    ACTION VARCHAR(50) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    RECORD_ID VARCHAR(50),
    ACTION_BY VARCHAR(50),
    OLD_DATA NVARCHAR(MAX),
    NEW_DATA NVARCHAR(MAX),
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);

-- 2. USERS
CREATE TABLE USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(50) NOT NULL,
    USER_GROUP VARCHAR(50) NOT NULL
);

-- 3. BRM_RULE_LOCKS
CREATE TABLE BRM_RULE_LOCKS (
    LOCK_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    LOCKED_BY VARCHAR(50) NOT NULL,
    LOCK_TIMESTAMP DATETIME NOT NULL,
    EXPIRY_TIMESTAMP DATETIME,
    FORCE_LOCK BIT NOT NULL DEFAULT 0,
    ACTIVE_LOCK BIT NOT NULL DEFAULT 1
);

-- 4. GROUP_PERMISSIONS
CREATE TABLE GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(50) NOT NULL,
    TARGET_TABLE VARCHAR(100) NOT NULL
);

-- 5. DATA_VALIDATIONS
CREATE TABLE DATA_VALIDATIONS (
    VALIDATION_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(100) NOT NULL,
    COLUMN_NAME VARCHAR(100) NOT NULL,
    VALIDATION_TYPE VARCHAR(20) NOT NULL,
    PARAMS VARCHAR(100)
);

-- 6. BRM_RULE_TABLE_DEPENDENCIES
CREATE TABLE BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DATABASE_NAME VARCHAR(50) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    COLUMN_NAME VARCHAR(100),
    COLUMN_OP VARCHAR(10),
    DATA_TYPE VARCHAR(50)
);

-- 7. BRM_RULE_APPROVALS
CREATE TABLE BRM_RULE_APPROVALS (
    APPROVAL_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    GROUP_NAME VARCHAR(50) NOT NULL,
    USERNAME VARCHAR(50) NOT NULL,
    APPROVED_FLAG INT NOT NULL,  -- 0 = pending, 1 = approved, 2 = rejected
    APPROVED_TIMESTAMP DATETIME,
    APPROVAL_STAGE INT NOT NULL
);

-- 8. BRM_RULES
CREATE TABLE BRM_RULES (
    RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT,  -- (assigned via application logic)
    PARENT_RULE_ID INT,
    RULE_TYPE_ID INT NOT NULL,
    RULE_NAME VARCHAR(200) NOT NULL,
    RULE_SQL NVARCHAR(MAX) NOT NULL,
    EFFECTIVE_START_DATE DATETIME NOT NULL,
    EFFECTIVE_END_DATE DATETIME,
    STATUS VARCHAR(20) NOT NULL,
    VERSION INT NOT NULL DEFAULT 1,
    CREATED_BY VARCHAR(50) NOT NULL,
    DESCRIPTION NVARCHAR(MAX),
    OPERATION_TYPE VARCHAR(20),
    BUSINESS_JUSTIFICATION NVARCHAR(MAX),
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    UPDATED_BY VARCHAR(50),
    OWNER_GROUP VARCHAR(50) NOT NULL,
    APPROVAL_STATUS VARCHAR(50),
    IS_GLOBAL BIT NOT NULL DEFAULT 0,
    CRITICAL_RULE BIT NOT NULL DEFAULT 0,
    CRITICAL_SCOPE VARCHAR(20) NOT NULL DEFAULT 'NONE',
    CDC_TYPE VARCHAR(20) NOT NULL DEFAULT 'NONE',
    LIFECYCLE_STATE VARCHAR(20) NOT NULL,
    LOCK_STATUS VARCHAR(20)
);

-- 9. BRM_GLOBAL_CRITICAL_LINKS
CREATE TABLE BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID INT IDENTITY(1,1) PRIMARY KEY,
    GCR_RULE_ID INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);

-- 10. RULE_CONFLICTS
CREATE TABLE RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID1 INT NOT NULL,
    RULE_ID2 INT NOT NULL,
    PRIORITY INT NOT NULL
);

-- 11. COMPOSITE_RULES
CREATE TABLE COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_NAME VARCHAR(200) NOT NULL,
    LOGIC_EXPR NVARCHAR(MAX),
    ACTION_ON_PASS VARCHAR(50)
);

-- 12. RULE_EXECUTION_LOGS
CREATE TABLE RULE_EXECUTION_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    PASS_FLAG BIT NOT NULL,
    MESSAGE VARCHAR(255),
    RECORD_COUNT INT,
    EXECUTION_TIME_MS INT
);

-- 13. BRM_COLUMN_MAPPING
CREATE TABLE BRM_COLUMN_MAPPING (
    MAPPING_ID INT IDENTITY(1,1) PRIMARY KEY,
    SOURCE_RULE_ID INT NOT NULL,
    RULE_ID INT NOT NULL
);

-- 14. RULE_SCHEDULES
CREATE TABLE RULE_SCHEDULES (
    SCHEDULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    SCHEDULE_TIME DATETIME NOT NULL,
    STATUS VARCHAR(20) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    VALIDATION_FLAG BIT NOT NULL DEFAULT 0
);

-- 15. DECISION_TABLES
CREATE TABLE DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(100) NOT NULL,
    DESCRIPTION NVARCHAR(MAX)
);

-- 16. RULE_SNAPSHOTS
CREATE TABLE RULE_SNAPSHOTS (
    SNAPSHOT_ID INT IDENTITY(1,1) PRIMARY KEY,
    SNAPSHOT_NAME VARCHAR(100) NOT NULL,
    CREATED_BY VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    SNAPSHOT_JSON NVARCHAR(MAX)
);

-- 17. RULE_TAGS
CREATE TABLE RULE_TAGS (
    TAG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    TAG_NAME VARCHAR(50) NOT NULL
);

-- 18. DATA_VALIDATION_LOGS
CREATE TABLE DATA_VALIDATION_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RESULT_FLAG VARCHAR(10) NOT NULL,  -- e.g., 'PASS' or 'FAIL'
    VALIDATION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);

-- 19. BUSINESS_GROUPS
CREATE TABLE BUSINESS_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(50) NOT NULL,
    DESCRIPTION NVARCHAR(MAX),
    EMAIL VARCHAR(100)
);

-- 20. BRM_RULE_TYPES
CREATE TABLE BRM_RULE_TYPES (
    RULE_TYPE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_TYPE_NAME VARCHAR(50) NOT NULL
);

-- 21. BRM_RULE_GROUPS
CREATE TABLE BRM_RULE_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(50) NOT NULL
);

-- 22. BRM_RULE_LINEAGE
CREATE TABLE BRM_RULE_LINEAGE (
    LINEAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DEPENDS_ON_RULE_ID INT NOT NULL,
    DETAILS NVARCHAR(MAX)
);

-- 23. BRM_GROUP_BACKUPS
CREATE TABLE BRM_GROUP_BACKUPS (
    BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    BACKUP_JSON NVARCHAR(MAX)
);

-- 24. BRM_CUSTOM_RULE_GROUPS
CREATE TABLE BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME VARCHAR(50) NOT NULL,
    OWNER_BUSINESS_GROUP VARCHAR(50) NOT NULL,
    CREATED_BY VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);

-- 25. BRM_CUSTOM_GROUP_MEMBERS
CREATE TABLE BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID INT NOT NULL
);

-- 26. BUSINESS_GROUP_APPROVERS
CREATE TABLE BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(50) NOT NULL,
    USERNAME VARCHAR(50) NOT NULL
);

-- 27. BRM_CUSTOM_GROUP_BACKUPS
CREATE TABLE BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON NVARCHAR(MAX)
);

-- 28. BRM_RULE_COMMENTS
CREATE TABLE BRM_RULE_COMMENTS (
    COMMENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    COMMENT_TEXT NVARCHAR(MAX) NOT NULL,
    COMMENTED_BY VARCHAR(50) NOT NULL,
    COMMENT_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);



⸻

Each table is created independently without any foreign key constraints. You may later add additional indexes or constraints as needed by your environment.

Make sure to adjust data types or sizes (and add additional columns if required) based on your actual production needs. This set of DDL should serve as a complete baseline schema for the BRM Tool to work properly on SQL Server.