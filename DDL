-----------------------------------------------
-- 1) BRM_RULES
-----------------------------------------------
CREATE TABLE BRM_RULES (
    RULE_ID            INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID           INT NULL,
    PARENT_RULE_ID     INT NULL,
    RULE_TYPE_ID       INT NOT NULL,
    RULE_NAME          VARCHAR(255) NOT NULL,
    RULE_SQL           VARCHAR(MAX) NULL,
    EFFECTIVE_START_DATE DATETIME NOT NULL,
    EFFECTIVE_END_DATE   DATETIME NULL,
    STATUS             VARCHAR(20) NOT NULL DEFAULT('INACTIVE'),
    VERSION            INT NOT NULL DEFAULT(1),
    CREATED_BY         VARCHAR(50) NOT NULL,
    DESCRIPTION        VARCHAR(MAX) NULL,
    OPERATION_TYPE     VARCHAR(20) NULL,    -- SELECT/INSERT/ETC
    BUSINESS_JUSTIFICATION VARCHAR(MAX) NULL,
    CREATED_TIMESTAMP  DATETIME NOT NULL DEFAULT(GETDATE()),
    UPDATED_BY         VARCHAR(50) NULL,
    OWNER_GROUP        VARCHAR(100) NOT NULL,
    CLUSTER_NAME       VARCHAR(50) NULL,
    APPROVAL_STATUS    VARCHAR(20) NOT NULL DEFAULT('APPROVAL_IN_PROGRESS'),
    IS_GLOBAL          BIT NOT NULL DEFAULT(0),
    CRITICAL_RULE      BIT NOT NULL DEFAULT(0),
    CRITICAL_SCOPE     VARCHAR(20) NOT NULL DEFAULT('NONE'),
    CDC_TYPE           VARCHAR(20) NOT NULL DEFAULT('NONE'),
    LIFECYCLE_STATE    VARCHAR(20) NOT NULL DEFAULT('DRAFT'),
    DECISION_TABLE_ID  INT NULL
);

-----------------------------------------------
-- 2) BRM_RULE_APPROVALS
-----------------------------------------------
CREATE TABLE BRM_RULE_APPROVALS (
    APPROVER_ID       INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID           INT NOT NULL,
    GROUP_NAME        VARCHAR(100) NOT NULL,
    USERNAME          VARCHAR(50) NOT NULL,
    APPROVED_FLAG     INT NOT NULL DEFAULT(0),  -- 0=Pending,1=Approved,2=Rejected
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVAL_STAGE    INT NOT NULL
);

-----------------------------------------------
-- 3) BRM_AUDIT_LOG
-----------------------------------------------
CREATE TABLE BRM_AUDIT_LOG (
    AUDIT_ID         INT IDENTITY(1,1) PRIMARY KEY,
    ACTION           VARCHAR(50) NOT NULL,
    TABLE_NAME       VARCHAR(50) NOT NULL,
    RECORD_ID        VARCHAR(50) NULL,
    ACTION_BY        VARCHAR(50) NOT NULL,
    OLD_DATA         VARCHAR(MAX) NULL,
    NEW_DATA         VARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);

-----------------------------------------------
-- 4) BRM_RULE_TABLE_DEPENDENCIES
-----------------------------------------------
CREATE TABLE BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID    INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID          INT NOT NULL,
    DATABASE_NAME    VARCHAR(50) NULL,
    TABLE_NAME       VARCHAR(100) NOT NULL,
    COLUMN_NAME      VARCHAR(100) NOT NULL,
    COLUMN_OP        VARCHAR(10) NOT NULL  -- e.g. READ or WRITE
);

-----------------------------------------------
-- 5) BRM_RULE_TYPES
-----------------------------------------------
CREATE TABLE BRM_RULE_TYPES (
    RULE_TYPE_ID    INT IDENTITY(1,1) PRIMARY KEY,
    RULE_TYPE_NAME  VARCHAR(50) NOT NULL
);

-----------------------------------------------
-- 6) BRM_RULE_GROUPS
-----------------------------------------------
CREATE TABLE BRM_RULE_GROUPS (
    GROUP_ID    INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME  VARCHAR(100) NOT NULL
);

-----------------------------------------------
-- 7) RULE_SCHEDULES
-----------------------------------------------
CREATE TABLE RULE_SCHEDULES (
    SCHEDULE_ID     INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID         INT NOT NULL,
    SCHEDULE_TIME   DATETIME NOT NULL,
    STATUS          VARCHAR(20) NOT NULL DEFAULT('Scheduled'),
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);

-----------------------------------------------
-- 8) DECISION_TABLES
-----------------------------------------------
CREATE TABLE DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME        VARCHAR(100) NOT NULL,
    DESCRIPTION       VARCHAR(MAX) NULL
);

-----------------------------------------------
-- 9) RULE_CONFLICTS
-----------------------------------------------
CREATE TABLE RULE_CONFLICTS (
    CONFLICT_ID  INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID1     INT NOT NULL,
    RULE_ID2     INT NOT NULL,
    PRIORITY     INT NOT NULL DEFAULT(0)
);

-----------------------------------------------
-- 10) COMPOSITE_RULES
-----------------------------------------------
CREATE TABLE COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_NAME        VARCHAR(100) NOT NULL,
    LOGIC_EXPR        VARCHAR(MAX) NULL,
    ACTION_ON_PASS    VARCHAR(MAX) NULL
);

-----------------------------------------------
-- 11) RULE_SNAPSHOTS
-----------------------------------------------
CREATE TABLE RULE_SNAPSHOTS (
    SNAPSHOT_ID     INT IDENTITY(1,1) PRIMARY KEY,
    SNAPSHOT_NAME   VARCHAR(100) NOT NULL,
    CREATED_BY      VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    SNAPSHOT_JSON   VARCHAR(MAX) NOT NULL
);

-----------------------------------------------
-- 12) RULE_TAGS
-----------------------------------------------
CREATE TABLE RULE_TAGS (
    TAG_ID    INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID   INT NOT NULL,
    TAG_NAME  VARCHAR(100) NOT NULL
);

-----------------------------------------------
-- 13) DATA_VALIDATIONS
-----------------------------------------------
CREATE TABLE DATA_VALIDATIONS (
    VALIDATION_ID    INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME       VARCHAR(100) NOT NULL,
    COLUMN_NAME      VARCHAR(100) NOT NULL,
    VALIDATION_TYPE  VARCHAR(50) NOT NULL,
    PARAMS           VARCHAR(MAX) NULL
);

-----------------------------------------------
-- 14) RULE_EXECUTION_LOGS
-----------------------------------------------
CREATE TABLE RULE_EXECUTION_LOGS (
    EXEC_LOG_ID         INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID             INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    PASS_FLAG           BIT NOT NULL DEFAULT(0),
    MESSAGE             VARCHAR(MAX) NULL,
    RECORD_COUNT        INT NOT NULL DEFAULT(0)
);

-----------------------------------------------
-- 15) BUSINESS_GROUPS
-----------------------------------------------
CREATE TABLE BUSINESS_GROUPS (
    GROUP_NAME   VARCHAR(100) NOT NULL PRIMARY KEY,
    DESCRIPTION  VARCHAR(MAX) NULL,
    EMAIL        VARCHAR(200) NULL
);

-----------------------------------------------
-- 16) GROUP_PERMISSIONS
-----------------------------------------------
CREATE TABLE GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME    VARCHAR(100) NOT NULL,
    TARGET_TABLE  VARCHAR(100) NOT NULL
);

-----------------------------------------------
-- 17) BUSINESS_GROUP_APPROVERS
-----------------------------------------------
CREATE TABLE BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME  VARCHAR(100) NOT NULL,
    USERNAME    VARCHAR(50) NOT NULL
);

-----------------------------------------------
-- 18) USERS
-----------------------------------------------
CREATE TABLE USERS (
    USER_ID    INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME   VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD   VARCHAR(100) NOT NULL,
    USER_GROUP VARCHAR(100) NOT NULL
);

-----------------------------------------------
-- 19) BRM_CUSTOM_RULE_GROUPS
-----------------------------------------------
CREATE TABLE BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID        INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME      VARCHAR(100) NOT NULL,
    OWNER_BUSINESS_GROUP   VARCHAR(100) NOT NULL,
    CREATED_BY             VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP      DATETIME NOT NULL DEFAULT(GETDATE())
);

-----------------------------------------------
-- 20) BRM_CUSTOM_GROUP_MEMBERS
-----------------------------------------------
CREATE TABLE BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID         INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID   INT NOT NULL,
    RULE_ID           INT NOT NULL
);

-----------------------------------------------
-- 21) BRM_CUSTOM_GROUP_BACKUPS
-----------------------------------------------
CREATE TABLE BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ID      INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    BACKUP_VERSION   INT NOT NULL,
    BACKUP_JSON      VARCHAR(MAX) NOT NULL
);

-----------------------------------------------
-- 22) BRM_GLOBAL_CRITICAL_LINKS
-----------------------------------------------
CREATE TABLE BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID     INT IDENTITY(1,1) PRIMARY KEY,
    GCR_RULE_ID INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);

-----------------------------------------------
-- (Optional) 23) BRM_COLUMN_MAPPING
-----------------------------------------------
CREATE TABLE BRM_COLUMN_MAPPING (
    MAPPING_ID    INT IDENTITY(1,1) PRIMARY KEY,
    SOURCE_RULE_ID INT NOT NULL,
    RULE_ID       INT NOT NULL,
    COLUMN_NAME   VARCHAR(100) NOT NULL
);

-----------------------------------------------
-- (Optional) 24) BRM_GROUP_BACKUPS
-----------------------------------------------
CREATE TABLE BRM_GROUP_BACKUPS (
    GROUP_BK_ID   INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID      INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    BACKUP_JSON   VARCHAR(MAX) NOT NULL
);

-----------------------------------------------
-- (Optional) 25) BRM_RULE_LINEAGE
-----------------------------------------------
CREATE TABLE BRM_RULE_LINEAGE (
    LINEAGE_ID        INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID           INT NOT NULL,
    PARENT_RULE_ID    INT NOT NULL
);

-----------------------------------------------
-- (Optional) 26) BRM_RULE_COMMENTS
-----------------------------------------------
CREATE TABLE BRM_RULE_COMMENTS (
    COMMENT_ID  INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID     INT NOT NULL,
    COMMENT_TEXT VARCHAR(MAX) NOT NULL
);
-----------------------------------------------
-- If you have references, make sure to drop in the correct order 
-- Or use 'DROP TABLE ...' with IF EXISTS logic
-----------------------------------------------
DROP TABLE IF EXISTS BRM_RULE_COMMENTS;
DROP TABLE IF EXISTS BRM_RULE_LINEAGE;
DROP TABLE IF EXISTS BRM_GROUP_BACKUPS;
DROP TABLE IF EXISTS BRM_COLUMN_MAPPING;
DROP TABLE IF EXISTS BRM_GLOBAL_CRITICAL_LINKS;
DROP TABLE IF EXISTS BRM_CUSTOM_GROUP_BACKUPS;
DROP TABLE IF EXISTS BRM_CUSTOM_GROUP_MEMBERS;
DROP TABLE IF EXISTS BRM_CUSTOM_RULE_GROUPS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS BUSINESS_GROUP_APPROVERS;
DROP TABLE IF EXISTS GROUP_PERMISSIONS;
DROP TABLE IF EXISTS BUSINESS_GROUPS;
DROP TABLE IF EXISTS RULE_EXECUTION_LOGS;
DROP TABLE IF EXISTS DATA_VALIDATIONS;
DROP TABLE IF EXISTS RULE_TAGS;
DROP TABLE IF EXISTS RULE_SNAPSHOTS;
DROP TABLE IF EXISTS COMPOSITE_RULES;
DROP TABLE IF EXISTS RULE_CONFLICTS;
DROP TABLE IF EXISTS DECISION_TABLES;
DROP TABLE IF EXISTS RULE_SCHEDULES;
DROP TABLE IF EXISTS BRM_RULE_GROUPS;
DROP TABLE IF EXISTS BRM_RULE_TYPES;
DROP TABLE IF EXISTS BRM_RULE_TABLE_DEPENDENCIES;
DROP TABLE IF EXISTS BRM_AUDIT_LOG;
DROP TABLE IF EXISTS BRM_RULE_APPROVALS;
DROP TABLE IF EXISTS BRM_RULES;
