/****************************************************************** 
  USERS: to store user accounts 
******************************************************************/
CREATE TABLE USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME VARCHAR(100) NOT NULL,
    [PASSWORD] VARCHAR(100) NOT NULL,
    USER_GROUP VARCHAR(50) NOT NULL
);

/****************************************************************** 
  BUSINESS_GROUPS: store business groups 
******************************************************************/
CREATE TABLE BUSINESS_GROUPS (
    GROUP_NAME VARCHAR(100) PRIMARY KEY,
    DESCRIPTION VARCHAR(255) NULL,
    EMAIL VARCHAR(255) NULL
);

/******************************************************************
  GROUP_PERMISSIONS: each group -> allowed table
******************************************************************/
CREATE TABLE GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    TARGET_TABLE VARCHAR(200) NOT NULL
    -- No references used; typically you'd FK to BUSINESS_GROUPS
);

/******************************************************************
  BRM_RULE_TYPES: store distinct rule types
******************************************************************/
CREATE TABLE BRM_RULE_TYPES (
    RULE_TYPE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_TYPE_NAME VARCHAR(100) NOT NULL
);

/******************************************************************
  BRM_RULE_GROUPS: grouping of rules 
******************************************************************/
CREATE TABLE BRM_RULE_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    DESCRIPTION VARCHAR(255) NULL
);

/******************************************************************
  BRM_RULES: main table for rules
******************************************************************/
CREATE TABLE BRM_RULES (
    RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT NULL,
    PARENT_RULE_ID INT NULL,
    RULE_TYPE_ID INT NULL,
    RULE_NAME VARCHAR(200) NOT NULL,
    RULE_SQL VARCHAR(MAX) NOT NULL,
    EFFECTIVE_START_DATE DATETIME NULL,
    EFFECTIVE_END_DATE DATETIME NULL,
    STATUS VARCHAR(50) NOT NULL DEFAULT 'INACTIVE',
    VERSION INT NOT NULL DEFAULT 1,
    CREATED_BY VARCHAR(100) NULL,
    DESCRIPTION VARCHAR(1000) NULL,
    OPERATION_TYPE VARCHAR(20) NULL,
    BUSINESS_JUSTIFICATION VARCHAR(1000) NULL,
    CREATED_TIMESTAMP DATETIME NULL,
    UPDATED_BY VARCHAR(100) NULL,
    OWNER_GROUP VARCHAR(100) NULL,
    CLUSTER_NAME VARCHAR(100) NULL,
    APPROVAL_STATUS VARCHAR(50) NULL,
    IS_GLOBAL BIT NOT NULL DEFAULT 0,
    CRITICAL_RULE BIT NOT NULL DEFAULT 0,
    CRITICAL_SCOPE VARCHAR(50) NULL,
    CDC_TYPE VARCHAR(50) NULL
);

/******************************************************************
  BRM_RULE_TABLE_DEPENDENCIES: rule->table references
******************************************************************/
CREATE TABLE BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DATABASE_NAME VARCHAR(50) NULL,
    TABLE_NAME VARCHAR(200) NOT NULL,
    COLUMN_NAME VARCHAR(200) NULL,
    COLUMN_OP VARCHAR(10) NULL
);

/******************************************************************
  BRM_AUDIT_LOG: general audit logs
******************************************************************/
CREATE TABLE BRM_AUDIT_LOG (
    AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
    ACTION VARCHAR(50) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    RECORD_ID VARCHAR(50) NOT NULL,
    ACTION_BY VARCHAR(100) NOT NULL,
    OLD_DATA VARCHAR(MAX) NULL,
    NEW_DATA VARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);

/******************************************************************
  BRM_RULE_LINEAGE (example, might be unused or partial)
******************************************************************/
CREATE TABLE BRM_RULE_LINEAGE (
    LINEAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    LINEAGE_DESC VARCHAR(1000) NULL
    -- or other columns as needed
);

/******************************************************************
  BRM_GROUP_BACKUPS (example usage for storing backups)
******************************************************************/
CREATE TABLE BRM_GROUP_BACKUPS (
    BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    BACKUP_JSON VARCHAR(MAX) NULL,
    BACKUP_VERSION INT NOT NULL
);

/******************************************************************
  BRM_COLUMN_MAPPING (example if used)
******************************************************************/
CREATE TABLE BRM_COLUMN_MAPPING (
    MAPPING_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    SOURCE_RULE_ID INT NULL,
    COLUMN_NAME VARCHAR(200) NOT NULL
    -- etc.
);

/******************************************************************
  BRM_CUSTOM_RULE_GROUPS
******************************************************************/
CREATE TABLE BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME VARCHAR(200) NOT NULL,
    OWNER_BUSINESS_GROUP VARCHAR(100) NULL,
    CREATED_BY VARCHAR(100) NULL,
    CREATED_TIMESTAMP DATETIME NULL
);

/******************************************************************
  BRM_CUSTOM_GROUP_MEMBERS: link custom group -> rule
******************************************************************/
CREATE TABLE BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID INT NOT NULL
);

/******************************************************************
  BUSINESS_GROUP_APPROVERS: for multi-step approvals
******************************************************************/
CREATE TABLE BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    USERNAME VARCHAR(100) NOT NULL
);

/******************************************************************
  BRM_RULE_APPROVALS: store actual approvals
******************************************************************/
CREATE TABLE BRM_RULE_APPROVALS (
    APPROVAL_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    GROUP_NAME VARCHAR(100) NULL,
    USERNAME VARCHAR(100) NULL,
    APPROVED_FLAG INT NOT NULL DEFAULT 0, 
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVAL_STAGE INT NOT NULL
);

/******************************************************************
  BRM_CUSTOM_GROUP_BACKUPS
******************************************************************/
CREATE TABLE BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ENTRY_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON VARCHAR(MAX) NULL
);

/******************************************************************
  BRM_GLOBAL_CRITICAL_LINKS: link global/critical rule => child
******************************************************************/
CREATE TABLE BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID INT IDENTITY(1,1) PRIMARY KEY,
    GCR_RULE_ID INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);

/******************************************************************
  RULE_SCHEDULES: schedule rules for future execution
******************************************************************/
CREATE TABLE RULE_SCHEDULES (
    SCHEDULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    SCHEDULE_TIME DATETIME NOT NULL,
    STATUS VARCHAR(50) NOT NULL DEFAULT 'Scheduled',
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);

/******************************************************************
  BRM_RULE_COMMENTS (optional example)
******************************************************************/
CREATE TABLE BRM_RULE_COMMENTS (
    COMMENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    COMMENT_TEXT VARCHAR(MAX) NOT NULL,
    COMMENT_BY VARCHAR(100) NOT NULL,
    COMMENT_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);

/******************************************************************
  DECISION_TABLES
******************************************************************/
CREATE TABLE DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(1000) NULL
);

/******************************************************************
  RULE_CONFLICTS
******************************************************************/
CREATE TABLE RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID1 INT NOT NULL,
    RULE_ID2 INT NOT NULL,
    PRIORITY INT NOT NULL
);

/******************************************************************
  COMPOSITE_RULES
******************************************************************/
CREATE TABLE COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_NAME VARCHAR(200) NOT NULL,
    LOGIC_EXPR VARCHAR(MAX) NULL,
    ACTION_ON_PASS VARCHAR(1000) NULL
);

/******************************************************************
  RULE_SNAPSHOTS: storing JSON snapshots of all rules
******************************************************************/
CREATE TABLE RULE_SNAPSHOTS (
    SNAPSHOT_ID INT IDENTITY(1,1) PRIMARY KEY,
    SNAPSHOT_NAME VARCHAR(200) NOT NULL,
    CREATED_BY VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    SNAPSHOT_JSON VARCHAR(MAX) NULL
);

/******************************************************************
  RULE_TAGS: store tags on rules
******************************************************************/
CREATE TABLE RULE_TAGS (
    TAG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    TAG_NAME VARCHAR(100) NOT NULL
);

/******************************************************************
  DATA_VALIDATIONS: e.g. table/column -> validation rule
******************************************************************/
CREATE TABLE DATA_VALIDATIONS (
    VALIDATION_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(200) NOT NULL,
    COLUMN_NAME VARCHAR(200) NOT NULL,
    VALIDATION_TYPE VARCHAR(50) NOT NULL,
    PARAMS VARCHAR(1000) NULL
);

/******************************************************************
  RULE_EXECUTION_LOGS: log rule execution
  fields can store pass/fail, record_count, start/end time, etc.
******************************************************************/
CREATE TABLE RULE_EXECUTION_LOGS (
    EXEC_LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    PASS_FLAG BIT NOT NULL DEFAULT 0,
    MESSAGE VARCHAR(2000) NULL,
    RECORD_COUNT INT NOT NULL DEFAULT 0,
    START_TIME DATETIME NULL,
    END_TIME DATETIME NULL
);

/******************************************************************
  RULE_LOCKS: if used for explicit locking
******************************************************************/
CREATE TABLE RULE_LOCKS (
    RULE_ID INT PRIMARY KEY,
    LOCKED_BY VARCHAR(100) NOT NULL,
    LOCK_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);

/******************************************************************
  RULE_PERF_STATS: store performance metrics
******************************************************************/
CREATE TABLE RULE_PERF_STATS (
    RULE_ID INT PRIMARY KEY,
    AVG_EXEC_MS BIGINT NOT NULL DEFAULT 0,
    UPDATED_TS DATETIME NOT NULL DEFAULT GETDATE()
);

/******************************************************************
  BRM_RULE_TESTS (Part 6 example for automated tests)
******************************************************************/
CREATE TABLE BRM_RULE_TESTS (
    TEST_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    TEST_SQL VARCHAR(MAX) NOT NULL,
    EXPECTED_RESULT INT NOT NULL,
    DESCRIPTION VARCHAR(255) NULL
);

/******************************************************************
  DECISION_TABLE_COLUMNS (Part 7 example)
******************************************************************/
CREATE TABLE DECISION_TABLE_COLUMNS (
    DT_COLUMN_ID INT IDENTITY(1,1) PRIMARY KEY,
    DECISION_TABLE_ID INT NOT NULL,
    COLUMN_NAME VARCHAR(200) NOT NULL,
    DEFAULT_EXPR VARCHAR(MAX) NULL
);

/******************************************************************
  COMPOSITE_RULE_SUBS (Part 7 expand composite rule)
******************************************************************/
CREATE TABLE COMPOSITE_RULE_SUBS (
    CRULE_SUB_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_ID INT NOT NULL,
    RULE_ID INT NOT NULL
);

/******************************************************************
  STORED_PROC_DEPENDENCIES (Part 7 example for scanning SP references)
******************************************************************/
CREATE TABLE STORED_PROC_DEPENDENCIES (
    DEP_ID INT IDENTITY(1,1) PRIMARY KEY,
    OBJECT_ID INT NOT NULL,
    PROC_SCHEMA VARCHAR(50) NULL,
    PROC_NAME VARCHAR(128) NOT NULL,
    TABLE_NAME VARCHAR(128) NOT NULL
);

/******************************************************************
  AUTOPROV_GROUPS (Part 6 or 7 for policy-based auto approvals)
******************************************************************/
CREATE TABLE AUTOPROV_GROUPS (
    GROUP_NAME VARCHAR(100) PRIMARY KEY
    -- e.g. store "TrustedOps" or "ReleaseAdmin"
);

/******************************************************************
  BRM_RULE_APPROVAL_SUBSTAGES (Part 9 example)
******************************************************************/
CREATE TABLE BRM_RULE_APPROVAL_SUBSTAGES (
    SUB_STAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    STAGE_NAME VARCHAR(100) NOT NULL,
    ASSIGNED_TO VARCHAR(100) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    STATUS VARCHAR(50) NOT NULL DEFAULT 'Pending',
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVED_BY VARCHAR(100) NULL
);