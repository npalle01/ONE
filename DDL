Below is a consolidated T‑SQL script that includes all the DDL statements described previously. You can run these statements (for example, in SQL Server Management Studio) to create the complete schema for the BRM Tool. Adjust data types, constraints, and indexes as needed for your environment.

-- 1. Audit Log Table
CREATE TABLE BRM_AUDIT_LOG (
    AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
    ACTION VARCHAR(50) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    RECORD_ID VARCHAR(50) NULL,
    ACTION_BY VARCHAR(100) NOT NULL,
    OLD_DATA NVARCHAR(MAX) NULL,
    NEW_DATA NVARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 2. Rule Locks Table
CREATE TABLE BRM_RULE_LOCKS (
    LOCK_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    LOCKED_BY INT NULL,
    LOCK_TIMESTAMP DATETIME NOT NULL,
    EXPIRY_TIMESTAMP DATETIME NULL,
    FORCE_LOCK BIT NOT NULL,
    ACTIVE_LOCK BIT NOT NULL
);
GO

-- 3. Users Table
CREATE TABLE USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME VARCHAR(100) NOT NULL UNIQUE,
    PASSWORD VARCHAR(256) NOT NULL,
    USER_GROUP VARCHAR(50) NOT NULL
);
GO

-- 4. Group Permissions Table
CREATE TABLE GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(50) NOT NULL,
    TARGET_TABLE VARCHAR(100) NOT NULL
);
GO

-- 5. Rule Table Dependencies
CREATE TABLE BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DATABASE_NAME VARCHAR(100) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    COLUMN_NAME VARCHAR(100) NULL,
    COLUMN_OP VARCHAR(10) NOT NULL
);
GO

-- 6. Business Rules Table
CREATE TABLE BRM_RULES (
    RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT NULL,
    PARENT_RULE_ID INT NULL,
    RULE_TYPE_ID INT NOT NULL,
    RULE_NAME VARCHAR(255) NOT NULL,
    RULE_SQL NVARCHAR(MAX) NOT NULL,
    EFFECTIVE_START_DATE DATETIME NOT NULL,
    EFFECTIVE_END_DATE DATETIME NULL,
    STATUS VARCHAR(50) NOT NULL,
    VERSION INT NOT NULL DEFAULT 1,
    CREATED_BY VARCHAR(100) NOT NULL,
    DESCRIPTION NVARCHAR(MAX) NULL,
    OPERATION_TYPE VARCHAR(20) NOT NULL,
    BUSINESS_JUSTIFICATION NVARCHAR(MAX) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    UPDATED_BY VARCHAR(100) NULL,
    OWNER_GROUP VARCHAR(50) NOT NULL,
    CLUSTER_NAME VARCHAR(100) NULL,
    APPROVAL_STATUS VARCHAR(50) NOT NULL,
    IS_GLOBAL BIT NOT NULL,
    CRITICAL_RULE BIT NOT NULL,
    CRITICAL_SCOPE VARCHAR(50) NOT NULL,
    CDC_TYPE VARCHAR(50) NOT NULL,
    LIFECYCLE_STATE VARCHAR(50) NOT NULL,
    LOCK_STATUS VARCHAR(50) NULL,
    PERF_MS_AVG INT NULL,
    ENCRYPTED_FILE_PATH VARCHAR(255) NULL
);
GO

-- 7. Rule Approvals Table
CREATE TABLE BRM_RULE_APPROVALS (
    APPROVAL_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    GROUP_NAME VARCHAR(50) NOT NULL,
    USERNAME VARCHAR(100) NOT NULL,
    APPROVED_FLAG INT NOT NULL,  -- 0=pending, 1=approved, 2=rejected
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVAL_STAGE INT NOT NULL
);
GO

-- 8. Global Critical Links Table
CREATE TABLE BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID INT IDENTITY(1,1) PRIMARY KEY,
    GCR_RULE_ID INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);
GO

-- 9. Rule Conflicts Table
CREATE TABLE RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID1 INT NOT NULL,
    RULE_ID2 INT NOT NULL,
    PRIORITY INT NOT NULL
);
GO

-- 10. Composite Rules Table
CREATE TABLE COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_NAME VARCHAR(255) NOT NULL,
    LOGIC_EXPR NVARCHAR(MAX) NOT NULL,
    ACTION_ON_PASS VARCHAR(100) NULL
);
GO

-- 11. Rule Execution Logs Table
CREATE TABLE RULE_EXECUTION_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    PASS_FLAG BIT NOT NULL,
    MESSAGE NVARCHAR(MAX) NULL,
    RECORD_COUNT INT NOT NULL,
    EXECUTION_TIME_MS INT NOT NULL,
    ELAPSED_SECONDS FLOAT NOT NULL
);
GO

-- 12. Column Mapping Table
CREATE TABLE BRM_COLUMN_MAPPING (
    MAPPING_ID INT IDENTITY(1,1) PRIMARY KEY,
    SOURCE_RULE_ID INT NOT NULL,
    RULE_ID INT NOT NULL
);
GO

-- 13. Rule Schedules Table
CREATE TABLE RULE_SCHEDULES (
    SCHEDULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    SCHEDULE_TIME DATETIME NOT NULL,
    STATUS VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    VALIDATION_FLAG BIT NOT NULL
);
GO

-- 14. Data Validations Table
CREATE TABLE DATA_VALIDATIONS (
    VALIDATION_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(100) NOT NULL,
    COLUMN_NAME VARCHAR(100) NOT NULL,
    VALIDATION_TYPE VARCHAR(50) NOT NULL,
    PARAMS VARCHAR(100) NULL
);
GO

-- 15. Data Validation Logs Table
CREATE TABLE DATA_VALIDATION_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    VALIDATION_ID INT NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    COLUMN_NAME VARCHAR(100) NOT NULL,
    RESULT_FLAG VARCHAR(10) NOT NULL,  -- 'PASS' or 'FAIL'
    VALIDATION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    DETAIL NVARCHAR(MAX) NULL
);
GO

-- 16. Decision Tables Table
CREATE TABLE DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(100) NOT NULL,
    DESCRIPTION NVARCHAR(MAX) NULL
);
GO

-- 17. Rule Tags Table
CREATE TABLE RULE_TAGS (
    TAG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    TAG_NAME VARCHAR(50) NOT NULL
);
GO

-- 18. Rule Groups Table (BRM_RULE_GROUPS)
CREATE TABLE BRM_RULE_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL UNIQUE
);
GO

-- 19. Business Groups Table
CREATE TABLE BUSINESS_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL UNIQUE,
    DESCRIPTION NVARCHAR(MAX) NULL,
    EMAIL VARCHAR(100) NULL,
    IS_OWNER_GROUP BIT NOT NULL
);
GO

-- 20. Business Group Approvers Table
CREATE TABLE BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    USERNAME VARCHAR(100) NOT NULL
);
GO

-- 21. Rule Lineage Table
CREATE TABLE BRM_RULE_LINEAGE (
    LINEAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DEPENDENT_RULE_ID INT NOT NULL,
    RELATIONSHIP VARCHAR(50) NOT NULL
);
GO

-- 22. Custom Rule Groups Table
CREATE TABLE BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME VARCHAR(100) NOT NULL UNIQUE,
    OWNER_BUSINESS_GROUP VARCHAR(100) NOT NULL,
    CREATED_BY VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 23. Custom Group Members Table
CREATE TABLE BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID INT NOT NULL
);
GO

-- 24. Custom Group Backups Table
CREATE TABLE BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON NVARCHAR(MAX) NOT NULL
);
GO

-- 25. Rule Snapshots Table
CREATE TABLE RULE_SNAPSHOTS (
    SNAPSHOT_ID INT IDENTITY(1,1) PRIMARY KEY,
    SNAPSHOT_NAME VARCHAR(100) NOT NULL,
    CREATED_BY VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    SNAPSHOT_JSON NVARCHAR(MAX) NOT NULL
);
GO

-- 26. Rule Comments Table
CREATE TABLE BRM_RULE_COMMENTS (
    COMMENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    COMMENT_TEXT NVARCHAR(MAX) NOT NULL,
    COMMENTED_BY VARCHAR(100) NOT NULL,
    COMMENT_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 27. Rule Types Table
CREATE TABLE BRM_RULE_TYPES (
    RULE_TYPE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_TYPE_NAME VARCHAR(100) NOT NULL UNIQUE
);
GO



⸻

Notes:
	•	This script uses SQL Server–specific syntax (for example, GETDATE(), IDENTITY, and GO batch separators).
	•	You may add foreign key constraints, indexes, and additional checks as needed.
	•	Adjust data types and column sizes to match your specific design and application requirements.

This complete DDL script puts all the table definitions in one place for your BRM Tool’s database schema.