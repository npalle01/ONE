Below is a single SQL file (T-SQL style for SQL Server) that creates all tables the Advanced BRM Tool uses—without any foreign key references. Each table stands alone, and columns that once referenced other tables are simply left as normal columns. You can adapt lengths or data types to your real needs.

⸻



/* 
   ADVANCED BRM TOOL DDL - NO REFERENCES VERSION
   --------------------------------------------------------------
   This script creates all tables used by the BRM Tool, 
   with no FOREIGN KEY constraints.
   Each table includes only PRIMARY KEY definitions (if needed),
   plus IDENTITY for certain columns.

   Usage:
     1) Run this entire script in SQL Server (e.g. in SSMS).
     2) Adjust types and sizes if needed (VARCHAR lengths, etc.).
     3) Add any additional indexes you deem necessary.
     4) If you prefer foreign keys or ON DELETE rules, 
        you can add them manually later.
*/

/* 1. USERS */
IF OBJECT_ID('dbo.USERS','U') IS NOT NULL
    DROP TABLE dbo.USERS;
GO

CREATE TABLE dbo.USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME VARCHAR(100) NOT NULL UNIQUE,
    [PASSWORD] VARCHAR(200) NOT NULL,
    USER_GROUP VARCHAR(50) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE()
);
GO


/* 2. BUSINESS_GROUPS */
IF OBJECT_ID('dbo.BUSINESS_GROUPS','U') IS NOT NULL
    DROP TABLE dbo.BUSINESS_GROUPS;
GO

CREATE TABLE dbo.BUSINESS_GROUPS (
    GROUP_NAME VARCHAR(50) NOT NULL PRIMARY KEY,
    DESCRIPTION VARCHAR(200) NULL,
    EMAIL VARCHAR(100) NULL,
    CREATED_AT DATETIME DEFAULT GETDATE()
);
GO


/* 3. BRM_RULE_GROUPS */
IF OBJECT_ID('dbo.BRM_RULE_GROUPS','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_GROUPS;
GO

CREATE TABLE dbo.BRM_RULE_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE()
);
GO


/* 4. GROUP_PERMISSIONS */
IF OBJECT_ID('dbo.GROUP_PERMISSIONS','U') IS NOT NULL
    DROP TABLE dbo.GROUP_PERMISSIONS;
GO

CREATE TABLE dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(50) NOT NULL,
    TARGET_TABLE VARCHAR(200) NOT NULL
);
GO


/* 5. BRM_RULES */
IF OBJECT_ID('dbo.BRM_RULES','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULES;
GO

CREATE TABLE dbo.BRM_RULES (
    RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_NAME VARCHAR(200) NOT NULL,
    OWNER_GROUP VARCHAR(50) NOT NULL,
    RULE_SQL VARCHAR(MAX) NULL,
    STATUS VARCHAR(50) DEFAULT 'INACTIVE',
    APPROVAL_STATUS VARCHAR(50) DEFAULT 'PENDING',
    LIFECYCLE_STATE VARCHAR(50) DEFAULT 'DRAFT',
    LOCK_STATUS BIT DEFAULT 0,
    LOCKED_BY VARCHAR(100) NULL,
    LOCKED_AT DATETIME NULL,
    CREATED_TIMESTAMP DATETIME DEFAULT GETDATE(),
    UPDATED_BY VARCHAR(50) NULL,
    VERSION INT DEFAULT 1,
    IS_GLOBAL BIT DEFAULT 0,
    CRITICAL_RULE BIT DEFAULT 0,
    BRANCHING_RULE BIT DEFAULT 0,
    OPERATION_TYPE VARCHAR(50) NULL,
    PARENT_RULE_ID INT NULL
);
GO


/* 6. RULE_LOCKS */
IF OBJECT_ID('dbo.RULE_LOCKS','U') IS NOT NULL
    DROP TABLE dbo.RULE_LOCKS;
GO

CREATE TABLE dbo.RULE_LOCKS (
    RULE_ID INT NOT NULL PRIMARY KEY,
    LOCKED_BY VARCHAR(100) NOT NULL,
    LOCK_TIMESTAMP DATETIME DEFAULT GETDATE()
);
GO


/* 7. BRM_RULE_APPROVALS */
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_APPROVALS;
GO

CREATE TABLE dbo.BRM_RULE_APPROVALS (
    RULE_ID INT NOT NULL,
    GROUP_NAME VARCHAR(50) NOT NULL,
    USERNAME VARCHAR(50) NOT NULL,
    APPROVAL_STAGE INT NOT NULL,
    APPROVED_FLAG INT DEFAULT 0,
    APPROVED_TIMESTAMP DATETIME NULL,
    FORK_ID INT NULL,
    PRIMARY KEY (RULE_ID, GROUP_NAME, USERNAME)
);
GO


/* 8. BRM_RULE_TABLE_DEPENDENCIES */
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES','U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
GO

CREATE TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES (
    DEP_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DATABASE_NAME VARCHAR(50) NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    COLUMN_NAME VARCHAR(100) NULL,
    COLUMN_OP VARCHAR(10) NULL
);
GO


/* 9. SIMULATION_LOGS */
IF OBJECT_ID('dbo.SIMULATION_LOGS','U') IS NOT NULL
    DROP TABLE dbo.SIMULATION_LOGS;
GO

CREATE TABLE dbo.SIMULATION_LOGS (
    SIMULATION_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXEC_TIMESTAMP DATETIME DEFAULT GETDATE(),
    SUCCESS_FLAG BIT NOT NULL DEFAULT 0,
    MESSAGE VARCHAR(1000) NULL,
    RECORD_COUNT INT DEFAULT 0
);
GO


/* 10. RULE_EXECUTION_LOGS (Optional) */
IF OBJECT_ID('dbo.RULE_EXECUTION_LOGS','U') IS NOT NULL
    DROP TABLE dbo.RULE_EXECUTION_LOGS;
GO

CREATE TABLE dbo.RULE_EXECUTION_LOGS (
    EXEC_LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME DEFAULT GETDATE(),
    PASS_FLAG BIT NOT NULL DEFAULT 0,
    MESSAGE VARCHAR(1000) NULL,
    RECORD_COUNT INT DEFAULT 0,
    EXECUTION_TIME_MS INT NULL
);
GO


/* 11. RULE_SCHEDULES */
IF OBJECT_ID('dbo.RULE_SCHEDULES','U') IS NOT NULL
    DROP TABLE dbo.RULE_SCHEDULES;
GO

CREATE TABLE dbo.RULE_SCHEDULES (
    SCHEDULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    SCHEDULE_TIME DATETIME NOT NULL,
    STATUS VARCHAR(50) DEFAULT 'Scheduled',
    RUN_DATA_VALIDATIONS BIT DEFAULT 0,
    CREATED_TIMESTAMP DATETIME DEFAULT GETDATE()
);
GO


/* 12. DECISION_TABLES */
IF OBJECT_ID('dbo.DECISION_TABLES','U') IS NOT NULL
    DROP TABLE dbo.DECISION_TABLES;
GO

CREATE TABLE dbo.DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(1000) NULL,
    DECISION_QUERY VARCHAR(MAX) NULL,
    CREATED_AT DATETIME DEFAULT GETDATE()
);
GO


/* 13. DECISION_TABLE_LOGS (Optional) */
IF OBJECT_ID('dbo.DECISION_TABLE_LOGS','U') IS NOT NULL
    DROP TABLE dbo.DECISION_TABLE_LOGS;
GO

CREATE TABLE dbo.DECISION_TABLE_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    DECISION_TABLE_ID INT NOT NULL,
    EXEC_TIMESTAMP DATETIME DEFAULT GETDATE(),
    SUCCESS_FLAG BIT DEFAULT 0,
    RECORD_COUNT INT DEFAULT 0,
    MESSAGE VARCHAR(1000) NULL
);
GO


/* 14. BRM_DEFECT_LOGS */
IF OBJECT_ID('dbo.BRM_DEFECT_LOGS','U') IS NOT NULL
    DROP TABLE dbo.BRM_DEFECT_LOGS;
GO

CREATE TABLE dbo.BRM_DEFECT_LOGS (
    DEFECT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NULL,
    DESCRIPTION VARCHAR(1000) NOT NULL,
    SEVERITY VARCHAR(20) DEFAULT 'Low',
    REPORTER VARCHAR(50) NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'Open',
    RESOLUTION VARCHAR(2000) NULL,
    [TIMESTAMP] DATETIME DEFAULT GETDATE()
);
GO


/* 15. BRM_CUSTOM_RULE_GROUPS */
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS','U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
GO

CREATE TABLE dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME VARCHAR(200) NOT NULL,
    OWNER_BUSINESS_GROUP VARCHAR(50) NOT NULL,
    CREATED_BY VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME DEFAULT GETDATE()
);
GO


/* 16. BRM_CUSTOM_GROUP_MEMBERS */
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS','U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
GO

CREATE TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS (
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID INT NOT NULL,
    PRIMARY KEY(CUSTOM_GROUP_ID, RULE_ID)
);
GO


/* 17. BRM_CUSTOM_GROUP_BACKUPS */
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_BACKUPS','U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS;
GO

CREATE TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME DEFAULT GETDATE(),
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON VARCHAR(MAX) NOT NULL
);
GO


/* 18. BRM_GLOBAL_CRITICAL_LINKS */
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS','U') IS NOT NULL
    DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
GO

CREATE TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS (
    GCR_RULE_ID INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL,
    PRIMARY KEY (GCR_RULE_ID, TARGET_RULE_ID)
);
GO


/* 19. BRM_AUDIT_LOG */
IF OBJECT_ID('dbo.BRM_AUDIT_LOG','U') IS NOT NULL
    DROP TABLE dbo.BRM_AUDIT_LOG;
GO

CREATE TABLE dbo.BRM_AUDIT_LOG (
    AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
    ACTION_TYPE VARCHAR(50) NOT NULL,
    TARGET_TABLE VARCHAR(100) NOT NULL,
    TARGET_ID VARCHAR(50) NULL,
    PERFORMED_BY VARCHAR(50) NOT NULL,
    OLD_DATA_JSON VARCHAR(MAX) NULL,
    NEW_DATA_JSON VARCHAR(MAX) NULL,
    [TIMESTAMP] DATETIME DEFAULT GETDATE()
);
GO


/* 20. RULE_PERF_STATS (Optional) */
IF OBJECT_ID('dbo.RULE_PERF_STATS','U') IS NOT NULL
    DROP TABLE dbo.RULE_PERF_STATS;
GO

CREATE TABLE dbo.RULE_PERF_STATS (
    STATS_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DATE_KEY INT NOT NULL,
    EXEC_TIME_MS INT NOT NULL,
    CREATED_TIMESTAMP DATETIME DEFAULT GETDATE()
);
GO

/*
 All done!

 No foreign keys or references have been declared, 
 so these tables stand alone. 
 You can add your own indexes or constraints if you wish.
*/



⸻

Usage & Notes:
	1.	Run As One Script
	•	Copy this code into a file (e.g., brm_tool_schema_no_refs.sql).
	•	Run it in SQL Server (Management Studio, Azure Data Studio, or via a CI pipeline).
	2.	Primary Keys are declared on each table, typically on an IDENTITY column or composite key.
	3.	No Foreign Keys
	•	Per your request, we omitted all references and FOREIGN KEY constraints.
	•	That means these columns (like RULE_ID, CUSTOM_GROUP_ID, etc.) do not enforce referential integrity— you can store any integer.
	•	If you later want to add references, you can do so manually.
	4.	Adjust:
	•	Lengths: VARCHAR(1000), VARCHAR(MAX), etc.
	•	Column names: If you prefer CREATED_DATE or UPDATED_AT, rename them.
	•	Optional: remove or rename RULE_EXECUTION_LOGS, RULE_PERF_STATS if not needed.
	5.	Populate:
	•	Once created, you can insert minimal records in USERS, BUSINESS_GROUPS, etc.
	•	The tool then queries them as needed.
	6.	Indexes:
	•	Consider adding additional indexes for performance, e.g.:

CREATE INDEX IX_RULE_SCHEDULES_TIME ON RULE_SCHEDULES(SCHEDULE_TIME);
CREATE INDEX IX_SIMULATION_LOGS_RULE ON SIMULATION_LOGS(RULE_ID);
CREATE INDEX IX_DEFECT_LOGS_RULE ON BRM_DEFECT_LOGS(RULE_ID);
CREATE INDEX IX_PERF_STATS_RULE ON RULE_PERF_STATS(RULE_ID);


	•	Without references, you rely on queries to join columns by ID.

You now have a single SQL file that creates all tables used by your advanced BRM Tool, with no foreign key references. Enjoy!