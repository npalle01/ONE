/********************************************************************
  USERS
********************************************************************/
IF OBJECT_ID('dbo.USERS', 'U') IS NOT NULL
    DROP TABLE dbo.USERS;
GO

CREATE TABLE dbo.USERS (
    USER_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    USERNAME       NVARCHAR(100) NOT NULL,
    [PASSWORD]     NVARCHAR(100) NOT NULL,
    USER_GROUP     NVARCHAR(50)  NOT NULL
);
GO

/********************************************************************
  BUSINESS_GROUPS
********************************************************************/
IF OBJECT_ID('dbo.BUSINESS_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BUSINESS_GROUPS;
GO

CREATE TABLE dbo.BUSINESS_GROUPS (
    GROUP_NAME   NVARCHAR(100) NOT NULL PRIMARY KEY,
    DESCRIPTION  NVARCHAR(500) NULL,
    EMAIL        NVARCHAR(200) NULL
);
GO

/********************************************************************
  GROUP_PERMISSIONS
********************************************************************/
IF OBJECT_ID('dbo.GROUP_PERMISSIONS', 'U') IS NOT NULL
    DROP TABLE dbo.GROUP_PERMISSIONS;
GO

CREATE TABLE dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME    NVARCHAR(100) NOT NULL,
    TARGET_TABLE  NVARCHAR(200) NOT NULL
    -- Could add a foreign key to BUSINESS_GROUPS(GROUP_NAME) if desired
);
GO

/********************************************************************
  BRM_RULE_TYPES
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_TYPES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TYPES;
GO

CREATE TABLE dbo.BRM_RULE_TYPES (
    RULE_TYPE_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_TYPE_NAME NVARCHAR(100) NOT NULL
);
GO

/********************************************************************
  BRM_RULE_GROUPS
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_GROUPS;
GO

CREATE TABLE dbo.BRM_RULE_GROUPS (
    GROUP_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME NVARCHAR(100) NOT NULL
    -- This is distinct from BUSINESS_GROUPS: this table can be used for 
    -- some hierarchical grouping logic. The code references it for "GROUP_ID".
);
GO

/********************************************************************
  DECISION_TABLES
********************************************************************/
IF OBJECT_ID('dbo.DECISION_TABLES', 'U') IS NOT NULL
    DROP TABLE dbo.DECISION_TABLES;
GO

CREATE TABLE dbo.DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    TABLE_NAME        NVARCHAR(200) NOT NULL,
    [DESCRIPTION]     NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  BRM_RULES
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULES;
GO

CREATE TABLE dbo.BRM_RULES (
    RULE_ID             INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_ID            INT              NULL,  -- references BRM_RULE_GROUPS(GROUP_ID)
    PARENT_RULE_ID      INT              NULL,  -- self-reference if a rule has a parent
    RULE_TYPE_ID        INT              NOT NULL,
    RULE_NAME           NVARCHAR(200)    NOT NULL,
    RULE_SQL            NVARCHAR(MAX)    NOT NULL,
    EFFECTIVE_START_DATE DATETIME        NULL,
    EFFECTIVE_END_DATE   DATETIME        NULL,
    [STATUS]            NVARCHAR(50)     NOT NULL DEFAULT ('INACTIVE'),
    [VERSION]           INT              NOT NULL DEFAULT (1),
    CREATED_BY          NVARCHAR(100)    NULL,
    [DESCRIPTION]       NVARCHAR(MAX)    NULL,
    OPERATION_TYPE      NVARCHAR(50)     NULL,
    BUSINESS_JUSTIFICATION NVARCHAR(MAX) NULL,
    CREATED_TIMESTAMP   DATETIME         NOT NULL DEFAULT (GETDATE()),
    UPDATED_BY          NVARCHAR(100)    NULL,
    OWNER_GROUP         NVARCHAR(100)    NOT NULL,  -- references BUSINESS_GROUPS(GROUP_NAME) in logic
    CLUSTER_NAME        NVARCHAR(100)    NULL,
    APPROVAL_STATUS     NVARCHAR(50)     NOT NULL DEFAULT ('APPROVAL_IN_PROGRESS'),
    IS_GLOBAL           BIT              NOT NULL DEFAULT (0),
    CRITICAL_RULE       BIT              NOT NULL DEFAULT (0),
    CRITICAL_SCOPE      NVARCHAR(50)     NOT NULL DEFAULT ('NONE'),
    CDC_TYPE            NVARCHAR(50)     NOT NULL DEFAULT ('NONE'),
    DECISION_TABLE_ID   INT              NULL,    -- references DECISION_TABLES
    LOCKED_BY           NVARCHAR(100)    NULL,    -- for Part5 locking
    LOCK_TIMESTAMP      DATETIME         NULL
);
GO

/********************************************************************
  BRM_RULE_TABLE_DEPENDENCIES
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
GO

CREATE TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID       INT NOT NULL,
    DATABASE_NAME NVARCHAR(100) NOT NULL,
    TABLE_NAME    NVARCHAR(200) NOT NULL,
    COLUMN_NAME   NVARCHAR(200) NOT NULL,
    COLUMN_OP     NVARCHAR(10)  NOT NULL  -- e.g. 'READ' or 'WRITE'
);
GO

/********************************************************************
  BRM_AUDIT_LOG
********************************************************************/
IF OBJECT_ID('dbo.BRM_AUDIT_LOG', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_AUDIT_LOG;
GO

CREATE TABLE dbo.BRM_AUDIT_LOG (
    AUDIT_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    [ACTION]       NVARCHAR(50)  NOT NULL,
    TABLE_NAME     NVARCHAR(100) NOT NULL,
    RECORD_ID      NVARCHAR(50)  NULL,   -- storing rule_id or other as string
    ACTION_BY      NVARCHAR(100) NOT NULL,
    OLD_DATA       NVARCHAR(MAX)  NULL,
    NEW_DATA       NVARCHAR(MAX)  NULL,
    ACTION_TIMESTAMP DATETIME     NOT NULL DEFAULT (GETDATE())
);
GO

/********************************************************************
  BRM_RULE_LINEAGE
  (The code references it briefly, but doesn't heavily use it. 
   We'll define a minimal structure.)
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_LINEAGE', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_LINEAGE;
GO

CREATE TABLE dbo.BRM_RULE_LINEAGE (
    LINEAGE_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID      INT NOT NULL,
    LINEAGE_JSON NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  BRM_GROUP_BACKUPS
  (The code references "BRM_GROUP_BACKUPS" but doesn't detail usage. 
   We'll define a minimal structure.)
********************************************************************/
IF OBJECT_ID('dbo.BRM_GROUP_BACKUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_GROUP_BACKUPS;
GO

CREATE TABLE dbo.BRM_GROUP_BACKUPS (
    BACKUP_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME      NVARCHAR(100) NOT NULL,
    BACKUP_TIMESTAMP DATETIME     NOT NULL DEFAULT (GETDATE()),
    BACKUP_JSON     NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  BRM_COLUMN_MAPPING
  The code references it to check if a rule is used in column references.
********************************************************************/
IF OBJECT_ID('dbo.BRM_COLUMN_MAPPING', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_COLUMN_MAPPING;
GO

CREATE TABLE dbo.BRM_COLUMN_MAPPING (
    MAPPING_ID    INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SOURCE_RULE_ID INT NOT NULL,
    RULE_ID        INT NOT NULL,
    COLUMN_NAME    NVARCHAR(200) NOT NULL
);
GO

/********************************************************************
  BRM_CUSTOM_RULE_GROUPS
********************************************************************/
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
GO

CREATE TABLE dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_NAME      NVARCHAR(200)  NOT NULL,
    OWNER_BUSINESS_GROUP   NVARCHAR(100)  NOT NULL,   -- references BUSINESS_GROUPS(GROUP_NAME)
    CREATED_BY            NVARCHAR(100)  NOT NULL,
    CREATED_TIMESTAMP     DATETIME       NOT NULL DEFAULT (GETDATE())
);
GO

/********************************************************************
  BRM_CUSTOM_GROUP_MEMBERS
********************************************************************/
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
GO

CREATE TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_ID  INT NOT NULL,
    RULE_ID          INT NOT NULL
);
GO

/********************************************************************
  BUSINESS_GROUP_APPROVERS
********************************************************************/
IF OBJECT_ID('dbo.BUSINESS_GROUP_APPROVERS', 'U') IS NOT NULL
    DROP TABLE dbo.BUSINESS_GROUP_APPROVERS;
GO

CREATE TABLE dbo.BUSINESS_GROUP_APPROVERS (
    APPROVER_ID  INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME   NVARCHAR(100) NOT NULL,
    USERNAME     NVARCHAR(100) NOT NULL
);
GO

/********************************************************************
  BRM_RULE_APPROVALS
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_APPROVALS;
GO

CREATE TABLE dbo.BRM_RULE_APPROVALS (
    APPROVAL_ID     INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID         INT NOT NULL,
    GROUP_NAME      NVARCHAR(100) NOT NULL,
    USERNAME        NVARCHAR(100) NOT NULL,
    APPROVED_FLAG   INT NOT NULL DEFAULT (0),  -- 0 => pending, 1 => approved, 2 => rejected
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVAL_STAGE  INT NOT NULL DEFAULT (1),
    ACTION_TYPE     NVARCHAR(50) NOT NULL DEFAULT ('CREATE_OR_UPDATE')
    -- e.g. 'CREATE_OR_UPDATE', 'DEACTIVATE', 'DELETE'
);
GO

/********************************************************************
  BRM_CUSTOM_GROUP_BACKUPS
********************************************************************/
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_BACKUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS;
GO

CREATE TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME  NOT NULL DEFAULT (GETDATE()),
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON    NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  BRM_GLOBAL_CRITICAL_LINKS
********************************************************************/
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
GO

CREATE TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GCR_RULE_ID   INT NOT NULL,  -- parent
    TARGET_RULE_ID INT NOT NULL  -- child
);
GO

/********************************************************************
  RULE_SCHEDULES
********************************************************************/
IF OBJECT_ID('dbo.RULE_SCHEDULES', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_SCHEDULES;
GO

CREATE TABLE dbo.RULE_SCHEDULES (
    SCHEDULE_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID          INT NOT NULL,
    SCHEDULE_TIME    DATETIME NOT NULL,
    [STATUS]         NVARCHAR(50) NOT NULL DEFAULT ('Scheduled'),
    CREATED_TIMESTAMP DATETIME    NOT NULL DEFAULT (GETDATE())
);
GO

/********************************************************************
  BRM_RULE_COMMENTS 
  (Might not be used heavily, but we define it if needed.)
********************************************************************/
IF OBJECT_ID('dbo.BRM_RULE_COMMENTS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_COMMENTS;
GO

CREATE TABLE dbo.BRM_RULE_COMMENTS (
    COMMENT_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID      INT NOT NULL,
    COMMENT_TEXT NVARCHAR(MAX) NULL,
    CREATED_BY   NVARCHAR(100) NOT NULL,
    CREATED_TS   DATETIME      NOT NULL DEFAULT (GETDATE())
);
GO

/********************************************************************
  RULE_CONFLICTS
********************************************************************/
IF OBJECT_ID('dbo.RULE_CONFLICTS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_CONFLICTS;
GO

CREATE TABLE dbo.RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID1    INT NOT NULL,
    RULE_ID2    INT NOT NULL,
    PRIORITY    INT NOT NULL
);
GO

/********************************************************************
  COMPOSITE_RULES
********************************************************************/
IF OBJECT_ID('dbo.COMPOSITE_RULES', 'U') IS NOT NULL
    DROP TABLE dbo.COMPOSITE_RULES;
GO

CREATE TABLE dbo.COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CRULE_NAME        NVARCHAR(200) NOT NULL,
    LOGIC_EXPR        NVARCHAR(MAX) NULL,
    ACTION_ON_PASS    NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  RULE_SNAPSHOTS
********************************************************************/
IF OBJECT_ID('dbo.RULE_SNAPSHOTS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_SNAPSHOTS;
GO

CREATE TABLE dbo.RULE_SNAPSHOTS (
    SNAPSHOT_ID     INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SNAPSHOT_NAME   NVARCHAR(200) NOT NULL,
    CREATED_BY      NVARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME    NOT NULL DEFAULT (GETDATE()),
    SNAPSHOT_JSON   NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  RULE_TAGS
********************************************************************/
IF OBJECT_ID('dbo.RULE_TAGS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_TAGS;
GO

CREATE TABLE dbo.RULE_TAGS (
    TAG_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID  INT NOT NULL,
    TAG_NAME NVARCHAR(200) NOT NULL
);
GO

/********************************************************************
  DATA_VALIDATIONS
********************************************************************/
IF OBJECT_ID('dbo.DATA_VALIDATIONS', 'U') IS NOT NULL
    DROP TABLE dbo.DATA_VALIDATIONS;
GO

CREATE TABLE dbo.DATA_VALIDATIONS (
    VALIDATION_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    TABLE_NAME      NVARCHAR(200) NOT NULL,
    COLUMN_NAME     NVARCHAR(200) NOT NULL,
    VALIDATION_TYPE NVARCHAR(50)  NOT NULL,
    PARAMS          NVARCHAR(MAX) NULL
);
GO

/********************************************************************
  RULE_EXECUTION_LOGS
********************************************************************/
IF OBJECT_ID('dbo.RULE_EXECUTION_LOGS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_EXECUTION_LOGS;
GO

CREATE TABLE dbo.RULE_EXECUTION_LOGS (
    EXEC_LOG_ID    INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID        INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE()),
    PASS_FLAG      BIT NOT NULL,
    MESSAGE        NVARCHAR(MAX) NULL,
    RECORD_COUNT   INT NOT NULL DEFAULT (0)
);
GO