-- ====================================================
-- BRM TOOL DATABASE DEFINITION â€“ ALL OBJECTS IN ONE FILE
-- ====================================================

-- 1. BRM_AUDIT_LOG
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_AUDIT_LOG', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_AUDIT_LOG;
GO

CREATE TABLE dbo.BRM_AUDIT_LOG (
    AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
    ACTION VARCHAR(50) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    RECORD_ID VARCHAR(50) NULL,
    ACTION_BY VARCHAR(100) NOT NULL,
    OLD_DATA VARCHAR(MAX) NULL,
    NEW_DATA VARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 2. BRM_RULE_LOCKS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_LOCKS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_LOCKS;
GO

CREATE TABLE dbo.BRM_RULE_LOCKS (
    LOCK_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    LOCKED_BY VARCHAR(100) NOT NULL,
    LOCK_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    EXPIRY_TIMESTAMP DATETIME NOT NULL,
    FORCE_LOCK BIT NOT NULL,
    ACTIVE_LOCK BIT NOT NULL
);
GO

-- 3. USERS
------------------------------------------------------
IF OBJECT_ID('dbo.USERS', 'U') IS NOT NULL
    DROP TABLE dbo.USERS;
GO

CREATE TABLE dbo.USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME VARCHAR(100) NOT NULL UNIQUE,
    PASSWORD VARCHAR(100) NOT NULL,  -- plain-text password (consider using a hash)
    USER_GROUP VARCHAR(50) NOT NULL
);
GO

-- 4. BRM_RULES
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULES;
GO

CREATE TABLE dbo.BRM_RULES (
    RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT NULL,  -- Reference to rule group
    PARENT_RULE_ID INT NULL,
    RULE_TYPE_ID INT NOT NULL,
    RULE_NAME VARCHAR(255) NOT NULL,
    RULE_SQL VARCHAR(MAX) NULL,
    EFFECTIVE_START_DATE DATETIME NULL,
    EFFECTIVE_END_DATE DATETIME NULL,
    STATUS VARCHAR(50) NOT NULL,  -- e.g., ACTIVE, INACTIVE
    VERSION INT NOT NULL DEFAULT 1,
    CREATED_BY VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    UPDATED_BY VARCHAR(100) NULL,
    DESCRIPTION VARCHAR(MAX) NULL,
    OPERATION_TYPE VARCHAR(50) NULL,  -- e.g., SELECT, INSERT, DECISION_TABLE, etc.
    BUSINESS_JUSTIFICATION VARCHAR(MAX) NULL,
    OWNER_GROUP VARCHAR(100) NOT NULL,
    CLUSTER_NAME VARCHAR(100) NULL,
    APPROVAL_STATUS VARCHAR(50) NOT NULL,
    IS_GLOBAL BIT NOT NULL DEFAULT 0,
    CRITICAL_RULE BIT NOT NULL DEFAULT 0,
    CRITICAL_SCOPE VARCHAR(50) NULL,
    CDC_TYPE VARCHAR(50) NOT NULL DEFAULT 'NONE',
    LIFECYCLE_STATE VARCHAR(50) NOT NULL DEFAULT 'DRAFT',
    DECISION_TABLE_ID INT NULL,
    ENCRYPTED_FLAG BIT NOT NULL DEFAULT 0
);
GO

-- 5. BRM_RULE_TABLE_DEPENDENCIES
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
GO

CREATE TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DATABASE_NAME VARCHAR(100) NOT NULL,
    TABLE_NAME VARCHAR(255) NOT NULL,
    COLUMN_NAME VARCHAR(255) NULL,
    COLUMN_OP VARCHAR(50) NULL  -- e.g., READ, WRITE
);
GO

-- 6. COLLABORATION_LOGS
------------------------------------------------------
IF OBJECT_ID('dbo.COLLABORATION_LOGS', 'U') IS NOT NULL
    DROP TABLE dbo.COLLABORATION_LOGS;
GO

CREATE TABLE dbo.COLLABORATION_LOGS (
    MESSAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    MESSAGE VARCHAR(MAX) NOT NULL,
    SENDER VARCHAR(100) NOT NULL,
    TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 7. DATA_VALIDATIONS
------------------------------------------------------
IF OBJECT_ID('dbo.DATA_VALIDATIONS', 'U') IS NOT NULL
    DROP TABLE dbo.DATA_VALIDATIONS;
GO

CREATE TABLE dbo.DATA_VALIDATIONS (
    VALIDATION_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(255) NOT NULL,
    COLUMN_NAME VARCHAR(255) NOT NULL,
    VALIDATION_TYPE VARCHAR(50) NOT NULL,  -- e.g., NOT NULL, RANGE, UNIQUE
    PARAMS VARCHAR(255) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 8. DATA_VALIDATION_LOGS
------------------------------------------------------
IF OBJECT_ID('dbo.DATA_VALIDATION_LOGS', 'U') IS NOT NULL
    DROP TABLE dbo.DATA_VALIDATION_LOGS;
GO

CREATE TABLE dbo.DATA_VALIDATION_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    VALIDATION_ID INT NOT NULL,
    RESULT_FLAG VARCHAR(10) NOT NULL,  -- PASS/FAIL
    DETAILS VARCHAR(MAX) NULL,
    VALIDATION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 9. RULE_EXECUTION_LOGS
------------------------------------------------------
IF OBJECT_ID('dbo.RULE_EXECUTION_LOGS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_EXECUTION_LOGS;
GO

CREATE TABLE dbo.RULE_EXECUTION_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    PASS_FLAG BIT NOT NULL,
    MESSAGE VARCHAR(MAX) NULL,
    RECORD_COUNT INT NOT NULL,
    EXECUTION_TIME_MS INT NOT NULL,
    CPU_USAGE INT NOT NULL,
    MEM_USAGE INT NOT NULL
);
GO

-- 10. RULE_PERF_STATS
------------------------------------------------------
IF OBJECT_ID('dbo.RULE_PERF_STATS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_PERF_STATS;
GO

CREATE TABLE dbo.RULE_PERF_STATS (
    STAT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXEC_TIME_MS INT NOT NULL,
    MEM_USAGE INT NOT NULL,
    USAGE_COUNT INT NOT NULL,
    DATE_KEY CHAR(8) NOT NULL,  -- e.g., '20250318'
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 11. BRM_RULE_APPROVALS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_APPROVALS;
GO

CREATE TABLE dbo.BRM_RULE_APPROVALS (
    APPROVAL_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    GROUP_NAME VARCHAR(100) NOT NULL,
    USERNAME VARCHAR(100) NOT NULL,
    APPROVED_FLAG INT NOT NULL,  -- 0=pending, 1=approved, 2=rejected
    APPROVAL_STAGE INT NOT NULL,
    APPROVED_TIMESTAMP DATETIME NULL
);
GO

-- 12. DECISION_TABLES
------------------------------------------------------
IF OBJECT_ID('dbo.DECISION_TABLES', 'U') IS NOT NULL
    DROP TABLE dbo.DECISION_TABLES;
GO

CREATE TABLE dbo.DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME VARCHAR(255) NOT NULL,  -- decision table name
    DESCRIPTION VARCHAR(MAX) NULL,
    DECISION_QUERY VARCHAR(MAX) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 13. DECISION_TABLE_EXEC_LOGS
------------------------------------------------------
IF OBJECT_ID('dbo.DECISION_TABLE_EXEC_LOGS', 'U') IS NOT NULL
    DROP TABLE dbo.DECISION_TABLE_EXEC_LOGS;
GO

CREATE TABLE dbo.DECISION_TABLE_EXEC_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    DECISION_TABLE_ID INT NOT NULL,
    EXEC_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    PASS_FLAG BIT NOT NULL,
    MESSAGE VARCHAR(MAX) NULL,
    RECORD_COUNT INT NOT NULL
);
GO

-- 14. RULE_CONFLICTS
------------------------------------------------------
IF OBJECT_ID('dbo.RULE_CONFLICTS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_CONFLICTS;
GO

CREATE TABLE dbo.RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID1 INT NOT NULL,
    RULE_ID2 INT NOT NULL,
    PRIORITY INT NOT NULL
);
GO

-- 15. BRM_GLOBAL_CRITICAL_LINKS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
GO

CREATE TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID INT IDENTITY(1,1) PRIMARY KEY,
    GCR_RULE_ID INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);
GO

-- 16. COMPOSITE_RULES
------------------------------------------------------
IF OBJECT_ID('dbo.COMPOSITE_RULES', 'U') IS NOT NULL
    DROP TABLE dbo.COMPOSITE_RULES;
GO

CREATE TABLE dbo.COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_NAME VARCHAR(255) NOT NULL,
    LOGIC_EXPR VARCHAR(MAX) NOT NULL,
    ACTION_ON_PASS VARCHAR(255) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 17. RULE_SNAPSHOTS
------------------------------------------------------
IF OBJECT_ID('dbo.RULE_SNAPSHOTS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_SNAPSHOTS;
GO

CREATE TABLE dbo.RULE_SNAPSHOTS (
    SNAPSHOT_ID INT IDENTITY(1,1) PRIMARY KEY,
    SNAPSHOT_NAME VARCHAR(255) NOT NULL,
    CREATED_BY VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    SNAPSHOT_JSON VARCHAR(MAX) NOT NULL
);
GO

-- 18. RULE_TAGS
------------------------------------------------------
IF OBJECT_ID('dbo.RULE_TAGS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_TAGS;
GO

CREATE TABLE dbo.RULE_TAGS (
    TAG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    TAG_NAME VARCHAR(100) NOT NULL
);
GO

-- 19. BRM_RULE_LINEAGE
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_LINEAGE', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_LINEAGE;
GO

CREATE TABLE dbo.BRM_RULE_LINEAGE (
    LINEAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    PARENT_ID INT NULL
);
GO

-- 20. BRM_DEFECT_LOGS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_DEFECT_LOGS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_DEFECT_LOGS;
GO

CREATE TABLE dbo.BRM_DEFECT_LOGS (
    DEFECT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DESCRIPTION VARCHAR(MAX) NOT NULL,
    SEVERITY VARCHAR(50) NOT NULL,
    REPORTER VARCHAR(100) NOT NULL,
    STATUS VARCHAR(50) NOT NULL,
    TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 21. BUSINESS_GROUPS
------------------------------------------------------
IF OBJECT_ID('dbo.BUSINESS_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BUSINESS_GROUPS;
GO

CREATE TABLE dbo.BUSINESS_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(255) NOT NULL UNIQUE,
    DESCRIPTION VARCHAR(MAX) NULL,
    EMAIL VARCHAR(255) NULL
);
GO

-- 22. BRM_RULE_TYPES
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_TYPES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TYPES;
GO

CREATE TABLE dbo.BRM_RULE_TYPES (
    RULE_TYPE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_TYPE_NAME VARCHAR(100) NOT NULL
);
GO

-- 23. BRM_RULE_GROUPS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_GROUPS;
GO

CREATE TABLE dbo.BRM_RULE_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(255) NOT NULL
);
GO

-- 24. GROUP_PERMISSIONS
------------------------------------------------------
IF OBJECT_ID('dbo.GROUP_PERMISSIONS', 'U') IS NOT NULL
    DROP TABLE dbo.GROUP_PERMISSIONS;
GO

CREATE TABLE dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    TARGET_TABLE VARCHAR(255) NOT NULL
);
GO

-- 25. BRM_RULE_COMMENTS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_COMMENTS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_COMMENTS;
GO

CREATE TABLE dbo.BRM_RULE_COMMENTS (
    COMMENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    COMMENT_TEXT VARCHAR(MAX) NOT NULL,
    COMMENT_BY VARCHAR(100) NOT NULL,
    COMMENT_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 26. BRM_CUSTOM_GROUP_MEMBERS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
GO

CREATE TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID INT NOT NULL
);
GO

-- 27. BRM_CUSTOM_RULE_GROUPS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
GO

CREATE TABLE dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME VARCHAR(255) NOT NULL,
    OWNER_BUSINESS_GROUP VARCHAR(100) NOT NULL,
    CREATED_BY VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 28. BRM_CUSTOM_GROUP_BACKUPS
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_BACKUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS;
GO

CREATE TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE(),
    BACKUP_VERSION INT NOT NULL,
    BACKUP_JSON VARCHAR(MAX) NOT NULL
);
GO

-- 29. HELP_CONTENT
------------------------------------------------------
IF OBJECT_ID('dbo.HELP_CONTENT', 'U') IS NOT NULL
    DROP TABLE dbo.HELP_CONTENT;
GO

CREATE TABLE dbo.HELP_CONTENT (
    HELP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CATEGORY VARCHAR(50) NOT NULL,  -- e.g., FAQ, GUIDE
    TITLE VARCHAR(255) NOT NULL,
    CONTENT VARCHAR(MAX) NOT NULL,
    LAST_UPDATED DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- 30. BRM_COLUMN_MAPPING
------------------------------------------------------
IF OBJECT_ID('dbo.BRM_COLUMN_MAPPING', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_COLUMN_MAPPING;
GO

CREATE TABLE dbo.BRM_COLUMN_MAPPING (
    MAPPING_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    COLUMN_NAME VARCHAR(255) NOT NULL,
    MAPPED_COLUMN VARCHAR(255) NOT NULL
);
GO

-- 31. (Optional Additional Objects)
-- Add any further objects as needed for the tool.
------------------------------------------------------
-- End of BRM Tool DDL File


-- ====================================================
-- BRM TOOL TEST DATA INSERTS â€“ ALL OBJECTS
-- ====================================================
-- Run this script after executing the DDL file to populate the database with sample test data.

-- 1. USERS (Sample Users)
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP) VALUES ('JohnDoe', 'password', 'Admin');
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP) VALUES ('JaneSmith', 'password', 'BG1');
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP) VALUES ('BobBrown', 'password', 'BG1');
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP) VALUES ('AliceWhite', 'password', 'BG2');
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP) VALUES ('CharlieBlack', 'password', 'BG2');

-- 2. BUSINESS_GROUPS (Sample Business Groups)
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL) VALUES ('BG1', 'Business Group 1', 'bg1@example.com');
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL) VALUES ('BG2', 'Business Group 2', 'bg2@example.com');
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL) VALUES ('Admin', 'Administrators', 'admin@example.com');

-- 3. BRM_RULE_TYPES (Sample Rule Types)
INSERT INTO dbo.BRM_RULE_TYPES (RULE_TYPE_NAME) VALUES ('SQL');
INSERT INTO dbo.BRM_RULE_TYPES (RULE_TYPE_NAME) VALUES ('DecisionTable');

-- 4. BRM_RULE_GROUPS (Sample Rule Groups)
INSERT INTO dbo.BRM_RULE_GROUPS (GROUP_NAME) VALUES ('Core Rules');
INSERT INTO dbo.BRM_RULE_GROUPS (GROUP_NAME) VALUES ('Supplementary Rules');

-- 5. BRM_RULES (Sample Rules demonstrating various operations)
INSERT INTO dbo.BRM_RULES 
  (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE)
VALUES 
  (1, NULL, 1, 'Customer Insert Rule', 'INSERT INTO Customers (Name, Email) VALUES (''TestName'', ''test@example.com'')', '2025-01-01', '2025-12-31', 'ACTIVE', 'JohnDoe', 'BG1', 'APPROVED', 'INSERT');

INSERT INTO dbo.BRM_RULES 
  (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE)
VALUES 
  (1, NULL, 1, 'Order Update Rule', 'UPDATE Orders SET Status=''Processed'' WHERE OrderID=123', '2025-01-01', '2025-12-31', 'ACTIVE', 'JaneSmith', 'BG1', 'APPROVED', 'UPDATE');

INSERT INTO dbo.BRM_RULES 
  (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE)
VALUES 
  (2, NULL, 1, 'Select Report Rule', 'SELECT * FROM Reports WHERE Date > GETDATE()', '2025-01-01', '2025-12-31', 'INACTIVE', 'BobBrown', 'BG1', 'PENDING', 'SELECT');

INSERT INTO dbo.BRM_RULES 
  (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE, DECISION_TABLE_ID)
VALUES 
  (2, NULL, 2, 'Decision Table Rule', NULL, '2025-01-01', '2025-12-31', 'ACTIVE', 'AliceWhite', 'BG2', 'APPROVED', 'DECISION_TABLE', 1);

INSERT INTO dbo.BRM_RULES 
  (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE, CRITICAL_RULE)
VALUES 
  (1, NULL, 1, 'Critical Delete Rule', 'DELETE FROM Orders WHERE OrderID=999', '2025-01-01', '2025-12-31', 'ACTIVE', 'CharlieBlack', 'BG2', 'APPROVED', 'DELETE', 1);

-- Additional rules for hierarchy and relationships
INSERT INTO dbo.BRM_RULES (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE)
VALUES (1, 1, 1, 'Child Rule of Customer Insert', 'SELECT CustomerID FROM Customers', 'ACTIVE', 'JohnDoe', 'BG1', 'APPROVED', 'SELECT');

INSERT INTO dbo.BRM_RULES (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE)
VALUES (2, NULL, 1, 'Inventory Check Rule', 'SELECT * FROM Inventory WHERE Quantity < 10', 'ACTIVE', 'JaneSmith', 'BG1', 'APPROVED', 'SELECT');

INSERT INTO dbo.BRM_RULES (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE)
VALUES (2, 7, 1, 'Child Inventory Rule', 'UPDATE Inventory SET Reorder=1 WHERE ProductID=555', 'INACTIVE', 'BobBrown', 'BG1', 'PENDING', 'UPDATE');

INSERT INTO dbo.BRM_RULES (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, OPERATION_TYPE)
VALUES (1, NULL, 1, 'Customer Update Rule', 'UPDATE Customers SET Email=''new@example.com'' WHERE CustomerID=101', 'ACTIVE', 'JohnDoe', 'BG1', 'APPROVED', 'UPDATE');

-- 6. BRM_RULE_TABLE_DEPENDENCIES (Sample dependencies)
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES (1, 'TestDB', 'Customers', 'CustomerID', 'WRITE');
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES (2, 'TestDB', 'Orders', 'OrderID', 'WRITE');
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES (5, 'TestDB', 'Orders', 'OrderID', 'DELETE');

-- 7. COLLABORATION_LOGS (Sample messages)
INSERT INTO dbo.COLLABORATION_LOGS (MESSAGE, SENDER)
VALUES ('Initial collaboration message for testing.', 'JohnDoe');
INSERT INTO dbo.COLLABORATION_LOGS (MESSAGE, SENDER)
VALUES ('Follow-up message regarding rule updates.', 'JaneSmith');

-- 8. DATA_VALIDATIONS (Sample validations)
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES ('Customers', 'Email', 'NOT NULL', NULL);
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES ('Orders', 'OrderDate', 'RANGE', 'min=2020-01-01;max=2025-12-31');
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES ('Inventory', 'Quantity', 'NOT NULL', NULL);

-- 9. DATA_VALIDATION_LOGS (Sample logs)
INSERT INTO dbo.DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS)
VALUES (1, 'PASS', 'All customer emails are present.');
INSERT INTO dbo.DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS)
VALUES (2, 'FAIL', '5 orders have OrderDate out of range.');

-- 10. RULE_EXECUTION_LOGS (Sample execution logs)
INSERT INTO dbo.RULE_EXECUTION_LOGS (RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE)
VALUES (1, 1, 'Execution successful', 10, 120, 5, 1000);
INSERT INTO dbo.RULE_EXECUTION_LOGS (RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE)
VALUES (3, 0, 'Execution returned no rows', 0, 80, 3, 800);

-- 11. RULE_PERF_STATS (Sample performance statistics)
INSERT INTO dbo.RULE_PERF_STATS (RULE_ID, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT, DATE_KEY)
VALUES (1, 150, 900, 5, CONVERT(CHAR(8), GETDATE(),112));
INSERT INTO dbo.RULE_PERF_STATS (RULE_ID, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT, DATE_KEY)
VALUES (2, 2500, 55000, 3, CONVERT(CHAR(8), DATEADD(DAY,-1,GETDATE()),112));

-- 12. BRM_RULE_APPROVALS (Sample approvals)
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES (1, 'BG1', 'JohnDoe', 1, 1);
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES (2, 'BG1', 'JaneSmith', 0, 1);
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES (4, 'BG2', 'AliceWhite', 1, 1);

-- 13. DECISION_TABLES (Sample decision table)
INSERT INTO dbo.DECISION_TABLES (TABLE_NAME, DESCRIPTION, DECISION_QUERY)
VALUES ('DT1', 'Decision table for critical decision rule', 'SELECT 1 AS DecisionResult');

-- 14. DECISION_TABLE_EXEC_LOGS (Sample decision table log)
INSERT INTO dbo.DECISION_TABLE_EXEC_LOGS (DECISION_TABLE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT)
VALUES (1, 1, 'Decision table passed', 1);

-- 15. RULE_CONFLICTS (Sample rule conflicts)
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES (1, 5, 1);
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES (2, 3, 2);

-- 16. BRM_GLOBAL_CRITICAL_LINKS (Sample global-critical links)
INSERT INTO dbo.BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES (5, 1);

-- 17. COMPOSITE_RULES (Sample composite rule)
INSERT INTO dbo.COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES ('Composite Rule 1', 'Rule1 AND Rule2', 'SendEmail');

-- 18. RULE_SNAPSHOTS (Sample snapshot)
INSERT INTO dbo.RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON)
VALUES ('Snapshot 2025-03-18', 'JohnDoe', '{"rules": [1,2,3,4,5]}');

-- 19. RULE_TAGS (Sample rule tags)
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME)
VALUES (1, 'Critical');
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME)
VALUES (3, 'Report');

-- 20. BRM_RULE_LINEAGE (Sample rule lineage relationships)
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_ID)
VALUES (2, 1);
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_ID)
VALUES (7, 1);
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_ID)
VALUES (8, 7);

-- 21. BRM_DEFECT_LOGS (Sample defects)
INSERT INTO dbo.BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS)
VALUES (3, 'Null value encountered in column X', 'High', 'BobBrown', 'Open');
INSERT INTO dbo.BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS)
VALUES (5, 'Data inconsistency error in delete operation', 'Medium', 'AliceWhite', 'Open');

-- 22. GROUP_PERMISSIONS (Sample group permissions)
INSERT INTO dbo.GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE)
VALUES ('BG1', 'BRM_RULES');
INSERT INTO dbo.GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE)
VALUES ('Admin', 'USERS');

-- 23. BRM_RULE_COMMENTS (Sample comments on rules)
INSERT INTO dbo.BRM_RULE_COMMENTS (RULE_ID, COMMENT_TEXT, COMMENT_BY)
VALUES (1, 'Initial rule added for customer inserts.', 'JohnDoe');
INSERT INTO dbo.BRM_RULE_COMMENTS (RULE_ID, COMMENT_TEXT, COMMENT_BY)
VALUES (1, 'Reviewed and approved.', 'JaneSmith');

-- 24. BRM_CUSTOM_GROUP_MEMBERS (Sample custom group members)
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES (1, 1);
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES (1, 3);

-- 25. BRM_CUSTOM_RULE_GROUPS (Sample custom rule groups)
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
VALUES ('Custom Group A', 'BG1', 'JohnDoe');
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
VALUES ('Custom Group B', 'BG2', 'AliceWhite');

-- 26. BRM_CUSTOM_GROUP_BACKUPS (Sample backup for a custom group)
INSERT INTO dbo.BRM_CUSTOM_GROUP_BACKUPS (CUSTOM_GROUP_ID, BACKUP_VERSION, BACKUP_JSON)
VALUES (1, 1, '{"group_name": "Custom Group A", "members": [1,3]}');

-- 27. HELP_CONTENT (Sample help content)
INSERT INTO dbo.HELP_CONTENT (CATEGORY, TITLE, CONTENT)
VALUES ('FAQ', 'How to add a rule?', 'Click on "Add Rule" in the Business Rules tab and fill in the details.');
INSERT INTO dbo.HELP_CONTENT (CATEGORY, TITLE, CONTENT)
VALUES ('GUIDE', 'User Management Guide', 'This guide explains how to manage users and groups.');

-- 28. BRM_COLUMN_MAPPING (Sample column mapping)
INSERT INTO dbo.BRM_COLUMN_MAPPING (RULE_ID, COLUMN_NAME, MAPPED_COLUMN)
VALUES (1, 'CustomerID', 'CustID');
INSERT INTO dbo.BRM_COLUMN_MAPPING (RULE_ID, COLUMN_NAME, MAPPED_COLUMN)
VALUES (2, 'OrderID', 'OrdID');

-- ====================================================
-- End of BRM TOOL TEST DATA INSERTS
-- ====================================================