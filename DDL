------------------------------------------------------------------------------
-- 1) USERS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.USERS', 'U') IS NOT NULL
    DROP TABLE dbo.USERS;
GO

CREATE TABLE dbo.USERS (
    USER_ID     INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    USERNAME    VARCHAR(50) NOT NULL,
    [PASSWORD]  VARCHAR(50) NOT NULL,
    USER_GROUP  VARCHAR(50) NOT NULL
);
GO

------------------------------------------------------------------------------
-- 2) BUSINESS_GROUPS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BUSINESS_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BUSINESS_GROUPS;
GO

CREATE TABLE dbo.BUSINESS_GROUPS (
    GROUP_NAME  VARCHAR(50) NOT NULL PRIMARY KEY,
    DESCRIPTION VARCHAR(255) NULL,
    EMAIL       VARCHAR(255) NULL
);
GO

------------------------------------------------------------------------------
-- 3) GROUP_PERMISSIONS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.GROUP_PERMISSIONS', 'U') IS NOT NULL
    DROP TABLE dbo.GROUP_PERMISSIONS;
GO

CREATE TABLE dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME    VARCHAR(50) NOT NULL,
    TARGET_TABLE  VARCHAR(255) NOT NULL
    -- OPTIONALLY: FOREIGN KEY (GROUP_NAME) REFERENCES BUSINESS_GROUPS(GROUP_NAME)
);
GO

------------------------------------------------------------------------------
-- 4) BRM_RULE_TYPES
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_TYPES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TYPES;
GO

CREATE TABLE dbo.BRM_RULE_TYPES (
    RULE_TYPE_ID   INT NOT NULL PRIMARY KEY,
    RULE_TYPE_NAME VARCHAR(50) NOT NULL
);
GO

------------------------------------------------------------------------------
-- 5) BRM_RULE_GROUPS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_GROUPS;
GO

CREATE TABLE dbo.BRM_RULE_GROUPS (
    GROUP_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL
    -- You can add UNIQUE if you want a unique constraint on GROUP_NAME
);
GO

------------------------------------------------------------------------------
-- 6) BRM_RULES
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULES;
GO

CREATE TABLE dbo.BRM_RULES (
    RULE_ID              INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_ID             INT NULL,  -- references BRM_RULE_GROUPS
    PARENT_RULE_ID       INT NULL,  -- self-reference
    RULE_TYPE_ID         INT NULL,  -- references BRM_RULE_TYPES
    RULE_NAME            VARCHAR(200) NOT NULL,
    RULE_SQL             VARCHAR(MAX) NOT NULL,
    EFFECTIVE_START_DATE DATETIME NOT NULL,
    EFFECTIVE_END_DATE   DATETIME NULL,
    STATUS               VARCHAR(50) NOT NULL DEFAULT ('INACTIVE'),
    VERSION              INT NOT NULL DEFAULT (1),
    CREATED_BY           VARCHAR(50) NULL,
    DESCRIPTION          VARCHAR(500) NULL,
    OPERATION_TYPE       VARCHAR(20) NOT NULL,   -- e.g. SELECT, UPDATE
    BUSINESS_JUSTIFICATION VARCHAR(500) NULL,
    CREATED_TIMESTAMP    DATETIME NOT NULL DEFAULT (GETDATE()),
    UPDATED_BY           VARCHAR(50) NULL,
    OWNER_GROUP          VARCHAR(50) NOT NULL,   -- references BUSINESS_GROUPS
    CLUSTER_NAME         VARCHAR(50) NULL,
    APPROVAL_STATUS      VARCHAR(50) NOT NULL DEFAULT ('APPROVAL_IN_PROGRESS'),
    IS_GLOBAL            BIT NOT NULL DEFAULT (0),
    CRITICAL_RULE        BIT NOT NULL DEFAULT (0),
    CRITICAL_SCOPE       VARCHAR(20) NOT NULL DEFAULT ('NONE'),
    CDC_TYPE             VARCHAR(20) NOT NULL DEFAULT ('NONE')
);

-- Optionally add foreign keys:
-- ALTER TABLE dbo.BRM_RULES
--     ADD CONSTRAINT FK_BRM_RULES_GROUPS
--         FOREIGN KEY (GROUP_ID) REFERENCES BRM_RULE_GROUPS(GROUP_ID);
-- ALTER TABLE dbo.BRM_RULES
--     ADD CONSTRAINT FK_BRM_RULES_PARENT
--         FOREIGN KEY (PARENT_RULE_ID) REFERENCES BRM_RULES(RULE_ID);
-- ALTER TABLE dbo.BRM_RULES
--     ADD CONSTRAINT FK_BRM_RULES_RULETYPES
--         FOREIGN KEY (RULE_TYPE_ID) REFERENCES BRM_RULE_TYPES(RULE_TYPE_ID);

GO

------------------------------------------------------------------------------
-- 7) BRM_RULE_TABLE_DEPENDENCIES
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
GO

CREATE TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID       INT NOT NULL,
    DATABASE_NAME VARCHAR(100) NOT NULL,
    TABLE_NAME    VARCHAR(200) NOT NULL,
    COLUMN_NAME   VARCHAR(200) NOT NULL,
    COLUMN_OP     VARCHAR(10) NOT NULL
    -- FK optional: FOREIGN KEY (RULE_ID) REFERENCES BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------
-- 8) BRM_AUDIT_LOG
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_AUDIT_LOG', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_AUDIT_LOG;
GO

CREATE TABLE dbo.BRM_AUDIT_LOG (
    AUDIT_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    ACTION          VARCHAR(50) NOT NULL,
    TABLE_NAME      VARCHAR(50) NOT NULL,
    RECORD_ID       VARCHAR(50) NOT NULL,
    ACTION_BY       VARCHAR(50) NOT NULL,
    OLD_DATA        VARCHAR(MAX) NULL,
    NEW_DATA        VARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE())
);
GO

------------------------------------------------------------------------------
-- 9) BRM_RULE_LINEAGE (Placeholder)
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_LINEAGE', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_LINEAGE;
GO

CREATE TABLE dbo.BRM_RULE_LINEAGE (
    LINEAGE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID    INT NOT NULL,
    LINEAGE_INFO VARCHAR(200) NULL
    -- Possibly: FOREIGN KEY (RULE_ID) REFERENCES BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------
-- 10) BRM_GROUP_BACKUPS (Placeholder)
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_GROUP_BACKUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_GROUP_BACKUPS;
GO

CREATE TABLE dbo.BRM_GROUP_BACKUPS (
    BACKUP_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME      VARCHAR(50) NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE()),
    BACKUP_JSON     VARCHAR(MAX) NULL
);
GO

------------------------------------------------------------------------------
-- 11) BRM_COLUMN_MAPPING
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_COLUMN_MAPPING', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_COLUMN_MAPPING;
GO

CREATE TABLE dbo.BRM_COLUMN_MAPPING (
    MAPPING_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SOURCE_RULE_ID INT NOT NULL,
    RULE_ID      INT NOT NULL,
    COLUMN_NAME  VARCHAR(200) NOT NULL,
    MAP_TYPE     VARCHAR(10) NOT NULL   -- e.g. 'READ' or 'WRITE'
);
GO

------------------------------------------------------------------------------
-- 12) BRM_CUSTOM_RULE_GROUPS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
GO

CREATE TABLE dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_NAME VARCHAR(100) NOT NULL,
    OWNER_BUSINESS_GROUP VARCHAR(50) NOT NULL,
    CREATED_BY        VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE())
);
GO

------------------------------------------------------------------------------
-- 13) BRM_CUSTOM_GROUP_MEMBERS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
GO

CREATE TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_ID  INT NOT NULL,
    RULE_ID          INT NOT NULL
    -- FK optional: FOREIGN KEY (CUSTOM_GROUP_ID) REFERENCES BRM_CUSTOM_RULE_GROUPS(CUSTOM_GROUP_ID)
    -- FK optional: FOREIGN KEY (RULE_ID) REFERENCES BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------
-- 14) BUSINESS_GROUP_APPROVERS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BUSINESS_GROUP_APPROVERS', 'U') IS NOT NULL
    DROP TABLE dbo.BUSINESS_GROUP_APPROVERS;
GO

CREATE TABLE dbo.BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME  VARCHAR(50) NOT NULL,
    USERNAME    VARCHAR(50) NOT NULL
    -- Could add FK to BUSINESS_GROUPS
);
GO

------------------------------------------------------------------------------
-- 15) BRM_RULE_APPROVALS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_APPROVALS;
GO

CREATE TABLE dbo.BRM_RULE_APPROVALS (
    APPROVAL_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID          INT NOT NULL,
    GROUP_NAME       VARCHAR(50) NOT NULL,
    USERNAME         VARCHAR(50) NOT NULL,
    APPROVED_FLAG    INT NOT NULL DEFAULT (0),  -- 0=Pending,1=Approved,2=Rejected
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVAL_STAGE   INT NOT NULL,
    ACTION_TYPE      VARCHAR(50) NULL   -- e.g. 'CREATE_OR_UPDATE','DEACTIVATE','DELETE'
    -- FK optional: FOREIGN KEY (RULE_ID) REFERENCES BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------
-- 16) BRM_CUSTOM_GROUP_BACKUPS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_BACKUPS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS;
GO

CREATE TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS (
    CG_BACKUP_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE()),
    BACKUP_VERSION  INT NOT NULL,
    BACKUP_JSON     VARCHAR(MAX) NULL
    -- FK optional: FOREIGN KEY (CUSTOM_GROUP_ID) REFERENCES BRM_CUSTOM_RULE_GROUPS(CUSTOM_GROUP_ID)
);
GO

------------------------------------------------------------------------------
-- 17) BRM_GLOBAL_CRITICAL_LINKS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
GO

CREATE TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GCR_RULE_ID  INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
    -- FK optional: references BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------
-- 18) RULE_SCHEDULES
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.RULE_SCHEDULES', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_SCHEDULES;
GO

CREATE TABLE dbo.RULE_SCHEDULES (
    SCHEDULE_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID          INT NOT NULL,
    SCHEDULE_TIME    DATETIME NOT NULL,
    STATUS           VARCHAR(50) NOT NULL DEFAULT ('Scheduled'),
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE())
    -- FK optional: references BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------
-- 19) BRM_RULE_COMMENTS (not heavily used, but for completeness)
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.BRM_RULE_COMMENTS', 'U') IS NOT NULL
    DROP TABLE dbo.BRM_RULE_COMMENTS;
GO

CREATE TABLE dbo.BRM_RULE_COMMENTS (
    COMMENT_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID           INT NOT NULL,
    COMMENT_TEXT      VARCHAR(500) NOT NULL,
    CREATED_BY        VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE())
);
GO

------------------------------------------------------------------------------
-- 20) DECISION_TABLES
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.DECISION_TABLES', 'U') IS NOT NULL
    DROP TABLE dbo.DECISION_TABLES;
GO

CREATE TABLE dbo.DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    TABLE_NAME        VARCHAR(100) NOT NULL,
    DESCRIPTION       VARCHAR(500) NULL
);
GO

------------------------------------------------------------------------------
-- 21) RULE_CONFLICTS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.RULE_CONFLICTS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_CONFLICTS;
GO

CREATE TABLE dbo.RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID1    INT NOT NULL,
    RULE_ID2    INT NOT NULL,
    PRIORITY    INT NOT NULL DEFAULT (0)
    -- Possibly: FOREIGN KEY (RULE_ID1) REFERENCES BRM_RULES(RULE_ID)
    --           FOREIGN KEY (RULE_ID2) REFERENCES BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------
-- 22) COMPOSITE_RULES
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.COMPOSITE_RULES', 'U') IS NOT NULL
    DROP TABLE dbo.COMPOSITE_RULES;
GO

CREATE TABLE dbo.COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CRULE_NAME        VARCHAR(100) NOT NULL,
    LOGIC_EXPR        VARCHAR(1000) NULL,
    ACTION_ON_PASS    VARCHAR(1000) NULL
);
GO

------------------------------------------------------------------------------
-- 23) RULE_SNAPSHOTS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.RULE_SNAPSHOTS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_SNAPSHOTS;
GO

CREATE TABLE dbo.RULE_SNAPSHOTS (
    SNAPSHOT_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SNAPSHOT_NAME    VARCHAR(200) NOT NULL,
    CREATED_BY       VARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE()),
    SNAPSHOT_JSON    VARCHAR(MAX) NULL
);
GO

------------------------------------------------------------------------------
-- 24) RULE_TAGS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.RULE_TAGS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_TAGS;
GO

CREATE TABLE dbo.RULE_TAGS (
    TAG_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID  INT NOT NULL,
    TAG_NAME VARCHAR(100) NOT NULL
    -- FK optional: references BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------
-- 25) DATA_VALIDATIONS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.DATA_VALIDATIONS', 'U') IS NOT NULL
    DROP TABLE dbo.DATA_VALIDATIONS;
GO

CREATE TABLE dbo.DATA_VALIDATIONS (
    VALIDATION_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    TABLE_NAME      VARCHAR(100) NOT NULL,
    COLUMN_NAME     VARCHAR(100) NOT NULL,
    VALIDATION_TYPE VARCHAR(50) NOT NULL,
    PARAMS          VARCHAR(1000) NULL
);
GO

------------------------------------------------------------------------------
-- 26) RULE_EXECUTION_LOGS
------------------------------------------------------------------------------
IF OBJECT_ID('dbo.RULE_EXECUTION_LOGS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_EXECUTION_LOGS;
GO

CREATE TABLE dbo.RULE_EXECUTION_LOGS (
    EXEC_LOG_ID         INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID             INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT (GETDATE()),
    PASS_FLAG           BIT NOT NULL DEFAULT (0),
    MESSAGE             VARCHAR(500) NULL,
    RECORD_COUNT        INT NOT NULL DEFAULT (0)
    -- FK optional: references BRM_RULES(RULE_ID)
);
GO

------------------------------------------------------------------------------

/*
 NOTES:
 - If you want all foreign keys enforced, uncomment the relevant FK constraints.
 - For the new approach for deactivation/deletion approvals, ensure 
   BRM_RULE_APPROVALS has the 'ACTION_TYPE' column. (It’s included above.)
 - Make sure 'CDC_TYPE' and 'CLUSTER_NAME' and the bits for 'IS_GLOBAL' and 
   'CRITICAL_RULE' are present in BRM_RULES (they are).
 - This script can be used in SSMS or any SQL client pointing to a suitable 
   database in SQL Server.
*/