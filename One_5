#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_advanced_approvals_and_lineage.py
Description: Provides advanced multi-step approval management,
             global/critical administration, a drag-and-drop hierarchy view,
             and an enhanced lineage visualization using QGraphicsView.

Features included:
 • MultiStepApprovalTab:
    - Displays pending approvals for the current user, showing minimal stage only.
    - Approve/Reject, with forced unlock for Admin.
    - Auto-refresh is possible (timer-based) or manual.

 • GlobalCriticalAdminTab:
    - Admin-only: manage global/critical flags, forced activation/deactivation, 
      link/unlink in BRM_GLOBAL_CRITICAL_LINKS, forcibly lock/unlock rules, etc.

 • HierarchyViewTab:
    - A QTreeWidget that displays group → rules. 
    - Drag rule to a new group or parent rule => updates DB (re-parenting).
    - Immediately sets rule STATUS='INACTIVE', APPROVAL_STATUS='APPROVAL_IN_PROGRESS' to re-approve changes.

 • EnhancedLineageGraphWidget:
    - A QGraphicsView that draws an ER-style or “flattened” lineage diagram, 
      with distinct shapes for rules vs. tables, color-coded statuses,
      arrowheads, layering or BFS layout to reduce overlap, 
      plus a search that dims non-matching nodes.

All functionalities rely on your existing DB structures:
    BRM_RULE_APPROVALS, BRM_RULES, BRM_GLOBAL_CRITICAL_LINKS, etc.
"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, json, logging, re
from datetime import datetime
from collections import deque
import pyodbc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem, QPushButton, QTreeWidget, QTreeWidgetItem, QMessageBox, QInputDialog, QGraphicsView, QGraphicsScene, QGraphicsItem, QGraphicsTextItem, QGraphicsEllipseItem, QGraphicsLineItem, QComboBox

from brm_core_foundation import logger, fetch_all_dict, fetch_one_dict, insert_audit_log

class MultiStepApprovalTab(QWidget):
    def __init__(self, connection, username, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.username = username
        self.user_group = user_group
        self.init_ui()
        self.load_approvals()
    def init_ui(self):
        layout = QVBoxLayout(self)
        self.approval_table = QTableWidget(0, 8)
        self.approval_table.setHorizontalHeaderLabels(["RuleID", "Group", "RuleName", "Stage", "Approved?", "Approve", "Reject", "ForceUnlock"])
        self.approval_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.approval_table)
        ref_btn = QPushButton("Refresh Approvals")
        ref_btn.clicked.connect(self.load_approvals)
        layout.addWidget(ref_btn)
        self.setLayout(layout)
    def load_approvals(self):
        self.approval_table.setRowCount(0)
        c = self.connection.cursor()
        c.execute("""
            SELECT A.RULE_ID, A.GROUP_NAME, R.RULE_NAME, A.APPROVAL_STAGE, A.APPROVED_FLAG, R.LOCK_STATUS, R.LOCKED_BY
            FROM BRM_RULE_APPROVALS A
            JOIN BRM_RULES R ON A.RULE_ID = R.RULE_ID
            WHERE A.USERNAME=? AND A.APPROVED_FLAG=0
            ORDER BY A.RULE_ID
        """, (self.username,))
        rows = c.fetchall()
        def get_min_stage(rid):
            c2 = self.connection.cursor()
            c2.execute("SELECT MIN(APPROVAL_STAGE) FROM BRM_RULE_APPROVALS WHERE RULE_ID=? AND APPROVED_FLAG=0", (rid,))
            ro = c2.fetchone()
            return ro[0] if ro and ro[0] is not None else None
        filtered = [row for row in rows if get_min_stage(row[0]) == row[3]]
        self.approval_table.setRowCount(len(filtered))
        for r_i, row in enumerate(filtered):
            rule_id, grp, rname, stage, ap_flag, lock_status, locked_by = row
            self.approval_table.setItem(r_i, 0, QTableWidgetItem(str(rule_id)))
            self.approval_table.setItem(r_i, 1, QTableWidgetItem(str(grp)))
            self.approval_table.setItem(r_i, 2, QTableWidgetItem(str(rname)))
            self.approval_table.setItem(r_i, 3, QTableWidgetItem(str(stage)))
            self.approval_table.setItem(r_i, 4, QTableWidgetItem(str(ap_flag)))
            approve_btn = QPushButton("Approve")
            approve_btn.clicked.connect(lambda _, idx=r_i: self.approve_rule(idx))
            self.approval_table.setCellWidget(r_i, 5, approve_btn)
            reject_btn = QPushButton("Reject")
            reject_btn.clicked.connect(lambda _, idx=r_i: self.reject_rule(idx))
            self.approval_table.setCellWidget(r_i, 6, reject_btn)
            force_unlock_btn = QPushButton("Force Unlock")
            force_unlock_btn.clicked.connect(lambda _, idx=r_i: self.force_unlock(idx))
            force_unlock_btn.setEnabled(self.user_group=="Admin")
            self.approval_table.setCellWidget(r_i, 7, force_unlock_btn)
        self.approval_table.resizeColumnsToContents()
    def approve_rule(self, row_idx):
        rule_id = int(self.approval_table.item(row_idx, 0).text())
        grp = self.approval_table.item(row_idx, 1).text()
        c = self.connection.cursor()
        c.execute("UPDATE BRM_RULE_APPROVALS SET APPROVED_FLAG=1, APPROVED_TIMESTAMP=GETDATE() WHERE RULE_ID=? AND GROUP_NAME=? AND USERNAME=? AND APPROVED_FLAG=0", (rule_id, grp, self.username))
        def get_min_stage(rid):
            c2 = self.connection.cursor()
            c2.execute("SELECT MIN(APPROVAL_STAGE) FROM BRM_RULE_APPROVALS WHERE RULE_ID=? AND APPROVED_FLAG=0", (rid,))
            ro = c2.fetchone()
            return ro[0] if ro and ro[0] is not None else None
        if get_min_stage(rule_id) is None:
            c.execute("UPDATE BRM_RULES SET APPROVAL_STATUS='APPROVED', STATUS='ACTIVE' WHERE RULE_ID=?", (rule_id,))
        else:
            c.execute("UPDATE BRM_RULES SET APPROVAL_STATUS='APPROVAL_IN_PROGRESS', STATUS='INACTIVE' WHERE RULE_ID=?", (rule_id,))
        insert_audit_log(self.connection, "APPROVE", "BRM_RULE_APPROVALS", rule_id, self.username, {"old": "approved_flag=0"}, {"new": "approved=1"})
        self.connection.commit()
        QMessageBox.information(self, "Approved", f"Rule {rule_id} approved for group {grp}.")
        self.load_approvals()
    def reject_rule(self, row_idx):
        rule_id = int(self.approval_table.item(row_idx, 0).text())
        grp = self.approval_table.item(row_idx, 1).text()
        if QMessageBox.question(self, "Reject", f"Reject rule {rule_id} at group {grp}?") != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        c.execute("UPDATE BRM_RULE_APPROVALS SET APPROVED_FLAG=2, APPROVED_TIMESTAMP=GETDATE() WHERE RULE_ID=? AND GROUP_NAME=? AND USERNAME=? AND APPROVED_FLAG=0", (rule_id, grp, self.username))
        c.execute("UPDATE BRM_RULES SET APPROVAL_STATUS='REJECTED', STATUS='INACTIVE', LIFECYCLE_STATE='INACTIVE' WHERE RULE_ID=?", (rule_id,))
        insert_audit_log(self.connection, "REJECT", "BRM_RULE_APPROVALS", rule_id, self.username, None, {"rejected": True})
        self.connection.commit()
        QMessageBox.information(self, "Rejected", f"Rule {rule_id} rejected.")
        self.load_approvals()
    def force_unlock(self, row_idx):
        if self.user_group != "Admin":
            QMessageBox.warning(self, "Denied", "Only Admin can force unlock.")
            return
        rule_id = int(self.approval_table.item(row_idx, 0).text())
        c = self.connection.cursor()
        c.execute("UPDATE BRM_RULES SET LOCK_STATUS='UNLOCKED', LOCKED_BY=NULL, LOCKED_AT=NULL WHERE RULE_ID=?", (rule_id,))
        insert_audit_log(self.connection, "FORCE_UNLOCK", "BRM_RULES", rule_id, self.username, {"locked": True}, {"locked": False})
        self.connection.commit()
        QMessageBox.information(self, "Unlocked", f"Rule {rule_id} forcibly unlocked.")
        self.load_approvals()

class GlobalCriticalAdminTab(QWidget):
    def __init__(self, main_app, connection, user_group, parent=None):
        super().__init__(parent)
        self.main_app = main_app
        self.connection = connection
        self.user_group = user_group
        self.init_ui()
        self.refresh_all()
    def init_ui(self):
        layout = QVBoxLayout(self)
        if self.user_group != "Admin":
            layout.addWidget(QLabel("Access Denied: Admin only."))
            self.setLayout(layout)
            return
        top_h = QHBoxLayout()
        self.show_gcr_only = QtWidgets.QCheckBox("Show only GCR rules")
        self.show_gcr_only.setChecked(True)
        ref_btn = QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_rule_list)
        top_h.addWidget(self.show_gcr_only)
        top_h.addWidget(ref_btn)
        top_h.addStretch()
        layout.addLayout(top_h)
        self.rule_table = QTableWidget(0, 9)
        self.rule_table.setHorizontalHeaderLabels(["RuleID", "RuleName", "OwnerGroup", "IsGlobal", "CriticalRule", "CriticalScope", "Status", "UpdatedBy", "Actions"])
        self.rule_table.horizontalHeader().setStretchLastSection(True)
        self.rule_table.setSelectionBehavior(QTableWidget.SelectRows)
        layout.addWidget(self.rule_table)
        gcr_h = QHBoxLayout()
        self.global_update_cb = QtWidgets.QCheckBox("Set Global?")
        self.critical_update_cb = QtWidgets.QCheckBox("Set Critical?")
        gcr_h.addWidget(self.global_update_cb)
        gcr_h.addWidget(self.critical_update_cb)
        gcr_h.addWidget(QLabel("Scope:"))
        self.critical_scope_combo = QComboBox()
        self.critical_scope_combo.addItems(["NONE", "GROUP", "CLUSTER", "GLOBAL"])
        gcr_h.addWidget(self.critical_scope_combo)
        apply_btn = QPushButton("Apply to Selected")
        apply_btn.clicked.connect(self.apply_gcr)
        gcr_h.addWidget(apply_btn)
        gcr_h.addStretch()
        layout.addLayout(gcr_h)
        link_h = QHBoxLayout()
        self.gcr_parent_combo = QComboBox()
        link_h.addWidget(QLabel("Parent GCR:"))
        link_h.addWidget(self.gcr_parent_combo)
        self.gcr_child_combo = QComboBox()
        link_h.addWidget(QLabel("Child Rule:"))
        link_h.addWidget(self.gcr_child_combo)
        link_btn = QPushButton("Link Child")
        link_btn.clicked.connect(self.link_child)
        unlink_btn = QPushButton("Unlink Child")
        unlink_btn.clicked.connect(self.unlink_child)
        link_h.addWidget(link_btn)
        link_h.addWidget(unlink_btn)
        link_h.addStretch()
        layout.addLayout(link_h)
        self.link_view = QTableWidget(0, 2)
        self.link_view.setHorizontalHeaderLabels(["Parent GCR ID", "Child Rule ID"])
        self.link_view.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.link_view)
        ref_all_btn = QPushButton("Refresh All")
        ref_all_btn.clicked.connect(self.refresh_all)
        layout.addWidget(ref_all_btn)
        self.setLayout(layout)
    def refresh_all(self):
        self.load_rule_list()
        self.populate_gcr_combo()
        self.populate_child_combo()
        self.load_link_view()
    def load_rule_list(self):
        self.rule_table.setRowCount(0)
        c = self.connection.cursor()
        if self.show_gcr_only.isChecked():
            c.execute("""
                SELECT RULE_ID, RULE_NAME, OWNER_GROUP, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, STATUS, UPDATED_BY
                FROM BRM_RULES
                WHERE IS_GLOBAL=1 OR CRITICAL_RULE=1
                ORDER BY RULE_ID DESC
            """)
        else:
            c.execute("""
                SELECT RULE_ID, RULE_NAME, OWNER_GROUP, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, STATUS, UPDATED_BY
                FROM BRM_RULES
                ORDER BY RULE_ID DESC
            """)
        for row in c.fetchall():
            r_i = self.rule_table.rowCount()
            self.rule_table.insertRow(r_i)
            for col, val in enumerate(row):
                self.rule_table.setItem(r_i, col, QTableWidgetItem(str(val) if val is not None else ""))
            act_widget = QWidget()
            ah = QHBoxLayout(act_widget)
            ah.setContentsMargins(0, 0, 0, 0)
            lock_btn = QPushButton("Lock/Unlock")
            lock_btn.clicked.connect(lambda _, rid=row[0]: self.toggle_lock(rid))
            ah.addWidget(lock_btn)
            ah.addStretch()
            self.rule_table.setCellWidget(r_i, 8, act_widget)
        self.rule_table.resizeColumnsToContents()
    def apply_gcr(self):
        selected_ids = self.get_selected_rule_ids()
        if not selected_ids:
            QMessageBox.warning(self, "None", "No rules selected.")
            return
        is_glob = 1 if self.global_update_cb.isChecked() else 0
        is_crit = 1 if self.critical_update_cb.isChecked() else 0
        scope = self.critical_scope_combo.currentText().upper()
        c = self.connection.cursor()
        for rid in selected_ids:
            c.execute("UPDATE BRM_RULES SET IS_GLOBAL=?, CRITICAL_RULE=?, CRITICAL_SCOPE=? WHERE RULE_ID=?", (is_glob, is_crit, scope, rid))
            insert_audit_log(self.connection, "GCR_UPDATE", "BRM_RULES", rid, "Admin", None, {"IS_GLOBAL": is_glob, "CRITICAL_RULE": is_crit, "CRITICAL_SCOPE": scope})
        self.connection.commit()
        QMessageBox.information(self, "Done", f"Updated {len(selected_ids)} rule(s).")
        self.load_rule_list()
    def get_selected_rule_ids(self):
        sel = self.rule_table.selectionModel().selectedRows()
        return [int(self.rule_table.item(idx.row(), 0).text()) for idx in sel if self.rule_table.item(idx.row(), 0)]
    def toggle_lock(self, rule_id):
        c = self.connection.cursor()
        c.execute("SELECT LOCK_STATUS, LOCKED_BY FROM BRM_RULES WHERE RULE_ID=?", (rule_id,))
        row = c.fetchone()
        if not row:
            QMessageBox.warning(self, "Not Found", f"Rule {rule_id} not found.")
            return
        lock_st, locked_by = row
        if not lock_st or lock_st.upper() == "UNLOCKED":
            c.execute("UPDATE BRM_RULES SET LOCK_STATUS='LOCKED', LOCKED_BY='AdminOverride', LOCKED_AT=GETDATE() WHERE RULE_ID=?", (rule_id,))
            QMessageBox.information(self, "Locked", f"Rule {rule_id} locked (admin).")
        else:
            c.execute("UPDATE BRM_RULES SET LOCK_STATUS='UNLOCKED', LOCKED_BY=NULL, LOCKED_AT=NULL WHERE RULE_ID=?", (rule_id,))
            QMessageBox.information(self, "Unlocked", f"Rule {rule_id} unlocked.")
        self.connection.commit()
        self.load_rule_list()
    def populate_gcr_combo(self):
        self.gcr_parent_combo.clear()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES WHERE IS_GLOBAL=1 OR CRITICAL_RULE=1 ORDER BY RULE_ID")
        for (rid, rn) in c.fetchall():
            self.gcr_parent_combo.addItem(f"{rid} - {rn}", rid)
    def populate_child_combo(self):
        self.gcr_child_combo.clear()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        for (rid, rn) in c.fetchall():
            self.gcr_child_combo.addItem(f"{rid} - {rn}", rid)
    def load_link_view(self):
        self.link_view.setRowCount(0)
        c = self.connection.cursor()
        c.execute("SELECT GCR_RULE_ID, TARGET_RULE_ID FROM BRM_GLOBAL_CRITICAL_LINKS ORDER BY GCR_RULE_ID")
        for row in c.fetchall():
            r_i = self.link_view.rowCount()
            self.link_view.insertRow(r_i)
            self.link_view.setItem(r_i, 0, QTableWidgetItem(str(row[0])))
            self.link_view.setItem(r_i, 1, QTableWidgetItem(str(row[1])))
    def link_child(self):
        pid = self.gcr_parent_combo.currentData()
        cid = self.gcr_child_combo.currentData()
        if not pid or not cid:
            QMessageBox.warning(self, "Invalid", "Select both parent and child.")
            return
        if QMessageBox.question(self, "Confirm", f"Link child {cid} to parent {pid}?") != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        c.execute("INSERT INTO BRM_GLOBAL_CRITICAL_LINKS(GCR_RULE_ID, TARGET_RULE_ID) VALUES(?,?)", (pid, cid))
        insert_audit_log(self.connection, "LINK_GCR", "BRM_GLOBAL_CRITICAL_LINKS", f"{pid}->{cid}", "Admin", None, {"parent": pid, "child": cid})
        self.connection.commit()
        QMessageBox.information(self, "Linked", f"Child {cid} linked to parent {pid}.")
        self.load_link_view()
    def unlink_child(self):
        pid = self.gcr_parent_combo.currentData()
        cid = self.gcr_child_combo.currentData()
        if not pid or not cid:
            return
        if QMessageBox.question(self, "Confirm", f"Unlink child {cid} from parent {pid}?") != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        c.execute("DELETE FROM BRM_GLOBAL_CRITICAL_LINKS WHERE GCR_RULE_ID=? AND TARGET_RULE_ID=?", (pid, cid))
        insert_audit_log(self.connection, "UNLINK_GCR", "BRM_GLOBAL_CRITICAL_LINKS", f"{pid}->{cid}", "Admin", {"parent": pid, "child": cid}, None)
        self.connection.commit()
        QMessageBox.information(self, "Unlinked", f"Child {cid} unlinked from parent {pid}.")
        self.load_link_view()

class HierarchyViewTab(QTreeWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setHeaderLabels(["Group / Rule (Drag-Drop)"])
        self.setDragEnabled(True)
        self.setAcceptDrops(True)
        self.setDragDropMode(QTreeWidget.InternalMove)
        self.load_hierarchy()
    def load_hierarchy(self):
        self.clear()
        try:
            c = self.connection.cursor()
            c.execute("SELECT GROUP_ID, GROUP_NAME FROM BRM_RULE_GROUPS ORDER BY GROUP_ID")
            group_items = {}
            for (gid, gname) in c.fetchall():
                item = QTreeWidgetItem([f"{gname} (ID={gid})"])
                item.setData(0, Qt.UserRole, ("group", gid))
                self.addTopLevelItem(item)
                group_items[gid] = item
            c.execute("SELECT RULE_ID, RULE_NAME, GROUP_ID, PARENT_RULE_ID FROM BRM_RULES ORDER BY RULE_ID")
            all_rules = c.fetchall()
            rule_items = {}
            for (rid, rnm, gid, pid) in all_rules:
                if not pid:
                    if gid in group_items:
                        child_item = QTreeWidgetItem([f"Rule {rid}: {rnm}"])
                        child_item.setData(0, Qt.UserRole, ("rule", rid))
                        group_items[gid].addChild(child_item)
                        rule_items[rid] = child_item
            for (rid, rnm, gid, pid) in all_rules:
                if pid:
                    parent_item = rule_items.get(pid)
                    if parent_item:
                        child_item = QTreeWidgetItem([f"Rule {rid}: {rnm}"])
                        child_item.setData(0, Qt.UserRole, ("rule", rid))
                        parent_item.addChild(child_item)
                        rule_items[rid] = child_item
            self.expandAll()
        except Exception as ex:
            logger.error(f"Error loading hierarchy: {ex}")
            QMessageBox.critical(self, "Hierarchy Load Error", str(ex))
    def dropEvent(self, event):
        super().dropEvent(event)
        self.update_database_reparenting()
        self.load_hierarchy()
    def update_database_reparenting(self):
        c = self.connection.cursor()
        top_count = self.topLevelItemCount()
        for i in range(top_count):
            group_item = self.topLevelItem(i)
            if not group_item:
                continue
            grp_data = group_item.data(0, Qt.UserRole)
            if grp_data and grp_data[0] == "group":
                grp_id = grp_data[1]
                for j in range(group_item.childCount()):
                    child = group_item.child(j)
                    self.recursive_update(child, None, grp_id, c)
        c.commit()
    def recursive_update(self, item, parent_rule_id, group_id, cursor):
        data = item.data(0, Qt.UserRole)
        if data and data[0] == "rule":
            rid = data[1]
            cursor.execute("""
                UPDATE BRM_RULES
                SET PARENT_RULE_ID=?, GROUP_ID=?, UPDATED_BY='HierarchyDragDrop', VERSION=VERSION+1, STATUS='INACTIVE', APPROVAL_STATUS='APPROVAL_IN_PROGRESS'
                WHERE RULE_ID=?
            """, (parent_rule_id, group_id, rid))
            for i in range(item.childCount()):
                self.recursive_update(item.child(i), rid, group_id, cursor)

class EnhancedLineageGraphWidget(QGraphicsView):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setRenderHint(QtGui.QPainter.Antialiasing)
        self.setDragMode(QGraphicsView.ScrollHandDrag)
        self.scene = QGraphicsScene(self)
        self.setScene(self.scene)
        self.node_map = {}
        self.populate_graph()
    def populate_graph(self):
        self.scene.clear()
        self.node_map.clear()
        try:
            c = self.connection.cursor()
            c.execute("SELECT RULE_ID, RULE_NAME, STATUS, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE FROM BRM_RULES ORDER BY RULE_ID")
            rules = c.fetchall()
            c2 = self.connection.cursor()
            c2.execute("SELECT RULE_ID, DATABASE_NAME, TABLE_NAME FROM BRM_RULE_TABLE_DEPENDENCIES")
            deps = c2.fetchall()
            x_gap, y_gap, x0, y0 = 200, 120, 50, 50
            for idx, row in enumerate(rules):
                rid, rnm, st, appr, gl, cr = row
                node = LineageRuleNode(rid, rnm, st, appr, gl, cr)
                node.setPos(x0 + (idx % 5) * x_gap, y0 + (idx // 5) * y_gap)
                self.scene.addItem(node)
                self.node_map[f"RULE_{rid}"] = node
            table_map = {}
            for (rrid, dbn, tbn) in deps:
                if tbn:
                    key = f"{dbn}.{tbn}".lower()
                    table_map.setdefault(key, []).append(rrid)
            tidx = 0
            for tbl_key in table_map:
                tnode = LineageTableNode(tbl_key)
                tnode.setPos(800, y0 + tidx * 80)
                self.scene.addItem(tnode)
                self.node_map[f"TBL_{tbl_key}"] = tnode
                tidx += 1
            for (rrid, dbn, tbn) in deps:
                if tbn:
                    rule_node = self.node_map.get(f"RULE_{rrid}")
                    tbl_node = self.node_map.get(f"TBL_{dbn}.{tbn}".lower())
                    if rule_node and tbl_node:
                        self.draw_edge(rule_node, tbl_node)
            self.scene.setSceneRect(self.scene.itemsBoundingRect())
            self.resetView()
        except Exception as ex:
            logger.error(f"Lineage population error: {ex}")
            QMessageBox.critical(self, "Lineage Error", str(ex))
    def draw_edge(self, source_item, dest_item):
        sr = source_item.sceneBoundingRect()
        dr = dest_item.sceneBoundingRect()
        p1 = sr.center()
        p2 = dr.center()
        edge = LineageEdge(p1.x(), p1.y(), p2.x(), p2.y(), Qt.darkBlue)
        self.scene.addItem(edge)
    def resetView(self):
        self.fitInView(self.scene.itemsBoundingRect(), Qt.KeepAspectRatio)
    def apply_search_highlight(self, text):
        txt = text.lower().strip()
        if not txt:
            for it in self.scene.items():
                it.setOpacity(1.0)
            return
        for it in self.scene.items():
            if isinstance(it, (LineageRuleNode, LineageTableNode)):
                if txt in str(it.toolTip()).lower():
                    it.setOpacity(1.0)
                else:
                    it.setOpacity(0.2)

class LineageRuleNode(QtWidgets.QGraphicsRectItem):
    def __init__(self, rule_id, rule_name, status, appr_status, is_global, is_crit):
        super().__init__(0, 0, 140, 70)
        self.rule_id = rule_id
        self.rule_name = rule_name
        self.status = status
        self.approval_status = appr_status
        self.is_global = is_global
        self.is_crit = is_crit
        fill = QtGui.QColor("lightgreen") if status.upper() == "ACTIVE" else QtGui.QColor("tomato") if status.upper() == "INACTIVE" else QtGui.QColor("lightgray")
        self.setBrush(QtGui.QBrush(fill))
        pen = QtGui.QPen(Qt.black, 2)
        if is_crit == 1 or is_global == 1:
            pen.setStyle(Qt.DashLine)
            pen.setColor(QtGui.QColor("red"))
        self.setPen(pen)
        self.setToolTip(f"Rule {rule_id}: {rule_name}\nStatus={status}\nApproval={appr_status}")
        self.text_item = QGraphicsTextItem(f"{rule_name}\n(ID:{rule_id})", self)
        self.text_item.setDefaultTextColor(Qt.black)
        self.text_item.setFont(QtGui.QFont("Arial", 9))
        rect = self.rect()
        trect = self.text_item.boundingRect()
        self.text_item.setPos(rect.width()/2 - trect.width()/2, rect.height()/2 - trect.height()/2)

class LineageTableNode(QtWidgets.QGraphicsEllipseItem):
    def __init__(self, table_key):
        super().__init__(0, 0, 100, 100)
        self.table_key = table_key
        self.setBrush(QtGui.QBrush(QtGui.QColor("lightblue")))
        self.setPen(QtGui.QPen(QtGui.QColor("darkblue"), 2))
        self.setToolTip(f"Table: {table_key}")
        self.text_item = QGraphicsTextItem(table_key, self)
        self.text_item.setDefaultTextColor(Qt.black)
        self.text_item.setFont(QtGui.QFont("Arial", 8))
        trect = self.text_item.boundingRect()
        self.text_item.setPos(50 - trect.width()/2, 50 - trect.height()/2)

class LineageEdge(QtWidgets.QGraphicsLineItem):
    def __init__(self, x1, y1, x2, y2, color):
        super().__init__(x1, y1, x2, y2)
        self.setPen(QtGui.QPen(color, 2))
    def updateLine(self, x1, y1, x2, y2):
        self.setLine(x1, y1, x2, y2)
