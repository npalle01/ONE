#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Module: brm_tool_ui_dialogs.py
Description:
  This module provides the core user interface dialogs used in the BRM Tool.
  It includes:
    • DatabaseConnectionDialog: Enhanced with auto‑refresh of DSNs and modern styling.
    • LoginDialog: Secure login with masked password field and real‑time notification feedback.
    • OnboardingWizard: A step‑by‑step wizard with animated transitions and improved UI text.
    • show_notification: A helper function that leverages system notifications (or a popup)
      to inform users of key events.
    
Dependencies:
  • PyQt5 (QtWidgets, QtCore, QtGui), pyodbc, standard libraries.
  
Usage:
  Import this module as “brm_tool_ui_dialogs” and call the dialog classes as needed.
"""

import sys
import pyodbc
import json
import logging
from datetime import datetime

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer, QDateTime
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QComboBox,
    QLineEdit, QMessageBox, QCalendarWidget, QTimeEdit
)

# Module-level logger
logger = logging.getLogger("brm_tool_ui_dialogs")
logger.setLevel(logging.DEBUG)

# -----------------------------------------------------------------------------
# Helper: System Notification
# -----------------------------------------------------------------------------
def show_notification(message, title="Notification"):
    """
    Displays a popup notification message. For production, this could integrate with OS tray notifications.
    Here we use QMessageBox.information as a placeholder.
    """
    msg_box = QMessageBox()
    msg_box.setWindowTitle(title)
    msg_box.setText(message)
    msg_box.setIcon(QMessageBox.Information)
    msg_box.exec_()

# -----------------------------------------------------------------------------
# Database Connection Dialog with Auto‑Refresh of DSN List
# -----------------------------------------------------------------------------
class DatabaseConnectionDialog(QDialog):
    """
    Enhanced dialog for database connection.
    Auto‑refreshes the available DSN list every 60 seconds.
    Modern UI layout and improved error handling.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.connection = None
        self.setWindowTitle("Database Connection")
        self.resize(450, 220)
        self.setWindowIcon(QIcon("icons/db_connect.png"))

        main_layout = QVBoxLayout(self)

        # Instruction label
        lbl = QLabel("Select an ODBC DSN or provide a custom connection string:")
        lbl.setStyleSheet("font-size: 13px;")
        main_layout.addWidget(lbl)

        # DSN combo box with auto‑refresh timer
        self.dsn_combo = QComboBox()
        self.refresh_dsns()
        main_layout.addWidget(self.dsn_combo)

        # Timer for DSN refresh (every 60 sec)
        self.dsn_timer = QTimer(self)
        self.dsn_timer.timeout.connect(self.refresh_dsns)
        self.dsn_timer.start(60000)

        # Custom connection string field
        self.conn_str_edit = QLineEdit()
        self.conn_str_edit.setPlaceholderText("Or enter custom ODBC connection string")
        main_layout.addWidget(self.conn_str_edit)

        # Buttons layout
        btn_layout = QHBoxLayout()
        self.connect_btn = QPushButton("Connect")
        self.connect_btn.clicked.connect(self.accept)
        btn_layout.addWidget(self.connect_btn)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(cancel_btn)
        main_layout.addLayout(btn_layout)

        self.setLayout(main_layout)

    def refresh_dsns(self):
        """
        Refreshes the DSN list from pyodbc.dataSources() and populates the combo box.
        """
        try:
            self.dsn_combo.clear()
            dsn_dict = pyodbc.dataSources()
            for dsn_name, driver in dsn_dict.items():
                if "SQL SERVER" in driver.upper():
                    self.dsn_combo.addItem(f"ODBC DSN: {dsn_name}", dsn_name)
            logger.info("DSN list refreshed successfully.")
        except Exception as ex:
            logger.error(f"Error refreshing DSN list: {ex}")
            show_notification(f"Error refreshing DSN list: {ex}", "DSN Refresh Error")

    def get_connection(self):
        """
        Returns a pyodbc connection object.
        If a custom connection string is provided, it overrides DSN selection.
        """
        override = self.conn_str_edit.text().strip()
        if override:
            conn_str = override
        else:
            choice = self.dsn_combo.currentData()
            if not choice:
                QMessageBox.critical(self, "Connection Error", "No DSN or connection string chosen.")
                return None
            conn_str = f"DSN={choice};Trusted_Connection=yes;"
        try:
            connection = pyodbc.connect(conn_str)
            show_notification("Database connection established successfully.", "Connection Success")
            return connection
        except Exception as ex:
            QMessageBox.critical(self, "Connection Error", str(ex))
            logger.error(f"Error connecting to DB: {ex}")
            return None

# -----------------------------------------------------------------------------
# Login Dialog
# -----------------------------------------------------------------------------
class LoginDialog(QDialog):
    """
    Dialog for user login.
    Provides fields for username and password (masked).
    Validates against the USERS table in the connected database.
    Shows notification feedback.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = None
        self.user_group = None
        self.setWindowTitle("User Login")
        self.resize(320, 180)
        self.setWindowIcon(QIcon("icons/login.png"))

        main_layout = QVBoxLayout(self)

        # Username field
        user_label = QLabel("Username:")
        self.user_edit = QLineEdit()
        self.user_edit.setPlaceholderText("Enter username")
        main_layout.addWidget(user_label)
        main_layout.addWidget(self.user_edit)

        # Password field
        pass_label = QLabel("Password:")
        self.pass_edit = QLineEdit()
        self.pass_edit.setPlaceholderText("Enter password")
        self.pass_edit.setEchoMode(QLineEdit.Password)
        main_layout.addWidget(pass_label)
        main_layout.addWidget(self.pass_edit)

        # Login button
        login_btn = QPushButton("Login")
        login_btn.clicked.connect(self.do_login)
        main_layout.addWidget(login_btn)

        self.setLayout(main_layout)

    def do_login(self):
        """
        Validates user credentials against the USERS table.
        On success, sets user_id and user_group.
        """
        username = self.user_edit.text().strip()
        password = self.pass_edit.text().strip()
        if not username or not password:
            QMessageBox.warning(self, "Input Error", "Please enter both username and password.")
            return

        try:
            c = self.connection.cursor()
            c.execute("""
                SELECT USER_ID, USER_GROUP FROM USERS
                WHERE USERNAME = ? AND PASSWORD = ?
            """, (username, password))
            row = c.fetchone()
            if row:
                self.user_id = row[0]
                self.user_group = row[1]
                show_notification(f"Welcome, {username}!", "Login Success")
                self.accept()
            else:
                QMessageBox.warning(self, "Login Failed", "Invalid username or password.")
        except Exception as ex:
            QMessageBox.critical(self, "Login Error", str(ex))
            logger.error(f"Error during login: {ex}")

# -----------------------------------------------------------------------------
# Onboarding Wizard Dialog
# -----------------------------------------------------------------------------
class OnboardingWizard(QDialog):
    """
    A multi-step onboarding wizard for new users.
    Provides guided steps with animated transitions.
    Steps include:
      1. Navigating to Group Management to add a group.
      2. Navigating to Business Rules to add a new rule.
      3. Navigating to Scheduling to set up a new schedule.
    Once complete, displays a completion message.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.current_step = 0
        self.setWindowTitle("Welcome Wizard")
        self.resize(420, 320)
        self.setWindowIcon(QIcon("icons/wizard.png"))

        self.main_layout = QVBoxLayout(self)

        self.step_label = QLabel("Welcome to the Advanced BRM Tool!\nThis wizard will guide you through the basic setup.")
        self.step_label.setAlignment(Qt.AlignCenter)
        self.step_label.setStyleSheet("font-size: 14px; padding: 10px;")
        self.main_layout.addWidget(self.step_label)

        # Next button with animation effect (fade transition)
        self.next_btn = QPushButton("Next")
        self.next_btn.clicked.connect(self.advance_step)
        self.main_layout.addWidget(self.next_btn, alignment=Qt.AlignCenter)

        self.setLayout(self.main_layout)

    def advance_step(self):
        """
        Advances to the next step. On final step, closes the wizard.
        Includes fade-out/in animation using QPropertyAnimation.
        """
        self.current_step += 1
        animation = QtCore.QPropertyAnimation(self.step_label, b"opacity")
        animation.setDuration(300)
        animation.setStartValue(1.0)
        animation.setEndValue(0.0)
        animation.start()
        animation.finished.connect(self.update_step)

    def update_step(self):
        """
        Updates the label text based on the current step.
        """
        if self.current_step == 1:
            self.step_label.setText("Step 1:\nGo to 'Group Management' and click 'Add Group' to create your business group.")
        elif self.current_step == 2:
            self.step_label.setText("Step 2:\nNavigate to 'Business Rules' and click 'Add Rule' to create your first rule.")
        elif self.current_step == 3:
            self.step_label.setText("Step 3:\nOpen 'Scheduling' and click 'Add New Schedule' to schedule your rule.")
        else:
            self.step_label.setText("Setup complete! Enjoy the Advanced BRM Tool.")
            self.next_btn.setText("Finish")
            self.next_btn.clicked.disconnect()
            self.next_btn.clicked.connect(self.accept)
        # Fade back in
        animation = QtCore.QPropertyAnimation(self.step_label, b"opacity")
        animation.setDuration(300)
        animation.setStartValue(0.0)
        animation.setEndValue(1.0)
        animation.start()

# -----------------------------------------------------------------------------
# Expose UI Dialog Classes
# -----------------------------------------------------------------------------
__all__ = [
    "DatabaseConnectionDialog", "LoginDialog", "OnboardingWizard", "show_notification"
]

if __name__ == "__main__":
    # For testing module standalone
    app = QtWidgets.QApplication(sys.argv)
    dlg = DatabaseConnectionDialog()
    if dlg.exec_() == QDialog.Accepted:
        conn = dlg.get_connection()
        if conn:
            login = LoginDialog(conn)
            if login.exec_() == QDialog.Accepted:
                onboard = OnboardingWizard(conn)
                onboard.exec_()
    sys.exit(app.exec_())
