#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
BRM Tool – Final Integration Module

This module integrates all advanced enhancements for the BRM tool including:
  • Core functionality: database connection, logging, login, SQL parsing, locking, etc.
  • Multi‑step BFS rule execution and multi‑level approvals.
  • Advanced scheduling with auto‑refresh.
  • Audit logging, rule search, version history with diffs.
  • Business rule dashboard & rule editor.
  • Global/Critical administration, hierarchical drag‐n‑drop re‐parenting.
  • Advanced lineage visualization (ER–style, flow arrows, colour–coded, live status).
  • Metrics, control tables, group management, and user management.
  • Custom rule groups and alerts/dashboards.
  • SQL-to‑Business Language Converter with real‑time notifications.
  
All modules are assumed to be available in separate files (10 modules total). This file is the main entry point.
"""

# =====================================================
# Standard and Third-Party Imports
# =====================================================
import sys
import json
import math
import logging
import pyodbc
import sqlparse
import re
import csv
import smtplib
from datetime import datetime, timedelta
from collections import deque
from email.mime.text import MIMEText

# PyQt5 Imports
from PyQt5.QtCore import Qt, QTimer, QDateTime
from PyQt5.QtGui import QColor, QBrush, QPen
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QPushButton, QTabWidget, QComboBox, QMessageBox, QLineEdit, QDialog,
    QTableWidget, QTableWidgetItem, QPlainTextEdit, QGroupBox, QCalendarWidget,
    QAbstractItemView, QInputDialog, QAction
)

# =====================================================
# Module Imports – (Assume each is a separate file)
# =====================================================
from database_connection_dialog import DatabaseConnectionDialog
from login_dialog import LoginDialog
from sql_parser_module import parse_sql_dependencies, detect_operation_type
from db_helpers import fetch_all_dict, fetch_one_dict, insert_audit_log
from locking_module import lock_rule_for_edit, unlock_rule

from multi_step_approval_tab import MultiStepApprovalTab
from bfs_execution import execute_rules_with_conflicts_composites_bfs

from schedule_management_tab import ScheduleManagementTab
from schedule_management_module import check_due_schedules

from audit_log_viewer import AuditLogViewer
from rule_search_dialog import RuleSearchDialog
from version_history_dialog import VersionHistoryDialog
from rule_dashboard import RuleDashboard
from rule_editor_dialog import RuleEditorDialog

from global_critical_admin_tab import GlobalCriticalAdminTab
from hierarchy_view_tab import HierarchyViewTab
from enhanced_lineage_graph_widget import EnhancedLineageGraphWidget

from metrics_dashboard_tab import MetricsDashboardTab
from ctrl_tables_tab import CtrlTablesTab
from group_management_tab import GroupManagementTab
from user_management_tab import UserManagementTab

from custom_rule_groups_tab import CustomRuleGroupEnhancedTab
from alerts_dashboards_tab import AlertsAndDashboardsTab

from sql_to_business_converter import SqlToBusinessLanguageConverterTab

from chain_simulation_module import ChainSimulationDialog
from group_simulation_module import GroupSimulationDialog
from data_validations_module import run_all_data_validations

# =====================================================
# Logging Configuration
# =====================================================
logging.basicConfig(
    filename='brm_tool_production.log',
    level=logging.DEBUG,
    format='%(asctime)s:%(levelname)s:%(name)s:%(message)s'
)
logger = logging.getLogger(__name__)

# =====================================================
# Main Application Window
# =====================================================
class BRMTool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BRM Tool – Final Integration")
        self.resize(1300, 850)

        # Core variables
        self.connection = None
        self.user_id = None
        self.logged_in_username = None
        self.user_group = None

        # 1. Database Connection
        dbdlg = DatabaseConnectionDialog()
        if dbdlg.exec_() == QDialog.Accepted:
            self.connection = dbdlg.get_connection()
            if not self.connection:
                sys.exit(1)
        else:
            sys.exit(0)

        # 2. User Login
        logdlg = LoginDialog(self.connection)
        if logdlg.exec_() != QDialog.Accepted:
            sys.exit(0)
        self.user_id = logdlg.user_id
        self.user_group = logdlg.user_group

        # Retrieve username
        c = self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (self.user_id,))
        row = c.fetchone()
        self.logged_in_username = row[0] if row else "UnknownUser"

        # Optional: OnboardingWizard may be launched here

        # Initialize UI
        self.init_ui()

    def init_ui(self):
        # Menu Bar Setup
        menubar = self.menuBar()
        fileMenu = menubar.addMenu("File")

        syncAct = QAction("Sync Metadata", self)
        syncAct.triggered.connect(self.sync_metadata)
        fileMenu.addAction(syncAct)

        dvAct = QAction("Run Data Validations", self)
        dvAct.triggered.connect(self.run_data_validations)
        fileMenu.addAction(dvAct)

        perfAct = QAction("Show Performance Trends", self)
        perfAct.triggered.connect(self.show_performance_trends)
        fileMenu.addAction(perfAct)

        chainSimAct = QAction("Simulate Rule Chain", self)
        chainSimAct.triggered.connect(self.simulate_rule_chain)
        fileMenu.addAction(chainSimAct)

        groupSimAct = QAction("Simulate Custom Group", self)
        groupSimAct.triggered.connect(self.simulate_custom_group)
        fileMenu.addAction(groupSimAct)

        helpMenu = menubar.addMenu("Help")
        helpAct = QAction("Show Help", self)
        helpAct.triggered.connect(self.show_help)
        helpMenu.addAction(helpAct)

        toolsMenu = menubar.addMenu("Tools")
        auditAct = QAction("View Audit Logs", self)
        auditAct.triggered.connect(self.open_audit_logs)
        toolsMenu.addAction(auditAct)
        searchAct = QAction("Search Rules", self)
        searchAct.triggered.connect(self.open_rule_search)
        toolsMenu.addAction(searchAct)
        versionAct = QAction("Version History", self)
        versionAct.triggered.connect(self.open_version_history)
        toolsMenu.addAction(versionAct)

        # Central Widget and Layout
        centralWidget = QWidget()
        mainLayout = QVBoxLayout(centralWidget)

        # Impersonation (Admin only)
        if self.user_group == "Admin":
            impLayout = QHBoxLayout()
            self.impersonationCombo = QComboBox()
            self.load_impersonation_combo()
            impBtn = QPushButton("Switch User")
            impBtn.clicked.connect(self.switch_user)
            impLayout.addWidget(QLabel("Impersonate:"))
            impLayout.addWidget(self.impersonationCombo)
            impLayout.addWidget(impBtn)
            impLayout.addStretch()
            mainLayout.addLayout(impLayout)

        # Tabs
        self.tabs = QTabWidget()

        # Tab: Business Rules Dashboard
        self.ruleDashboard = RuleDashboard(self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.ruleDashboard, "Business Rules")

        # Tab: Approvals
        self.approvalTab = MultiStepApprovalTab(self.connection, self.logged_in_username, self.user_group)
        self.tabs.addTab(self.approvalTab, "Approvals")

        # Tab: Global/Critical Admin (Admin only)
        if self.user_group == "Admin":
            self.gcrAdminTab = GlobalCriticalAdminTab(self, self.connection, self.user_group)
            self.tabs.addTab(self.gcrAdminTab, "Global/Critical Admin")

        # Tab: Hierarchy View
        self.hierarchyTab = HierarchyViewTab(self.connection)
        self.tabs.addTab(self.hierarchyTab, "Hierarchy")

        # Tab: Enhanced Lineage Visualization
        self.lineageTab = EnhancedLineageGraphWidget(self.connection)
        self.tabs.addTab(self.lineageTab, "Lineage")

        # Tab: Custom Rule Groups
        self.customGroupTab = CustomRuleGroupEnhancedTab(self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.customGroupTab, "Custom Groups")

        # Tab: Scheduling
        self.scheduleTab = ScheduleManagementTab(self.connection)
        self.tabs.addTab(self.scheduleTab, "Scheduling")

        # Tab: Control Tables
        self.ctrlTablesTab = CtrlTablesTab(self.connection)
        self.tabs.addTab(self.ctrlTablesTab, "Control Tables")

        # Tab: Metrics Dashboard
        self.metricsTab = MetricsDashboardTab(self.connection)
        self.tabs.addTab(self.metricsTab, "Metrics")

        # Tab: Alerts & Dashboards
        self.alertsTab = AlertsAndDashboardsTab(self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.alertsTab, "Alerts/Dashboards")

        # Tab: Group Management
        self.groupMgmtTab = GroupManagementTab(self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.groupMgmtTab, "Group Management")

        # Tab: User Management (Admin only)
        if self.user_group == "Admin":
            self.userMgmtTab = UserManagementTab(self.connection)
            self.tabs.addTab(self.userMgmtTab, "User Management")

        # Tab: SQL to Business Language Converter
        self.sqlToBusinessTab = SqlToBusinessLanguageConverterTab(self.connection)
        self.tabs.addTab(self.sqlToBusinessTab, "SQL → Business Language")

        mainLayout.addWidget(self.tabs)
        centralWidget.setLayout(mainLayout)
        self.setCentralWidget(centralWidget)

        # Timers for auto‑refresh
        self.approvalTimer = QTimer(self)
        self.approvalTimer.timeout.connect(self.approvalTab.load_approvals)
        self.approvalTimer.start(5000)

        self.scheduleTimer = QTimer(self)
        self.scheduleTimer.timeout.connect(self.check_schedules)
        self.scheduleTimer.start(60000)

    def load_impersonation_combo(self):
        c = self.connection.cursor()
        c.execute("SELECT USER_ID, USERNAME, USER_GROUP FROM USERS ORDER BY USER_ID")
        for uid, uname, ugroup in c.fetchall():
            self.impersonationCombo.addItem(f"{uname} ({ugroup})", (uid, ugroup))

    def switch_user(self):
        data = self.impersonationCombo.currentData()
        if not data:
            return
        new_uid, new_group = data
        if new_uid == self.user_id and new_group == self.user_group:
            return
        self.user_id = new_uid
        self.user_group = new_group
        c = self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (self.user_id,))
        row = c.fetchone()
        self.logged_in_username = row[0] if row else "UnknownUser"
        QMessageBox.information(self, "Switched", f"Now impersonating {self.logged_in_username} ({self.user_group}).")
        self.approvalTab.logged_in_username = self.logged_in_username
        self.approvalTab.user_group = self.user_group
        self.approvalTab.load_approvals()
        self.ruleDashboard.user_id = self.user_id
        self.ruleDashboard.user_group = self.user_group
        self.ruleDashboard.load_rules()
        if hasattr(self, "gcrAdminTab"):
            self.gcrAdminTab.load_rule_list()
            self.gcrAdminTab.load_link_view()
        if hasattr(self, "hierarchyTab"):
            self.hierarchyTab.load_hierarchy()
        if hasattr(self, "alertsTab"):
            self.alertsTab.check_alerts()
        if hasattr(self, "groupMgmtTab"):
            self.groupMgmtTab.user_id = self.user_id
            self.groupMgmtTab.user_group = self.user_group
            self.groupMgmtTab.load_data()
        if hasattr(self, "userMgmtTab"):
            self.userMgmtTab.load_users()

    def sync_metadata(self):
        from sync_metadata_module import sync_metadata_improved
        msg = sync_metadata_improved(self.connection)
        QMessageBox.information(self, "Sync Metadata", msg)

    def run_data_validations(self):
        run_all_data_validations(self.connection)
        QMessageBox.information(self, "Data Validations", "Data validations executed.")

    def show_performance_trends(self):
        dlg = QDialog(self)
        dlg.setWindowTitle("Performance Trends")
        dlg.resize(800,600)
        layout = QVBoxLayout(dlg)
        perfWidget = MetricsDashboardTab(self.connection)
        layout.addWidget(perfWidget)
        closeBtn = QPushButton("Close")
        closeBtn.clicked.connect(dlg.close)
        layout.addWidget(closeBtn)
        dlg.exec_()

    def simulate_rule_chain(self):
        dlg = ChainSimulationDialog(self.connection, self)
        dlg.exec_()

    def simulate_custom_group(self):
        dlg = GroupSimulationDialog(self.connection, self)
        dlg.exec_()

    def open_audit_logs(self):
        dlg = AuditLogViewer(self.connection, self.user_group, self)
        dlg.exec_()

    def open_rule_search(self):
        dlg = RuleSearchDialog(self.connection, self.user_group, self)
        dlg.exec_()

    def open_version_history(self):
        rid, ok = QInputDialog.getInt(self, "Version History", "Enter Rule ID:")
        if ok:
            dlg = VersionHistoryDialog(self.connection, rid, self)
            dlg.exec_()

    def check_schedules(self):
        check_due_schedules(self.connection)
        self.scheduleTab.load_schedules()

    def show_help(self):
        QMessageBox.information(self, "Help",
            f"BRM Tool – Final Advanced Version\nLogged in as: {self.logged_in_username} ({self.user_group})\n"
            "Use the tabs to manage business rules, approvals, scheduling, lineage, custom groups, metrics, etc.")

    def closeEvent(self, event):
        if self.connection:
            try:
                self.connection.close()
            except Exception as ex:
                logger.error(f"Error closing connection: {ex}")
        event.accept()

# =====================================================
# Main Entrypoint
# =====================================================
if __name__ == "__main__":
    app = QApplication(sys.argv)
    tool = BRMTool()
    tool.show()
    sys.exit(app.exec_())