#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_data_validations.py
Description:
  Provides a comprehensive data validation manager for the BRM Tool. 
  It includes:
   • A `DataValidationManagerTab` UI widget for CRUD on validation rules.
   • Functions to run validations for a single table or all tables, returning pass/fail.
   • Logging of results into DATA_VALIDATION_LOGS with timestamp, pass/fail, details.
   • Integration hooks so BFS or scheduling can call `run_validations_for_rule` or `run_all_validations`.

This module is designed to integrate seamlessly with:
 - brm_core_foundation (for logger, fetch helpers, etc.)
 - brm_rule_engine or scheduling modules if you want to incorporate validations into BFS.
"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, json, logging, re
from datetime import datetime
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QTableWidget, QTableWidgetItem,
    QLineEdit, QInputDialog, QMessageBox, QComboBox, QLabel
)
from PyQt5.QtCore import Qt
from brm_core_foundation import logger, fetch_all_dict, fetch_one_dict

def run_single_validation(conn, validation_id):
    c = conn.cursor()
    c.execute("""
        SELECT VALIDATION_ID, TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS
        FROM DATA_VALIDATIONS WHERE VALIDATION_ID=?
    """, (validation_id,))
    row = c.fetchone()
    if not row:
        logger.error(f"Validation rule not found (ID={validation_id}).")
        return (False, f"Validation rule not found (ID={validation_id}).")
    vid, tbl, col, vtype, params = row
    try:
        result = _execute_validation_check(conn, tbl, col, vtype, params)
    except Exception as ex:
        result = (False, str(ex))
    c2 = conn.cursor()
    res_flag = "PASS" if result[0] else "FAIL"
    c2.execute("""
        INSERT INTO DATA_VALIDATION_LOGS(VALIDATION_ID, RESULT_FLAG, DETAILS, VALIDATION_TIMESTAMP, TABLE_NAME, COLUMN_NAME)
        VALUES(?, ?, ?, GETDATE(), ?, ?)
    """, (vid, res_flag, result[1], tbl, col))
    conn.commit()
    return result

def _execute_validation_check(conn, table_name, column_name, validation_type, params):
    vtype = validation_type.upper().strip()
    c = conn.cursor()
    if not table_name or not column_name:
        return (False, "Invalid table/column.")
    if vtype == "NOT NULL":
        c.execute(f"SELECT COUNT(*) FROM {table_name} WHERE {column_name} IS NULL")
        cnt = c.fetchone()[0]
        return (cnt == 0, f"{cnt} NULL values found in {table_name}.{column_name}" if cnt > 0 else "No NULLs found.")
    elif vtype == "RANGE":
        parts = params.split(",")
        if len(parts) != 2:
            return (False, "Invalid range parameters; expected format 'min,max'.")
        try:
            min_val, max_val = float(parts[0]), float(parts[1])
        except:
            return (False, "Range parameters must be numeric.")
        c.execute(f"SELECT COUNT(*) FROM {table_name} WHERE {column_name} < {min_val} OR {column_name} > {max_val}")
        out_of_range = c.fetchone()[0]
        return (out_of_range == 0, f"{out_of_range} values out of range [{min_val}, {max_val}]." if out_of_range > 0 else "All values within range.")
    elif vtype == "REGEX":
        pattern = re.compile(params or ".*")
        c.execute(f"SELECT {column_name} FROM {table_name}")
        rows = c.fetchall()
        mismatch = 0
        for (val,) in rows:
            if val is None or not pattern.match(str(val)):
                mismatch += 1
        return (mismatch == 0, f"{mismatch} rows did not match regex '{params}'." if mismatch > 0 else "All rows matched regex.")
    else:
        return (False, f"Unknown validation type '{validation_type}'.")

def run_validations_for_table(conn, table_name):
    c = conn.cursor()
    c.execute("SELECT VALIDATION_ID FROM DATA_VALIDATIONS WHERE LOWER(TABLE_NAME)=LOWER(?)", (table_name,))
    results = []
    for (vid,) in c.fetchall():
        results.append(run_single_validation(conn, vid))
    return results

def run_all_validations(conn):
    c = conn.cursor()
    c.execute("SELECT VALIDATION_ID FROM DATA_VALIDATIONS ORDER BY VALIDATION_ID")
    results = []
    for (vid,) in c.fetchall():
        pf, dt = run_single_validation(conn, vid)
        c2 = conn.cursor()
        c2.execute("SELECT TABLE_NAME, COLUMN_NAME FROM DATA_VALIDATIONS WHERE VALIDATION_ID=?", (vid,))
        row = c2.fetchone()
        tbl, col = (row[0], row[1]) if row else ("?", "?")
        results.append((vid, tbl, col, pf, dt))
    return results

def run_validations_for_rule(conn, rule_id):
    c = conn.cursor()
    c.execute("SELECT DISTINCT DATABASE_NAME, TABLE_NAME FROM BRM_RULE_TABLE_DEPENDENCIES WHERE RULE_ID=?", (rule_id,))
    all_pass = True
    fail_details = []
    for (dbn, tbn) in c.fetchall():
        if not tbn:
            continue
        fulltbl = f"{dbn}.{tbn}".lower()
        table_results = run_validations_for_table(conn, fulltbl)
        for (vid, pf, dt) in [(r[0], r[3], r[4]) for r in run_all_validations(conn) if r[1].lower() == fulltbl]:
            if not pf:
                all_pass = False
                fail_details.append((vid, dt))
    return (all_pass, fail_details)

class DataValidationManagerTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.init_ui()
        self.load_validations()
    def init_ui(self):
        layout = QVBoxLayout(self)
        self.val_table = QTableWidget(0, 5)
        self.val_table.setHorizontalHeaderLabels(["ValidationID", "TableName", "ColumnName", "Type", "Params"])
        self.val_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.val_table)
        btn_h = QHBoxLayout()
        add_btn = QPushButton("Add Validation")
        add_btn.clicked.connect(self.add_validation)
        btn_h.addWidget(add_btn)
        del_btn = QPushButton("Remove Validation")
        del_btn.clicked.connect(self.remove_validation)
        btn_h.addWidget(del_btn)
        run_btn = QPushButton("Run All Validations")
        run_btn.clicked.connect(self.run_all)
        btn_h.addWidget(run_btn)
        ref_btn = QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_validations)
        btn_h.addWidget(ref_btn)
        btn_h.addStretch()
        layout.addLayout(btn_h)
        self.setLayout(layout)
    def load_validations(self):
        self.val_table.setRowCount(0)
        c = self.connection.cursor()
        c.execute("SELECT VALIDATION_ID, TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS FROM DATA_VALIDATIONS ORDER BY VALIDATION_ID")
        for row in c.fetchall():
            r_i = self.val_table.rowCount()
            self.val_table.insertRow(r_i)
            for col, val in enumerate(row):
                self.val_table.setItem(r_i, col, QTableWidgetItem(str(val) if val is not None else ""))
    def add_validation(self):
        tbl, ok = QInputDialog.getText(self, "Add Validation", "Table name (e.g., 'dbo.Customers'):")
        if not ok or not tbl.strip():
            return
        col, ok2 = QInputDialog.getText(self, "Column", "Column name:")
        if not ok2 or not col.strip():
            return
        vtype, ok3 = QInputDialog.getText(self, "Validation Type", "(NOT NULL, RANGE, REGEX, ...)")
        if not ok3 or not vtype.strip():
            return
        params, ok4 = QInputDialog.getText(self, "Params", "Example for RANGE: '0,100' / for REGEX: '^[A-Z]+$'")
        params = params.strip() if ok4 else ""
        c = self.connection.cursor()
        try:
            c.execute("INSERT INTO DATA_VALIDATIONS(TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS, CREATED_TIMESTAMP) VALUES(?,?,?,?,GETDATE())", (tbl.strip(), col.strip(), vtype.strip(), params))
            self.connection.commit()
            QMessageBox.information(self, "Added", "Validation rule added.")
            self.load_validations()
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))
    def remove_validation(self):
        row = self.val_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "None", "No validation selected.")
            return
        vid_item = self.val_table.item(row, 0)
        if not vid_item:
            return
        vid = int(vid_item.text())
        if QMessageBox.question(self, "Confirm", f"Remove validation ID={vid}?") != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM DATA_VALIDATIONS WHERE VALIDATION_ID=?", (vid,))
            self.connection.commit()
            QMessageBox.information(self, "Removed", "Validation rule removed.")
            self.load_validations()
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))
    def run_all(self):
        results = run_all_validations(self.connection)
        fails = [r for r in results if not r[3]]
        if fails:
            fail_str = "\n".join([f"ID={f[0]} => {f[4]}" for f in fails])
            QMessageBox.warning(self, "Validation Results", f"Some validations failed:\n{fail_str}")
        else:
            QMessageBox.information(self, "Validation Results", "All validations passed.")

