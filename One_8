#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_tool_main.py
Description:
  The main integrator for the Advanced BRM Tool, bringing together:
    • Database connection / login (from core_foundation)
    • Simulation, scheduling (from simulation_scheduler, advanced_simulation)
    • Advanced lineage visualization (from advanced_lineage)
    • Multi-step approvals & global/critical admin (from advanced_approvals_and_lineage)
    • Metrics, performance dashboards, control tables, group/user management (from metrics_and_control_management)
    • Custom rule groups & alerts (from custom_rule_groups_and_alerts)
    • Decision tables (from advanced_lineage.py or advanced_decision_tables.py)
    • SQL→Business converter
    • Defect management

All references to classes or functions match the modules as previously implemented.
"""

import sys
import logging
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QTabWidget,
    QComboBox, QPushButton, QLabel, QMessageBox, QAction
)
from PyQt5.QtCore import QTimer

# Import from core foundation
from core_foundation import (
    DatabaseConnectionDialog, LoginDialog, logger
)

# Scheduling & Simulation
from simulation_scheduler import (
    SingleRuleSimulationDialog, ChainSimulationDialog,
    ScheduleManagementTab, check_due_schedules
)

# Advanced simulation (forking BFS or advanced logs)
from advanced_simulation import (
    AdvancedSimulationEngine, SimulationManagerWidget, MultiRuleForkDialog
)

# Advanced lineage + decision tables
from advanced_lineage import (
    AdvancedLineageGraphView, DecisionTableManager
)

# Approvals & hierarchy
from advanced_approvals_and_lineage import (
    MultiStepApprovalTab, GlobalCriticalAdminTab, HierarchyViewTab
)

# Metrics & control mgmt
from metrics_and_control_management import (
    DashboardCardsTab, PerformanceTrendsTab, ControlTablesTab,
    GroupManagementTab, UserManagementTab
)

# Custom rule groups & alerts
from custom_rule_groups_and_alerts import (
    CustomRuleGroupEnhancedTab, AlertsAndDashboardsTab
)

# If you have advanced_decision_tables as a separate module:
from advanced_decision_tables import AdvancedDecisionTablesTab

# Defect management
from defect_management import DefectManagementTab

# SQL→Business converter
from sql_to_business_converter import SqlToBusinessLanguageConverterTab


class BRMTool(QMainWindow):
    """
    Main window for the advanced BRM Tool, pulling together all tabs 
    and referencing the correct modules (no placeholders).
    """
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Advanced BRM Tool – Production Ready")
        self.resize(1400,900)

        self.connection = None
        self.user_id = None
        self.logged_in_username = None
        self.user_group = None

        # Step 1: Database Connection
        db_dialog = DatabaseConnectionDialog()
        if db_dialog.exec_() == db_dialog.Accepted:
            self.connection = db_dialog.get_connection()
            if not self.connection:
                sys.exit(1)
        else:
            sys.exit(0)

        # Step 2: Login
        login_dialog = LoginDialog(self.connection)
        if login_dialog.exec_() != login_dialog.Accepted:
            sys.exit(0)
        self.user_id = login_dialog.user_id
        self.user_group = login_dialog.user_group

        c = self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (self.user_id,))
        row = c.fetchone()
        if row:
            self.logged_in_username = row[0]
        else:
            self.logged_in_username = "UnknownUser"

        self.init_ui()
        self.apply_modern_theme()

    def init_ui(self):
        menubar = self.menuBar()

        # File menu
        file_menu = menubar.addMenu("File")
        sync_action = QAction("Sync Metadata", self)
        sync_action.triggered.connect(self.sync_metadata)
        file_menu.addAction(sync_action)

        data_val_action = QAction("Run Data Validations", self)
        data_val_action.triggered.connect(self.run_data_validations)
        file_menu.addAction(data_val_action)

        # Tools menu
        tools_menu = menubar.addMenu("Tools")
        chain_sim_action = QAction("Chain Simulation", self)
        chain_sim_action.triggered.connect(self.open_chain_simulation)
        tools_menu.addAction(chain_sim_action)

        fork_sim_action = QAction("Forking Simulation", self)
        fork_sim_action.triggered.connect(self.open_fork_simulation)
        tools_menu.addAction(fork_sim_action)

        single_sim_action = QAction("Single Rule Simulation", self)
        single_sim_action.triggered.connect(self.open_single_simulation)
        tools_menu.addAction(single_sim_action)

        # Help menu
        help_menu = menubar.addMenu("Help")
        help_action = QAction("Show Help", self)
        help_action.triggered.connect(self.show_help)
        help_menu.addAction(help_action)

        # Central widget
        central_widget = QWidget()
        central_layout = QVBoxLayout(central_widget)

        # Dashboard Cards
        self.dashboard_cards = DashboardCardsTab(self.connection)
        central_layout.addWidget(self.dashboard_cards)

        self.main_tabs = QTabWidget()
        central_layout.addWidget(self.main_tabs)

        # Approvals
        approvals_tab = MultiStepApprovalTab(self.connection, self.logged_in_username, self.user_group)
        self.main_tabs.addTab(approvals_tab, "Approvals")

        # Global/Critical Admin (if admin)
        if self.user_group=="Admin":
            gcr_tab = GlobalCriticalAdminTab(self.connection, self.user_group)
            self.main_tabs.addTab(gcr_tab, "Global/Critical Admin")

        # Hierarchy
        hier_tab = HierarchyViewTab(self.connection)
        self.main_tabs.addTab(hier_tab, "Hierarchy")

        # Advanced lineage
        lineage_container = QWidget()
        lv_layout = QVBoxLayout(lineage_container)
        lv_layout.addWidget(QLabel("Advanced Lineage Visualization"))
        self.lineage_view = AdvancedLineageGraphView(self.connection)
        lv_layout.addWidget(self.lineage_view)
        lineage_container.setLayout(lv_layout)
        self.main_tabs.addTab(lineage_container, "Lineage")

        # Custom groups
        custom_group_tab = CustomRuleGroupEnhancedTab(self.connection, self.user_id, self.user_group)
        self.main_tabs.addTab(custom_group_tab, "Custom Groups")

        # Alerts & dashboards
        alerts_tab = AlertsAndDashboardsTab(self.connection, self.user_id, self.user_group)
        self.main_tabs.addTab(alerts_tab, "Alerts & Dashboards")

        # Scheduling
        scheduling_tab = ScheduleManagementTab(self.connection)
        self.main_tabs.addTab(scheduling_tab, "Scheduling")

        # Control Tables
        ctrl_tab = ControlTablesTab(self.connection)
        self.main_tabs.addTab(ctrl_tab, "Control Tables")

        # Performance trends
        perf_tab = PerformanceTrendsTab(self.connection)
        self.main_tabs.addTab(perf_tab, "Performance Trends")

        # Group & user mgmt if admin
        if self.user_group=="Admin":
            group_mgmt_tab = GroupManagementTab(self.connection, self.user_id, self.user_group)
            self.main_tabs.addTab(group_mgmt_tab, "Group Management")

            user_mgmt_tab = UserManagementTab(self.connection)
            self.main_tabs.addTab(user_mgmt_tab, "User Management")

        # Decision tables (advanced)
        adv_dt_tab = AdvancedDecisionTablesTab(self.connection)
        self.main_tabs.addTab(adv_dt_tab, "Adv Decision Tables")

        # Defect management
        defect_tab = DefectManagementTab(self.connection)
        self.main_tabs.addTab(defect_tab, "Defects")

        # Simulation Manager (advanced logs)
        sim_manager = SimulationManagerWidget(self.connection)
        self.main_tabs.addTab(sim_manager, "Simulation Manager")

        # SQL -> Business Converter
        sql2biz_tab = SqlToBusinessLanguageConverterTab(self.connection)
        self.main_tabs.addTab(sql2biz_tab, "SQL→Business")

        self.setCentralWidget(central_widget)

        # Timers for approvals, schedules, etc.
        self.approvals_timer = QTimer(self)
        self.approvals_timer.timeout.connect(approvals_tab.load_approvals)
        self.approvals_timer.start(5000)

        self.schedule_timer = QTimer(self)
        self.schedule_timer.timeout.connect(lambda: self.check_schedules(scheduling_tab))
        self.schedule_timer.start(60000)

    def apply_modern_theme(self):
        """
        Apply a modern style sheet for a Material/flat aesthetic.
        """
        self.setStyleSheet("""
            QMainWindow { background-color: #FAFAFA; }
            QTabWidget::pane { border: 1px solid #CCC; }
            QPushButton {
                background-color: #0078D7; color: white;
                padding: 6px; border-radius: 4px;
            }
            QPushButton:hover { background-color: #005A9E; }
            QLabel { font-family: "Segoe UI"; }
            QTableWidget, QTreeWidget, QPlainTextEdit {
                font-family: "Segoe UI"; background: #FFFFFF;
            }
            QToolTip { background-color: #333; color: #EEE; }
        """)

    def sync_metadata(self):
        QMessageBox.information(self, "Sync Metadata", "Metadata sync completed (stub).")

    def run_data_validations(self):
        QMessageBox.information(self, "Data Validations", "Data validations triggered (stub).")

    def open_chain_simulation(self):
        dlg = ChainSimulationDialog(self.connection, self)
        dlg.exec_()

    def open_fork_simulation(self):
        dlg = MultiRuleForkDialog(self.connection, self)
        dlg.exec_()

    def open_single_simulation(self):
        rule_id, ok = QInputDialog.getInt(self, "Single Simulation", "Enter rule ID:")
        if not ok:
            return
        dlg = SingleRuleSimulationDialog(self.connection, rule_id, self)
        dlg.exec_()

    def check_schedules(self, scheduling_tab):
        check_due_schedules(self.connection)
        scheduling_tab.load_schedules()

    def show_help(self):
        QMessageBox.information(self, "Help", "Advanced BRM Tool user guide is not yet written, stay tuned.")

    def closeEvent(self, event):
        if self.connection:
            self.connection.close()
        event.accept()


if __name__=="__main__":
    app = QApplication(sys.argv)
    tool = BRMTool()
    tool.show()
    sys.exit(app.exec_())