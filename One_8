#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
BRM Tool – Final Integration Module (brm_tool_main.py)

Module Mapping (10 modules):
  1. core_module.py              - Contains: DatabaseConnectionDialog, LoginDialog,
                                   parse_sql_dependencies, detect_operation_type,
                                   fetch_all_dict, fetch_one_dict, insert_audit_log,
                                   lock_rule_for_edit, unlock_rule
  2. approval_module.py          - Contains: MultiStepApprovalTab,
                                   execute_rules_with_conflicts_composites_bfs
  3. scheduling_module.py        - Contains: ScheduleManagementTab, check_due_schedules
  4. audit_module.py             - Contains: AuditLogViewer, RuleSearchDialog, VersionHistoryDialog
  5. rule_management_module.py   - Contains: RuleDashboard, RuleEditorDialog
  6. admin_module.py             - Contains: GlobalCriticalAdminTab, HierarchyViewTab,
                                   EnhancedLineageGraphWidget
  7. metrics_module.py           - Contains: MetricsDashboardTab, CtrlTablesTab
  8. group_user_module.py        - Contains: GroupManagementTab, UserManagementTab
  9. custom_module.py            - Contains: CustomRuleGroupEnhancedTab, AlertsAndDashboardsTab
 10. converter_simulation_module.py
                                   - Contains: SqlToBusinessLanguageConverterTab,
                                     ChainSimulationDialog, GroupSimulationDialog,
                                     run_all_data_validations, sync_metadata_improved

This module integrates all features (including auto‑refresh and real‑time notifications)
and launches the full BRM Tool.
"""

# =====================================================
# Standard and Third-Party Imports
# =====================================================
import sys
import json
import math
import logging
import pyodbc
import sqlparse
import re
import csv
import smtplib
from datetime import datetime, timedelta
from collections import deque
from email.mime.text import MIMEText

# PyQt5 Imports
from PyQt5.QtCore import Qt, QTimer, QDateTime
from PyQt5.QtGui import QColor, QBrush, QPen
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QPushButton, QTabWidget, QComboBox, QMessageBox, QLineEdit, QDialog,
    QTableWidget, QTableWidgetItem, QPlainTextEdit, QGroupBox, QCalendarWidget,
    QAbstractItemView, QInputDialog, QAction
)

# =====================================================
# Module Imports – 10 Modules (Ensure these files are implemented)
# =====================================================
from core_module import (
    DatabaseConnectionDialog, LoginDialog, parse_sql_dependencies,
    detect_operation_type, fetch_all_dict, fetch_one_dict, insert_audit_log,
    lock_rule_for_edit, unlock_rule
)
from approval_module import MultiStepApprovalTab, execute_rules_with_conflicts_composites_bfs
from scheduling_module import ScheduleManagementTab, check_due_schedules
from audit_module import AuditLogViewer, RuleSearchDialog, VersionHistoryDialog
from rule_management_module import RuleDashboard, RuleEditorDialog
from admin_module import GlobalCriticalAdminTab, HierarchyViewTab, EnhancedLineageGraphWidget
from metrics_module import MetricsDashboardTab, CtrlTablesTab
from group_user_module import GroupManagementTab, UserManagementTab
from custom_module import CustomRuleGroupEnhancedTab, AlertsAndDashboardsTab
from converter_simulation_module import (
    SqlToBusinessLanguageConverterTab, ChainSimulationDialog, GroupSimulationDialog,
    run_all_data_validations, sync_metadata_improved
)

# =====================================================
# Logging Configuration
# =====================================================
logging.basicConfig(
    filename='brm_tool_production.log',
    level=logging.DEBUG,
    format='%(asctime)s:%(levelname)s:%(name)s:%(message)s'
)
logger = logging.getLogger(__name__)

# =====================================================
# Main Application Window Class
# =====================================================
class BRMTool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BRM Tool – Final Integrated Advanced Version")
        self.resize(1300, 850)
        self.connection = None
        self.user_id = None
        self.logged_in_username = None
        self.user_group = None

        # 1. Establish Database Connection
        db_dialog = DatabaseConnectionDialog()
        if db_dialog.exec_() == QDialog.Accepted:
            self.connection = db_dialog.get_connection()
            if not self.connection:
                sys.exit(1)
        else:
            sys.exit(0)

        # 2. User Login
        login_dialog = LoginDialog(self.connection)
        if login_dialog.exec_() != QDialog.Accepted:
            sys.exit(0)
        self.user_id = login_dialog.user_id
        self.user_group = login_dialog.user_group

        # Retrieve username from database
        cur = self.connection.cursor()
        cur.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (self.user_id,))
        row = cur.fetchone()
        self.logged_in_username = row[0] if row else "UnknownUser"

        # Initialize the UI
        self.init_ui()

    def init_ui(self):
        # Menu Bar Setup
        menubar = self.menuBar()
        file_menu = menubar.addMenu("File")

        sync_meta_act = QAction("Sync Metadata", self)
        sync_meta_act.triggered.connect(self.sync_metadata)
        file_menu.addAction(sync_meta_act)

        run_validations_act = QAction("Run Data Validations", self)
        run_validations_act.triggered.connect(self.run_data_validations)
        file_menu.addAction(run_validations_act)

        perf_trends_act = QAction("Show Performance Trends", self)
        perf_trends_act.triggered.connect(self.show_performance_trends)
        file_menu.addAction(perf_trends_act)

        chain_sim_act = QAction("Simulate Rule Chain", self)
        chain_sim_act.triggered.connect(self.simulate_rule_chain)
        file_menu.addAction(chain_sim_act)

        group_sim_act = QAction("Simulate Custom Group", self)
        group_sim_act.triggered.connect(self.simulate_custom_group)
        file_menu.addAction(group_sim_act)

        help_menu = self.menuBar().addMenu("Help")
        help_act = QAction("Show Help", self)
        help_act.triggered.connect(self.show_help)
        help_menu.addAction(help_act)

        tools_menu = self.menuBar().addMenu("Tools")
        audit_act = QAction("View Audit Logs", self)
        audit_act.triggered.connect(self.open_audit_logs)
        tools_menu.addAction(audit_act)
        search_act = QAction("Search Rules", self)
        search_act.triggered.connect(self.open_rule_search)
        tools_menu.addAction(search_act)
        version_act = QAction("Version History", self)
        version_act.triggered.connect(self.open_version_history)
        tools_menu.addAction(version_act)

        # Central Widget and Layout
        central_widget = QWidget()
        main_layout = QVBoxLayout(central_widget)

        # Admin Impersonation Panel (if user is Admin)
        if self.user_group == "Admin":
            imp_layout = QHBoxLayout()
            self.impersonation_combo = QComboBox()
            self.load_impersonation_combo()
            imp_switch_btn = QPushButton("Switch User")
            imp_switch_btn.clicked.connect(self.switch_user)
            imp_layout.addWidget(QLabel("Impersonate:"))
            imp_layout.addWidget(self.impersonation_combo)
            imp_layout.addWidget(imp_switch_btn)
            imp_layout.addStretch()
            main_layout.addLayout(imp_layout)

        # Create Tab Widget and add all feature tabs
        self.tabs = QTabWidget()

        # Tab 1: Business Rules Dashboard
        self.rule_dashboard = RuleDashboard(self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.rule_dashboard, "Business Rules")

        # Tab 2: Approvals
        self.approval_tab = MultiStepApprovalTab(self.connection, self.logged_in_username, self.user_group)
        self.tabs.addTab(self.approval_tab, "Approvals")

        # Tab 3: Global/Critical Administration (Admin only)
        if self.user_group == "Admin":
            self.gcr_admin_tab = GlobalCriticalAdminTab(self, self.connection, self.user_group)
            self.tabs.addTab(self.gcr_admin_tab, "Global/Critical Admin")

        # Tab 4: Hierarchy View
        self.hierarchy_tab = HierarchyViewTab(self.connection)
        self.tabs.addTab(self.hierarchy_tab, "Hierarchy")

        # Tab 5: Enhanced Lineage Visualization
        self.lineage_tab = EnhancedLineageGraphWidget(self.connection)
        self.tabs.addTab(self.lineage_tab, "Lineage")

        # Tab 6: Custom Rule Groups & Alerts
        self.custom_group_tab = CustomRuleGroupEnhancedTab(self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.custom_group_tab, "Custom Groups")

        # Tab 7: Scheduling
        self.schedule_tab = ScheduleManagementTab(self.connection)
        self.tabs.addTab(self.schedule_tab, "Scheduling")

        # Tab 8: Metrics and Control Tables (as sub-tabs)
        self.metrics_tab = MetricsDashboardTab(self.connection)
        self.ctrl_tables_tab = CtrlTablesTab(self.connection)
        metrics_ctrl_tabs = QTabWidget()
        metrics_ctrl_tabs.addTab(self.metrics_tab, "Metrics")
        metrics_ctrl_tabs.addTab(self.ctrl_tables_tab, "Control Tables")
        self.tabs.addTab(metrics_ctrl_tabs, "Metrics/Control")

        # Tab 9: Group & User Management
        self.group_mgmt_tab = GroupManagementTab(self.connection, self.user_id, self.user_group)
        if self.user_group == "Admin":
            self.user_mgmt_tab = UserManagementTab(self.connection)
            group_user_tabs = QTabWidget()
            group_user_tabs.addTab(self.group_mgmt_tab, "Group Management")
            group_user_tabs.addTab(self.user_mgmt_tab, "User Management")
            self.tabs.addTab(group_user_tabs, "Group/User")
        else:
            self.tabs.addTab(self.group_mgmt_tab, "Group Management")

        # Tab 10: SQL-to‑Business Language Converter
        self.sql_converter_tab = SqlToBusinessLanguageConverterTab(self.connection)
        self.tabs.addTab(self.sql_converter_tab, "SQL→Business Language")

        main_layout.addWidget(self.tabs)
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # Set up Auto‑Refresh Timers
        self.approval_timer = QTimer(self)
        self.approval_timer.timeout.connect(self.approval_tab.load_approvals)
        self.approval_timer.start(5000)

        self.schedule_timer = QTimer(self)
        self.schedule_timer.timeout.connect(self.check_schedules)
        self.schedule_timer.start(60000)

    def load_impersonation_combo(self):
        cur = self.connection.cursor()
        cur.execute("SELECT USER_ID, USERNAME, USER_GROUP FROM USERS ORDER BY USER_ID")
        for uid, uname, ugroup in cur.fetchall():
            self.impersonation_combo.addItem(f"{uname} ({ugroup})", (uid, ugroup))

    def switch_user(self):
        data = self.impersonation_combo.currentData()
        if not data:
            return
        new_uid, new_group = data
        if new_uid == self.user_id and new_group == self.user_group:
            return
        self.user_id = new_uid
        self.user_group = new_group
        cur = self.connection.cursor()
        cur.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (self.user_id,))
        row = cur.fetchone()
        self.logged_in_username = row[0] if row else "UnknownUser"
        QMessageBox.information(self, "Switched", f"Now impersonating {self.logged_in_username} ({self.user_group}).")
        # Update dependent modules
        self.approval_tab.logged_in_username = self.logged_in_username
        self.approval_tab.user_group = self.user_group
        self.approval_tab.load_approvals()
        self.rule_dashboard.user_id = self.user_id
        self.rule_dashboard.user_group = self.user_group
        self.rule_dashboard.load_rules()
        if hasattr(self, "gcr_admin_tab"):
            self.gcr_admin_tab.load_rule_list()
            self.gcr_admin_tab.load_link_view()
        if hasattr(self, "hierarchy_tab"):
            self.hierarchy_tab.load_hierarchy()
        if hasattr(self, "custom_group_tab"):
            self.custom_group_tab.refresh_all()
        if hasattr(self, "group_mgmt_tab"):
            self.group_mgmt_tab.user_id = self.user_id
            self.group_mgmt_tab.user_group = self.user_group
            self.group_mgmt_tab.load_data()
        if hasattr(self, "user_mgmt_tab"):
            self.user_mgmt_tab.load_users()

    def sync_metadata(self):
        msg = sync_metadata_improved(self.connection)
        QMessageBox.information(self, "Sync Metadata", msg)

    def run_data_validations(self):
        run_all_data_validations(self.connection)
        QMessageBox.information(self, "Data Validations", "Data validations executed.")

    def show_performance_trends(self):
        dlg = QDialog(self)
        dlg.setWindowTitle("Performance Trends")
        dlg.resize(800, 600)
        layout = QVBoxLayout(dlg)
        perf_widget = MetricsDashboardTab(self.connection)
        layout.addWidget(perf_widget)
        close_btn = QPushButton("Close")
        close_btn.clicked.connect(dlg.close)
        layout.addWidget(close_btn)
        dlg.exec_()

    def simulate_rule_chain(self):
        dlg = ChainSimulationDialog(self.connection, self)
        dlg.exec_()

    def simulate_custom_group(self):
        dlg = GroupSimulationDialog(self.connection, self)
        dlg.exec_()

    def open_audit_logs(self):
        dlg = AuditLogViewer(self.connection, self.user_group, self)
        dlg.exec_()

    def open_rule_search(self):
        dlg = RuleSearchDialog(self.connection, self.user_group, self)
        dlg.exec_()

    def open_version_history(self):
        rid, ok = QInputDialog.getInt(self, "Version History", "Enter Rule ID:")
        if ok:
            dlg = VersionHistoryDialog(self.connection, rid, self)
            dlg.exec_()

    def check_schedules(self):
        check_due_schedules(self.connection)
        self.schedule_tab.load_schedules()

    def show_help(self):
        QMessageBox.information(self, "Help",
            f"BRM Tool – Final Advanced Version\nLogged in as: {self.logged_in_username} ({self.user_group})\n"
            "Use the tabs to manage business rules, approvals, scheduling, lineage, custom groups, metrics, etc.")

    def closeEvent(self, event):
        if self.connection:
            try:
                self.connection.close()
            except Exception as ex:
                logger.error(f"Error closing connection: {ex}")
        event.accept()

# =====================================================
# Main Entrypoint
# =====================================================
if __name__ == "__main__":
    app = QApplication(sys.argv)
    tool = BRMTool()
    tool.show()
    sys.exit(app.exec_())