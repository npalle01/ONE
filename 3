Below is a gap‑filling module for a modern/flat/Material‑like theme—theming.py. It lets you apply a Qt style sheet (“QSS”) or a custom QStyle across the entire BRM Tool for a cleaner UI/UX. This addresses the request for a modern look and feel.

After reviewing this module, please respond “OK” to confirm so we can move on to the next gap (e.g. inline editing, dashboard cards, advanced performance alerting, etc.).

⸻

theming.py – A Centralized Theming & Style Management

#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: theming.py
Description:
  Provides a centralized approach for applying a modern “Material” or “Fusion” theme
  across the BRM Tool. Key functionalities:
    1. load_theme() => read an external QSS file or a built‑in material/fusion style.
    2. apply_theme_to_app() => sets the QApplication style, palette, or QSS globally.
    3. A small “ThemeManager” class for dynamic switching if needed.
    
Usage:
  - In your final aggregator (brm_tool_main.py or similar), import theming, then:
      theming.apply_theme_to_app(app, "material_light")
  or
      theming.load_theme(app, path_to_qss="my_material.qss")
"""

import sys
import os
import logging
from PyQt5 import QtCore, QtGui, QtWidgets

###############################################################################
# 1) Predefined QSS strings or references
###############################################################################
# You can embed a “material light” or “fusion dark” QSS in a string,
# or load from an external .qss file at runtime. We'll do partial examples.

MATERIAL_LIGHT_QSS = """
/* Example QSS for a light material-inspired theme */
QWidget {
    font-family: "Segoe UI", Roboto, Arial;
    color: #333333;
    background-color: #fafafa;
}
QPushButton {
    background-color: #ffffff;
    border: 1px solid #cccccc;
    padding: 5px;
    border-radius: 3px;
}
QPushButton:hover {
    background-color: #f0f0f0;
}
QLineEdit, QPlainTextEdit, QTextEdit, QComboBox, QSpinBox {
    background-color: #ffffff;
    border: 1px solid #cccccc;
    border-radius: 2px;
}
QTableWidget {
    background-color: #ffffff;
    gridline-color: #cccccc;
}
QHeaderView::section {
    background-color: #eeeeee;
    font-weight: bold;
    border: 1px solid #cccccc;
}
QMenuBar, QMenu {
    background-color: #fdfdfd;
}
QMenu::item:selected {
    background-color: #eeeeee;
}
"""

FUSION_DARK_QSS = """
/* Example darker fusion-inspired QSS */
QWidget {
    font-family: "Segoe UI", Roboto, Arial;
    color: #eeeeee;
    background-color: #2d2d2d;
}
QPushButton {
    background-color: #444444;
    color: #eeeeee;
    border: 1px solid #666666;
    padding: 5px;
    border-radius: 3px;
}
QPushButton:hover {
    background-color: #555555;
}
QLineEdit, QPlainTextEdit, QTextEdit, QComboBox, QSpinBox {
    background-color: #3d3d3d;
    color: #eeeeee;
    border: 1px solid #666666;
    border-radius: 2px;
}
QTableWidget {
    background-color: #3d3d3d;
    color: #eeeeee;
    gridline-color: #666666;
}
QHeaderView::section {
    background-color: #444444;
    font-weight: bold;
    border: 1px solid #666666;
}
QMenuBar, QMenu {
    background-color: #3d3d3d;
}
QMenu::item:selected {
    background-color: #505050;
}
"""

###############################################################################
# 2) Functions to load and apply style
###############################################################################
def load_theme(app: QtWidgets.QApplication, path_to_qss=None, builtin_theme=None):
    """
    Load either:
     - a .qss file from path_to_qss, if provided
     - else a builtin theme (e.g. "material_light" or "fusion_dark") if builtin_theme is set
     - else do nothing if none is specified.

    Then apply via app.setStyleSheet(...).
    """
    if path_to_qss and os.path.exists(path_to_qss):
        try:
            with open(path_to_qss, "r", encoding="utf-8") as f:
                qss_content = f.read()
            app.setStyleSheet(qss_content)
            logging.info(f"Loaded QSS from {path_to_qss}")
            return
        except Exception as ex:
            logging.error(f"Error loading QSS from {path_to_qss}: {ex}")
    if builtin_theme:
        if builtin_theme.lower() == "material_light":
            app.setStyleSheet(MATERIAL_LIGHT_QSS)
            logging.info("Applied builtin material_light QSS.")
        elif builtin_theme.lower() == "fusion_dark":
            app.setStyleSheet(FUSION_DARK_QSS)
            logging.info("Applied builtin fusion_dark QSS.")
        else:
            logging.warning(f"Unknown builtin theme '{builtin_theme}' => no style applied.")
    else:
        logging.info("No QSS file or builtin theme specified => no style changes.")


def apply_fusion_palette_dark(app: QtWidgets.QApplication):
    """
    Optional function if you want a dark Fusion QPalette (on top of QSS or instead of it).
    """
    palette = QtGui.QPalette()
    
    # For example, create a dark palette
    palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Base, QtGui.QColor(25,25,25))
    palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
    palette.setColor(QtGui.QPalette.Link, QtGui.QColor(42,130,218))
    palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42,130,218))
    palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
    
    app.setStyle("Fusion")
    app.setPalette(palette)


###############################################################################
# 3) Example “ThemeManager”
###############################################################################
class ThemeManager:
    """
    A simple class to hold the current theme setting. You can expand if you want dynamic changes at runtime.
    """
    def __init__(self):
        self.current_theme = "Default"

    def set_theme(self, app, builtin_theme=None, qss_path=None):
        load_theme(app, path_to_qss=qss_path, builtin_theme=builtin_theme)
        if builtin_theme:
            self.current_theme = builtin_theme
        elif qss_path:
            self.current_theme = qss_path
        else:
            self.current_theme = "Default"

    def apply_dark_fusion_palette(self, app):
        apply_fusion_palette_dark(app)
        self.current_theme="FusionDarkPalette"


###############################################################################
# End of theming module
###############################################################################

Usage Notes
	1.	Load a Builtin QSS
	•	In your final aggregator or brm_tool_main.py, after creating app = QApplication(sys.argv), do:

from theming import load_theme
load_theme(app, builtin_theme="material_light")

or

load_theme(app, builtin_theme="fusion_dark")


	2.	Load an External .qss
	•	Suppose you have my_material.qss in the same folder:

load_theme(app, path_to_qss="my_material.qss")


	3.	Fusion Dark Palette
	•	If you prefer the built‑in “Fusion” style with a custom dark palette, call:

from theming import apply_fusion_palette_dark
apply_fusion_palette_dark(app)


	•	This sets app.setStyle("Fusion") plus a custom color palette.

This addresses the “modern/flat/Material design theme” gap. Next, we can proceed to the next identified gap (e.g., inline editing, dashboard “cards,” advanced performance alerting, etc.) if desired.

Please respond “OK” when ready.