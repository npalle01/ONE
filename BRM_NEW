#!/usr/bin/env python

import sys
import logging
import json
import math
import re
import smtplib
from email.mime.text import MIMEText
from datetime import datetime
from collections import deque

import pyodbc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QDateTime, QTimer, QDate
from PyQt5.QtGui import QColor, QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QDialog, QVBoxLayout, QHBoxLayout,
    QFormLayout, QPushButton, QLineEdit, QLabel, QTextEdit, QTableWidget,
    QTableWidgetItem, QMessageBox, QComboBox, QInputDialog, QSplitter, QCheckBox,
    QTreeView, QListWidget, QListWidgetItem, QGroupBox, QAbstractItemView,
    QPlainTextEdit, QTabWidget, QDateTimeEdit
)
import pyqtgraph as pg

# ----------------------------------------------------------------------------
# Logging & Email Configuration
# ----------------------------------------------------------------------------
logging.basicConfig(
    filename='brmtool_pyqtgraph.log',
    level=logging.DEBUG,
    format='%(asctime)s:%(levelname)s:%(name)s:%(message)s'
)
logger = logging.getLogger(__name__)

EMAIL_CONFIG = {
    "smtp_server": "smtp.example.com",
    "smtp_port": 587,
    "smtp_username": "your_username",
    "smtp_password": "your_password",
    "sender_email": "noreply@example.com"
}

# ----------------------------------------------------------------------------
# Utility: Send Email
# ----------------------------------------------------------------------------
def send_email_notification(subject, body, recipients):
    msg = MIMEText(body, 'plain')
    msg['Subject'] = subject
    msg['From'] = EMAIL_CONFIG['sender_email']
    msg['To'] = ", ".join(recipients)
    try:
        server = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'])
        server.starttls()
        server.login(EMAIL_CONFIG['smtp_username'], EMAIL_CONFIG['smtp_password'])
        server.sendmail(EMAIL_CONFIG['sender_email'], recipients, msg.as_string())
        server.quit()
        logger.info("Email sent to: " + ", ".join(recipients))
    except Exception as ex:
        logger.error("Error sending email: " + str(ex))

# ----------------------------------------------------------------------------
# Utility: Get Rows as Dict
# ----------------------------------------------------------------------------
def get_cursor_rows(cursor):
    try:
        rows = cursor.fetchall()
    except Exception:
        rows = []
    if cursor.description:
        colnames = [desc[0] for desc in cursor.description]
        return [dict(zip(colnames, row)) for row in rows]
    return rows

# ----------------------------------------------------------------------------
# Utility: Get Single Row as Dict
# ----------------------------------------------------------------------------
def get_cursor_one(cursor):
    row = cursor.fetchone()
    if row and cursor.description:
        colnames = [desc[0] for desc in cursor.description]
        return dict(zip(colnames, row))
    return row

# ----------------------------------------------------------------------------
# Utility: Audit Log
# ----------------------------------------------------------------------------
def add_audit_log(conn, action, table_name, record_id, action_by, old_data, new_data):
    c = conn.cursor()
    old_data_json = json.dumps(old_data) if old_data else None
    new_data_json = json.dumps(new_data) if new_data else None
    c.execute("""
    INSERT INTO BRM_AUDIT_LOG (ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA)
    VALUES (?, ?, ?, ?, ?, ?)
    """, (action, table_name, str(record_id), action_by, old_data_json, new_data_json))
    conn.commit()

# ----------------------------------------------------------------------------
# Create or Seed Database Tables (SQL Server, T-SQL)
# ----------------------------------------------------------------------------
def create_tables_if_needed(cursor):
    ddl_statements = [
        """
        IF OBJECT_ID('USERS', 'U') IS NULL
        CREATE TABLE USERS(
          USER_ID INT IDENTITY(1,1) PRIMARY KEY,
          USERNAME VARCHAR(100) NOT NULL UNIQUE,
          PASSWORD VARCHAR(100) NOT NULL,
          USER_GROUP VARCHAR(100) NOT NULL
        )
        """,
        """
        IF OBJECT_ID('BUSINESS_GROUPS', 'U') IS NULL
        CREATE TABLE BUSINESS_GROUPS(
          GROUP_NAME VARCHAR(100) PRIMARY KEY,
          DESCRIPTION VARCHAR(255),
          EMAIL VARCHAR(255)
        )
        """,
        """
        IF OBJECT_ID('GROUP_PERMISSIONS', 'U') IS NULL
        CREATE TABLE GROUP_PERMISSIONS(
          GROUP_NAME VARCHAR(100) NOT NULL,
          TARGET_TABLE VARCHAR(255) NOT NULL,
          CONSTRAINT PK_GROUP_PERMISSIONS PRIMARY KEY (GROUP_NAME, TARGET_TABLE)
        )
        """,
        """
        IF OBJECT_ID('BRM_RULE_TYPES', 'U') IS NULL
        CREATE TABLE BRM_RULE_TYPES(
          RULE_TYPE_ID INT PRIMARY KEY,
          RULE_TYPE_NAME VARCHAR(50) NOT NULL UNIQUE
        )
        """,
        """
        IF OBJECT_ID('BRM_RULE_GROUPS', 'U') IS NULL
        CREATE TABLE BRM_RULE_GROUPS(
          GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
          GROUP_NAME VARCHAR(255) NOT NULL UNIQUE,
          DESCRIPTION VARCHAR(255)
        )
        """,
        """
        IF OBJECT_ID('BRM_RULES', 'U') IS NULL
        CREATE TABLE BRM_RULES(
          RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
          GROUP_ID INT NULL,
          PARENT_RULE_ID INT NULL,
          RULE_TYPE_ID INT NOT NULL,
          RULE_NAME VARCHAR(255) NOT NULL,
          RULE_SQL VARCHAR(MAX) NOT NULL,
          EFFECTIVE_START_DATE VARCHAR(25) NOT NULL,
          EFFECTIVE_END_DATE VARCHAR(25) NULL,
          STATUS VARCHAR(10) NOT NULL,
          VERSION INT NOT NULL DEFAULT 1,
          CREATED_BY VARCHAR(100) NOT NULL,
          DESCRIPTION VARCHAR(MAX),
          OPERATION_TYPE VARCHAR(50),
          BUSINESS_JUSTIFICATION VARCHAR(MAX),
          CREATED_TIMESTAMP DATETIME DEFAULT GETDATE(),
          UPDATED_BY VARCHAR(100),
          OWNER_GROUP VARCHAR(100) NOT NULL,
          CLUSTER_NAME VARCHAR(255),
          APPROVAL_STATUS VARCHAR(50) NOT NULL DEFAULT 'DRAFT',
          IS_GLOBAL BIT NOT NULL DEFAULT 0,
          CRITICAL_RULE BIT NOT NULL DEFAULT 0,
          CRITICAL_SCOPE VARCHAR(50) NOT NULL DEFAULT 'NONE',
          CDC_TYPE VARCHAR(50) NOT NULL DEFAULT 'NONE'
        )
        """,
        """
        IF OBJECT_ID('BRM_RULE_TABLE_DEPENDENCIES', 'U') IS NULL
        CREATE TABLE BRM_RULE_TABLE_DEPENDENCIES(
          DEPENDENCY_ID INT IDENTITY(1,1) PRIMARY KEY,
          RULE_ID INT NOT NULL,
          DATABASE_NAME VARCHAR(255) NOT NULL,
          TABLE_NAME VARCHAR(255) NOT NULL,
          COLUMN_NAME VARCHAR(255) NOT NULL
        )
        """,
        """
        IF OBJECT_ID('BRM_AUDIT_LOG', 'U') IS NULL
        CREATE TABLE BRM_AUDIT_LOG(
          AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
          ACTION VARCHAR(50) NOT NULL,
          TABLE_NAME VARCHAR(100) NOT NULL,
          RECORD_ID VARCHAR(100) NOT NULL,
          ACTION_BY VARCHAR(100) NOT NULL,
          OLD_DATA VARCHAR(MAX),
          NEW_DATA VARCHAR(MAX),
          ACTION_TIMESTAMP DATETIME DEFAULT GETDATE()
        )
        """,
        """
        IF OBJECT_ID('BRM_RULE_LINEAGE', 'U') IS NULL
        CREATE TABLE BRM_RULE_LINEAGE(
          LINEAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
          RULE_ID INT NOT NULL,
          SOURCE_INFO VARCHAR(MAX),
          TARGET_INFO VARCHAR(MAX),
          TRANSFORMATION_DETAILS VARCHAR(MAX),
          CREATED_TIMESTAMP DATETIME DEFAULT GETDATE()
        )
        """,
        """
        IF OBJECT_ID('BRM_GROUP_BACKUPS', 'U') IS NULL
        CREATE TABLE BRM_GROUP_BACKUPS(
          BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
          GROUP_NAME VARCHAR(100) NOT NULL,
          BACKUP_TIMESTAMP DATETIME DEFAULT GETDATE(),
          BACKUP_VERSION INT NOT NULL,
          BACKUP_JSON VARCHAR(MAX) NOT NULL
        )
        """,
        """
        IF OBJECT_ID('BRM_COLUMN_MAPPING', 'U') IS NULL
        CREATE TABLE BRM_COLUMN_MAPPING(
          MAPPING_ID INT IDENTITY(1,1) PRIMARY KEY,
          RULE_ID INT NOT NULL,
          SOURCE_RULE_ID INT NOT NULL,
          SOURCE_COLUMN_NAME VARCHAR(255) NOT NULL,
          TARGET_COLUMN_NAME VARCHAR(255) NOT NULL
        )
        """,
        """
        IF OBJECT_ID('BRM_CUSTOM_RULE_GROUPS', 'U') IS NULL
        CREATE TABLE BRM_CUSTOM_RULE_GROUPS(
          CUSTOM_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
          CUSTOM_GROUP_NAME VARCHAR(255) NOT NULL UNIQUE,
          OWNER_BUSINESS_GROUP VARCHAR(100) NOT NULL,
          CREATED_BY VARCHAR(100) NOT NULL,
          CREATED_TIMESTAMP DATETIME DEFAULT GETDATE()
        )
        """,
        """
        IF OBJECT_ID('BRM_CUSTOM_GROUP_MEMBERS', 'U') IS NULL
        CREATE TABLE BRM_CUSTOM_GROUP_MEMBERS(
          CUSTOM_GROUP_ID INT NOT NULL,
          RULE_ID INT NOT NULL,
          CONSTRAINT PK_CUSTOM_GROUP_MEMBERS PRIMARY KEY (CUSTOM_GROUP_ID, RULE_ID)
        )
        """,
        """
        IF OBJECT_ID('BUSINESS_GROUP_APPROVERS', 'U') IS NULL
        CREATE TABLE BUSINESS_GROUP_APPROVERS(
          APPROVER_ID INT IDENTITY(1,1) PRIMARY KEY,
          GROUP_NAME VARCHAR(100) NOT NULL,
          USERNAME VARCHAR(100) NOT NULL
        )
        """,
        """
        IF OBJECT_ID('BRM_RULE_APPROVALS', 'U') IS NULL
        CREATE TABLE BRM_RULE_APPROVALS(
          RULE_ID INT NOT NULL,
          GROUP_NAME VARCHAR(100) NOT NULL,
          USERNAME VARCHAR(100) NOT NULL,
          APPROVED_FLAG BIT NOT NULL DEFAULT 0,
          APPROVED_TIMESTAMP DATETIME NULL,
          APPROVAL_STAGE INT NOT NULL DEFAULT 1,
          CONSTRAINT PK_RULE_APPROVALS PRIMARY KEY (RULE_ID, GROUP_NAME, USERNAME)
        )
        """,
        """
        IF OBJECT_ID('BRM_CUSTOM_GROUP_BACKUPS', 'U') IS NULL
        CREATE TABLE BRM_CUSTOM_GROUP_BACKUPS(
          BACKUP_ID INT IDENTITY(1,1) PRIMARY KEY,
          CUSTOM_GROUP_ID INT NOT NULL,
          BACKUP_TIMESTAMP DATETIME DEFAULT GETDATE(),
          BACKUP_VERSION INT NOT NULL,
          BACKUP_JSON VARCHAR(MAX) NOT NULL
        )
        """,
        """
        IF OBJECT_ID('BRM_GLOBAL_CRITICAL_LINKS', 'U') IS NULL
        CREATE TABLE BRM_GLOBAL_CRITICAL_LINKS(
          LINK_ID INT IDENTITY(1,1) PRIMARY KEY,
          GCR_RULE_ID INT NOT NULL,
          TARGET_RULE_ID INT NULL,
          TARGET_GROUP_ID INT NULL
        )
        """
    ]
    for stmt in ddl_statements:
        try:
            cursor.execute(stmt)
        except Exception as e:
            logger.error(f"Error creating tables: {e}")

def seed_dummy_data(cursor):
    try:
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM USERS WHERE USERNAME='admin')
        BEGIN
            INSERT INTO USERS(USERNAME, PASSWORD, USER_GROUP)
            VALUES ('admin', 'admin', 'Admin')
        END
        """)
    except:
        pass

    groups = [
        ("Admin", "Admin group", "admin@example.com"),
        ("BG1",   "Group1",      "bg1@example.com"),
        ("BG2",   "Group2",      "bg2@example.com"),
        ("BG3",   "Group3",      "bg3@example.com")
    ]
    for g in groups:
        try:
            cursor.execute("""
            IF NOT EXISTS(SELECT 1 FROM BUSINESS_GROUPS WHERE GROUP_NAME=?)
            BEGIN
                INSERT INTO BUSINESS_GROUPS(GROUP_NAME, DESCRIPTION, EMAIL)
                VALUES (?, ?, ?)
            END
            """, (g[0],) + g)
        except:
            pass

    try:
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM USERS WHERE USERNAME='bg1_user')
        BEGIN
            INSERT INTO USERS(USERNAME, PASSWORD, USER_GROUP)
            VALUES ('bg1_user','user','BG1')
        END
        """)
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM USERS WHERE USERNAME='bg2_user')
        BEGIN
            INSERT INTO USERS(USERNAME, PASSWORD, USER_GROUP)
            VALUES ('bg2_user','user','BG2')
        END
        """)
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM USERS WHERE USERNAME='bg3_user')
        BEGIN
            INSERT INTO USERS(USERNAME, PASSWORD, USER_GROUP)
            VALUES ('bg3_user','user','BG3')
        END
        """)
    except:
        pass

    perms = [
        ("Admin", "TABLE_A"),
        ("Admin", "TABLE_B"),
        ("Admin", "TABLE_C"),
        ("Admin", "TABLE_D"),
        ("BG1",   "TABLE_A"),
        ("BG1",   "TABLE_B"),
        ("BG2",   "TABLE_C"),
        ("BG3",   "TABLE_D")
    ]
    for p in perms:
        try:
            cursor.execute("""
            IF NOT EXISTS(SELECT 1 FROM GROUP_PERMISSIONS WHERE GROUP_NAME=? AND TARGET_TABLE=?)
            BEGIN
                INSERT INTO GROUP_PERMISSIONS(GROUP_NAME, TARGET_TABLE)
                VALUES (?, ?)
            END
            """, (p[0], p[1], p[0], p[1]))
        except:
            pass

    try:
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM BRM_RULE_TYPES WHERE RULE_TYPE_ID=1)
        BEGIN
            INSERT INTO BRM_RULE_TYPES(RULE_TYPE_ID, RULE_TYPE_NAME)
            VALUES(1,'DQ')
        END
        """)
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM BRM_RULE_TYPES WHERE RULE_TYPE_ID=2)
        BEGIN
            INSERT INTO BRM_RULE_TYPES(RULE_TYPE_ID, RULE_TYPE_NAME)
            VALUES(2,'DM')
        END
        """)
    except:
        pass

    try:
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM BUSINESS_GROUP_APPROVERS WHERE GROUP_NAME='BG1' AND USERNAME='bg1_user')
        BEGIN
            INSERT INTO BUSINESS_GROUP_APPROVERS(GROUP_NAME,USERNAME)
            VALUES('BG1','bg1_user')
        END
        """)
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM BUSINESS_GROUP_APPROVERS WHERE GROUP_NAME='BG2' AND USERNAME='bg2_user')
        BEGIN
            INSERT INTO BUSINESS_GROUP_APPROVERS(GROUP_NAME,USERNAME)
            VALUES('BG2','bg2_user')
        END
        """)
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM BUSINESS_GROUP_APPROVERS WHERE GROUP_NAME='BG3' AND USERNAME='bg3_user')
        BEGIN
            INSERT INTO BUSINESS_GROUP_APPROVERS(GROUP_NAME,USERNAME)
            VALUES('BG3','bg3_user')
        END
        """)
    except:
        pass

    try:
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM BRM_RULE_GROUPS WHERE GROUP_NAME='Finance Rules')
        BEGIN
            INSERT INTO BRM_RULE_GROUPS(GROUP_NAME, DESCRIPTION)
            VALUES('Finance Rules','Finance data rules')
        END
        """)
        cursor.execute("""
        IF NOT EXISTS(SELECT 1 FROM BRM_RULE_GROUPS WHERE GROUP_NAME='HR Rules')
        BEGIN
            INSERT INTO BRM_RULE_GROUPS(GROUP_NAME, DESCRIPTION)
            VALUES('HR Rules','HR data rules')
        END
        """)
    except:
        pass

# ----------------------------------------------------------------------------
# Rule BFS Logic
# ----------------------------------------------------------------------------
def get_op_type_from_sql(sql_text: str) -> str:
    txt = sql_text.strip().upper()
    if txt.startswith("INSERT"):
        return "INSERT"
    elif txt.startswith("DELETE"):
        return "DELETE"
    elif txt.startswith("UPDATE"):
        return "UPDATE"
    elif txt.startswith("SELECT"):
        return "SELECT"
    return "OTHER"

def extract_tables(sql_text: str):
    found = []
    tokens = re.split(r"\s+", sql_text.strip())
    for i, t in enumerate(tokens):
        if t.upper() in ("FROM", "JOIN"):
            if i + 1 < len(tokens):
                tbl = re.sub(r"[;(),]", "", tokens[i+1])
                found.append(("", tbl))
    return list(set(found))

def run_rule_sql(conn, rule_sql):
    try:
        c = conn.cursor()
        c.execute(rule_sql)
        row = c.fetchone()
        if not row:
            return True
        return (row[0] == 1)
    except Exception as ex:
        logger.error("Rule execution error: " + str(ex))
        return False

def build_rule_adjacency(conn):
    c = conn.cursor()
    c.execute("SELECT RULE_ID, PARENT_RULE_ID FROM BRM_RULES")
    rows = c.fetchall()
    children_map = {}
    all_ids = set()
    parent_ids = set()
    for r in rows:
        rid = r[0]
        pid = r[1]
        all_ids.add(rid)
        if pid:
            parent_ids.add(pid)
            children_map.setdefault(pid, []).append(rid)
    roots = [rid for rid in all_ids if rid not in parent_ids]
    return children_map, roots

def load_global_critical_links(conn):
    c = conn.cursor()
    c.execute("SELECT GCR_RULE_ID, TARGET_RULE_ID FROM BRM_GLOBAL_CRITICAL_LINKS")
    rows = c.fetchall()
    link_map = {}
    for r in rows:
        gcr = r[0]
        tgt = r[1]
        if tgt:
            link_map.setdefault(gcr, set()).add(tgt)
    return link_map

def get_all_rules_as_dict(conn):
    c = conn.cursor()
    c.execute("SELECT * FROM BRM_RULES")
    rows = c.fetchall()
    colnames = [desc[0] for desc in c.description]
    result = {}
    for row in rows:
        dd = dict(zip(colnames, row))
        result[dd["RULE_ID"]] = dd
    return result

def skip_descendants(child_id, children_map, skipped):
    stack = [child_id]
    while stack:
        curr = stack.pop()
        if curr in skipped:
            continue
        skipped.add(curr)
        if curr in children_map:
            stack.extend(children_map[curr])

def execute_rules_in_order(conn):
    children_map, root_rules = build_rule_adjacency(conn)
    gcr_links = load_global_critical_links(conn)
    executed = []
    skipped = set()
    queue = list(root_rules)
    rule_lookup = get_all_rules_as_dict(conn)
    while queue:
        rid = queue.pop(0)
        if rid in skipped:
            continue
        if rid not in rule_lookup:
            logger.warning("Rule not found: " + str(rid))
            continue
        rinfo = rule_lookup[rid]
        passed = run_rule_sql(conn, rinfo["RULE_SQL"])
        if passed:
            executed.append(rid)
            if rid in children_map:
                for ch in children_map[rid]:
                    if ch not in skipped:
                        queue.append(ch)
        else:
            is_crit = (rinfo["CRITICAL_RULE"] == 1 or rinfo["IS_GLOBAL"] == 1)
            crit_scope = (rinfo["CRITICAL_SCOPE"] or "NONE").upper()
            if is_crit and crit_scope != "NONE":
                if rid in children_map:
                    for subc in children_map[rid]:
                        skip_descendants(subc, children_map, skipped)
                if rid in gcr_links:
                    for child_rid in gcr_links[rid]:
                        skip_descendants(child_rid, children_map, skipped)
    return executed, skipped

def find_impacted_business_groups(conn, rule_id):
    impacted = set()
    c = conn.cursor()
    c.execute("SELECT OWNER_GROUP FROM BRM_RULES WHERE RULE_ID=?", (rule_id,))
    row = c.fetchone()
    if row:
        impacted.add(row[0])
    visited = set()
    queue = [rule_id]
    while queue:
        curr = queue.pop()
        if curr in visited:
            continue
        visited.add(curr)
        c.execute("SELECT RULE_ID FROM BRM_COLUMN_MAPPING WHERE SOURCE_RULE_ID=?", (curr,))
        kids = c.fetchall()
        for k in kids:
            child_id = k[0]
            c.execute("SELECT OWNER_GROUP FROM BRM_RULES WHERE RULE_ID=?", (child_id,))
            row2 = c.fetchone()
            if row2:
                impacted.add(row2[0])
            queue.append(child_id)
    return impacted

def create_multistep_approvals(conn, rule_id, impacted_bg_list):
    c = conn.cursor()
    stage_counter = 1
    stage_list = []
    MULTISTEP_ORDER = ["BG1","BG2","BG3","FINAL"]
    for step in MULTISTEP_ORDER:
        if step == "FINAL":
            stage_list.append((step, stage_counter))
            stage_counter += 1
        else:
            if step in impacted_bg_list:
                stage_list.append((step, stage_counter))
                stage_counter += 1
    for bg, st in stage_list:
        if bg == "FINAL":
            user_ap = "final_approver"
            c.execute("""
            INSERT INTO BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
            VALUES (?, ?, ?, 0, ?)
            """, (rule_id, bg, user_ap, st))
        else:
            c.execute("SELECT USERNAME FROM BUSINESS_GROUP_APPROVERS WHERE GROUP_NAME=?", (bg,))
            rowaps = c.fetchall()
            for rap in rowaps:
                c.execute("""
                INSERT INTO BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
                VALUES (?, ?, ?, 0, ?)
                """, (rule_id, bg, rap[0], st))
    conn.commit()

def get_current_approval_stage(conn, rule_id):
    c = conn.cursor()
    c.execute("""
    SELECT MIN(APPROVAL_STAGE)
    FROM BRM_RULE_APPROVALS
    WHERE RULE_ID=? AND APPROVED_FLAG=0
    """, (rule_id,))
    row = c.fetchone()
    if row and row[0] is not None:
        return row[0]
    return None

# ----------------------------------------------------------------------------
# Rule CRUD
# ----------------------------------------------------------------------------
def add_rule(conn, rule_data, created_by, user_group):
    c = conn.cursor()
    owner = rule_data["OWNER_GROUP"]
    rule_name = rule_data["RULE_NAME"].strip()
    c.execute("SELECT RULE_ID FROM BRM_RULES WHERE OWNER_GROUP=? AND RULE_NAME=?", (owner, rule_name))
    if c.fetchone():
        raise ValueError(f"Rule '{rule_name}' already exists in group '{owner}'")
    is_global = rule_data.get("IS_GLOBAL", 0)
    if is_global == 1 and user_group != "Admin":
        raise ValueError("Only Admin can create global rule.")
    c.execute("""
    INSERT INTO BRM_RULES(
      GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
      EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION, CREATED_BY,
      DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION, OWNER_GROUP,
      APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE
    )
    VALUES(?, ?, ?, ?, ?, ?, ?, 'INACTIVE', 1, ?, ?, ?, ?, ?, 'APPROVAL_IN_PROGRESS',
           ?, ?, ?, ?)
    """, (
        rule_data.get("GROUP_ID"), rule_data.get("PARENT_RULE_ID"), rule_data["RULE_TYPE_ID"],
        rule_name, rule_data["RULE_SQL"], rule_data["EFFECTIVE_START_DATE"],
        rule_data.get("EFFECTIVE_END_DATE"), created_by, rule_data.get("DESCRIPTION"),
        rule_data.get("OPERATION_TYPE"), rule_data.get("BUSINESS_JUSTIFICATION", ""),
        owner, is_global, rule_data.get("CRITICAL_RULE", 0),
        rule_data.get("CRITICAL_SCOPE", "NONE"), rule_data.get("CDC_TYPE", "NONE")
    ))
    new_id = c.execute("SELECT SCOPE_IDENTITY()").fetchone()[0]
    deps = extract_tables(rule_data["RULE_SQL"])
    for (dbn,tbn) in deps:
        c.execute("""
        INSERT INTO BRM_RULE_TABLE_DEPENDENCIES(RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME)
        VALUES(?, ?, ?, 'DerivedCol')
        """, (new_id, dbn, tbn))
    add_audit_log(conn, "INSERT", "BRM_RULES", new_id, created_by, None, rule_data)
    conn.commit()

    if is_global == 1:
        pass
    else:
        impacted = find_impacted_business_groups(conn, new_id)
        create_multistep_approvals(conn, new_id, impacted)

    try:
        subject = f"New Rule Added: {rule_name}"
        body = f"User {created_by} added rule ID {new_id}\n\nDetails:\n{json.dumps(rule_data, indent=2)}"
        impacted_grps = find_impacted_business_groups(conn, new_id)
        recips = []
        for g in impacted_grps:
            c.execute("SELECT EMAIL FROM BUSINESS_GROUPS WHERE GROUP_NAME=?", (g,))
            ro = c.fetchone()
            if ro and ro[0]:
                recips.append(ro[0])
        if recips:
            send_email_notification(subject, body, recips)
    except Exception as ex:
        logger.error("Email error on new rule: " + str(ex))

    return new_id

def update_rule(conn, rule_data, updated_by, user_group):
    c = conn.cursor()
    c.execute("SELECT * FROM BRM_RULES WHERE RULE_ID=?", (rule_data["RULE_ID"],))
    cols = [desc[0] for desc in c.description]
    oldrow = c.fetchone()
    if not oldrow:
        raise ValueError("Rule not found.")
    old = dict(zip(cols, oldrow))

    new_owner = rule_data.get("OWNER_GROUP", old["OWNER_GROUP"])
    new_rname = rule_data.get("RULE_NAME", old["RULE_NAME"]).strip()

    if (new_owner != old["OWNER_GROUP"]) or (new_rname != old["RULE_NAME"]):
        c.execute("SELECT RULE_ID FROM BRM_RULES WHERE OWNER_GROUP=? AND RULE_NAME=?", (new_owner, new_rname))
        dup = c.fetchone()
        if dup and dup[0] != old["RULE_ID"]:
            raise ValueError(f"Duplicate rule name '{new_rname}' in group '{new_owner}'")

    if old["IS_GLOBAL"] == 1 and user_group != "Admin":
        raise ValueError("Only Admin can update global rule.")

    if rule_data.get("IS_GLOBAL", old["IS_GLOBAL"]) == 1 and user_group != "Admin":
        raise ValueError("Only Admin can set a rule global.")

    c.execute("""
    UPDATE BRM_RULES
    SET
      GROUP_ID=?,
      PARENT_RULE_ID=?,
      RULE_TYPE_ID=?,
      RULE_NAME=?,
      RULE_SQL=?,
      EFFECTIVE_START_DATE=?,
      EFFECTIVE_END_DATE=?,
      STATUS='INACTIVE',
      VERSION=VERSION+1,
      UPDATED_BY=?,
      DESCRIPTION=?,
      OPERATION_TYPE=?,
      BUSINESS_JUSTIFICATION=?,
      OWNER_GROUP=?,
      APPROVAL_STATUS='APPROVAL_IN_PROGRESS',
      IS_GLOBAL=?,
      CRITICAL_RULE=?,
      CRITICAL_SCOPE=?,
      CDC_TYPE=?
    WHERE RULE_ID=?
    """, (
        rule_data.get("GROUP_ID", old["GROUP_ID"]),
        rule_data.get("PARENT_RULE_ID", old["PARENT_RULE_ID"]),
        rule_data["RULE_TYPE_ID"],
        new_rname,
        rule_data["RULE_SQL"],
        rule_data["EFFECTIVE_START_DATE"],
        rule_data.get("EFFECTIVE_END_DATE"),
        updated_by,
        rule_data.get("DESCRIPTION"),
        rule_data.get("OPERATION_TYPE"),
        rule_data.get("BUSINESS_JUSTIFICATION", ""),
        new_owner,
        rule_data.get("IS_GLOBAL", old["IS_GLOBAL"]),
        rule_data.get("CRITICAL_RULE", old["CRITICAL_RULE"]),
        rule_data.get("CRITICAL_SCOPE", old["CRITICAL_SCOPE"]),
        rule_data.get("CDC_TYPE", old["CDC_TYPE"]),
        rule_data["RULE_ID"]
    ))

    c.execute("DELETE FROM BRM_RULE_TABLE_DEPENDENCIES WHERE RULE_ID=?", (rule_data["RULE_ID"],))
    deps = extract_tables(rule_data["RULE_SQL"])
    for (dbn,tbn) in deps:
        c.execute("""
        INSERT INTO BRM_RULE_TABLE_DEPENDENCIES(RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME)
        VALUES(?, ?, ?, 'DerivedCol')
        """, (rule_data["RULE_ID"], dbn, tbn))

    new_data = dict(old)
    for k,v in rule_data.items():
        new_data[k] = v
    new_data["VERSION"] = old["VERSION"] + 1

    add_audit_log(conn, "UPDATE", "BRM_RULES", rule_data["RULE_ID"], updated_by, old, new_data)
    conn.commit()

    if old["IS_GLOBAL"] == 1 or rule_data.get("IS_GLOBAL", 0) == 1:
        pass
    else:
        c.execute("DELETE FROM BRM_RULE_APPROVALS WHERE RULE_ID=?", (rule_data["RULE_ID"],))
        impacted = find_impacted_business_groups(conn, rule_data["RULE_ID"])
        create_multistep_approvals(conn, rule_data["RULE_ID"], impacted)

    try:
        subject = f"Rule Updated: {new_rname}"
        body = (f"User {updated_by} updated rule ID {rule_data['RULE_ID']}.\n\n"
                f"Old:\n{json.dumps(old, indent=2)}\n\nNew:\n{json.dumps(rule_data, indent=2)}")
        impacted_grps = find_impacted_business_groups(conn, rule_data["RULE_ID"])
        recips = []
        for gg in impacted_grps:
            c.execute("SELECT EMAIL FROM BUSINESS_GROUPS WHERE GROUP_NAME=?", (gg,))
            ro = c.fetchone()
            if ro and ro[0]:
                recips.append(ro[0])
        if recips:
            send_email_notification(subject, body, recips)
    except Exception as ex:
        logger.error("Email error on rule update: " + str(ex))

def deactivate_rule(conn, rule_id, updated_by, user_group):
    c = conn.cursor()
    c.execute("SELECT * FROM BRM_RULES WHERE RULE_ID=?", (rule_id,))
    cols = [desc[0] for desc in c.description]
    oldrow = c.fetchone()
    if not oldrow:
        raise ValueError("Rule not found.")
    old = dict(zip(cols, oldrow))
    if old["APPROVAL_STATUS"] != "APPROVED":
        raise ValueError("Cannot deactivate if not fully APPROVED.")
    if old["IS_GLOBAL"] == 1 and user_group != "Admin":
        raise ValueError("Only Admin can deactivate global rule.")
    c.execute("SELECT RULE_ID FROM BRM_RULES WHERE PARENT_RULE_ID=? AND STATUS='ACTIVE'", (rule_id,))
    child_active = c.fetchone()
    if child_active:
        raise ValueError("Deactivate child rules first.")
    old_data = dict(old)
    c.execute("""
    UPDATE BRM_RULES
    SET STATUS='INACTIVE', UPDATED_BY=?, VERSION=VERSION+1
    WHERE RULE_ID=?
    """, (updated_by, rule_id))
    new_data = dict(old_data)
    new_data["STATUS"] = "INACTIVE"
    new_data["VERSION"] = old_data["VERSION"] + 1
    add_audit_log(conn, "DEACTIVATE", "BRM_RULES", rule_id, updated_by, old_data, new_data)
    conn.commit()

def delete_rule(conn, rule_id, action_by, user_group):
    c = conn.cursor()
    c.execute("SELECT * FROM BRM_RULES WHERE RULE_ID=?", (rule_id,))
    coln = [desc[0] for desc in c.description]
    oldrow = c.fetchone()
    if not oldrow:
        raise ValueError("Rule not found.")
    old = dict(zip(coln, oldrow))
    if old["IS_GLOBAL"] == 1 and user_group != "Admin":
        raise ValueError("Only Admin can delete global rule.")
    if old["APPROVAL_STATUS"] != "APPROVED":
        raise ValueError("Cannot delete unless fully APPROVED.")
    if old["STATUS"] != "INACTIVE":
        raise ValueError("Rule must be INACTIVE first.")
    c.execute("SELECT RULE_ID FROM BRM_RULES WHERE PARENT_RULE_ID=?", (rule_id,))
    childrow = c.fetchone()
    if childrow:
        raise ValueError("Child rules exist, cannot delete.")
    c.execute("SELECT MAPPING_ID FROM BRM_COLUMN_MAPPING WHERE SOURCE_RULE_ID=? OR RULE_ID=?", (rule_id, rule_id))
    leftover = c.fetchone()
    if leftover:
        raise ValueError("Re-map or remove column references first.")
    old_data = dict(old)
    c.execute("DELETE FROM BRM_RULES WHERE RULE_ID=?", (rule_id,))
    add_audit_log(conn, "DELETE", "BRM_RULES", rule_id, action_by, old_data, None)
    conn.commit()

# ----------------------------------------------------------------------------
# Database Connection Dialog
# ----------------------------------------------------------------------------
class DatabaseConnectionDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("SQL Server ODBC Connection")
        layout = QVBoxLayout(self)
        self.conn_str_edit = QLineEdit()
        self.conn_str_edit.setPlaceholderText("Enter ODBC connection string (e.g. DSN=MyDSN;UID=...;PWD=...)")
        layout.addWidget(QLabel("ODBC Connection String:"))
        layout.addWidget(self.conn_str_edit)
        btn_h = QHBoxLayout()
        ok_btn = QPushButton("Connect")
        ok_btn.clicked.connect(self.accept)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        btn_h.addWidget(ok_btn)
        btn_h.addWidget(cancel_btn)
        layout.addLayout(btn_h)

    def get_connection(self):
        conn_str = self.conn_str_edit.text().strip()
        if not conn_str:
            QMessageBox.critical(self, "Error", "No connection string provided.")
            return None
        try:
            return pyodbc.connect(conn_str)
        except Exception as ex:
            QMessageBox.critical(self, "Connection Error", str(ex))
            return None

# ----------------------------------------------------------------------------
# Login Dialog
# ----------------------------------------------------------------------------
class LoginDialog(QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = None
        self.user_group = None
        self.setWindowTitle("Login")
        self.setFixedSize(300, 200)
        layout = QVBoxLayout(self)
        self.user_edit = QLineEdit()
        self.user_edit.setPlaceholderText("Username")
        layout.addWidget(QLabel("Username:"))
        layout.addWidget(self.user_edit)
        self.pass_edit = QLineEdit()
        self.pass_edit.setPlaceholderText("Password")
        self.pass_edit.setEchoMode(QLineEdit.Password)
        layout.addWidget(QLabel("Password:"))
        layout.addWidget(self.pass_edit)
        btn = QPushButton("Login")
        btn.clicked.connect(self.do_login)
        layout.addWidget(btn)
        self.setLayout(layout)

    def do_login(self):
        usern = self.user_edit.text().strip()
        passw = self.pass_edit.text().strip()
        if not usern or not passw:
            QMessageBox.warning(self, "Error", "Enter username & password.")
            return
        c = self.connection.cursor()
        c.execute("SELECT USER_ID, USER_GROUP FROM USERS WHERE USERNAME=? AND PASSWORD=?", (usern, passw))
        row = c.fetchone()
        if row:
            self.user_id = row[0]
            self.user_group = row[1]
            self.accept()
        else:
            QMessageBox.warning(self, "Login Failed", "Invalid username or password.")

# ----------------------------------------------------------------------------
# Rule Editor Dialog
# ----------------------------------------------------------------------------
class RuleEditorDialog(QDialog):
    def __init__(self, connection, rule_types, logged_in_user, rule_data=None, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.rule_types = rule_types
        self.logged_in_user = logged_in_user
        self.rule_data = rule_data
        self.setWindowTitle("Edit Rule" if rule_data else "Add New Rule")
        self.resize(900, 500)

        main_layout = QHBoxLayout(self)

        left_box = QGroupBox("Basic Info")
        left_layout = QFormLayout(left_box)

        self.group_combo = QComboBox()
        self.group_combo.addItem("None", None)
        c = self.connection.cursor()
        c.execute("SELECT GROUP_ID, GROUP_NAME FROM BRM_RULE_GROUPS ORDER BY GROUP_NAME")
        grows = get_cursor_rows(c)
        for gr in grows:
            self.group_combo.addItem(gr["GROUP_NAME"], gr["GROUP_ID"])
        left_layout.addRow("Rule Group:", self.group_combo)

        self.parent_rule_combo = QComboBox()
        self.parent_rule_combo.addItem("None", None)
        c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES WHERE STATUS='ACTIVE'")
        prow = get_cursor_rows(c)
        for prr in prow:
            self.parent_rule_combo.addItem(f"{prr['RULE_NAME']} (ID:{prr['RULE_ID']})", prr["RULE_ID"])
        left_layout.addRow("Parent Rule:", self.parent_rule_combo)

        self.name_edit = QLineEdit()
        left_layout.addRow("Rule Name:", self.name_edit)

        self.type_combo = QComboBox()
        for rt_name in self.rule_types.keys():
            self.type_combo.addItem(rt_name)
        left_layout.addRow("Rule Type:", self.type_combo)

        self.status_combo = QComboBox()
        self.status_combo.addItems(["ACTIVE","INACTIVE"])
        left_layout.addRow("Status (informational):", self.status_combo)

        self.start_dt = QDateTimeEdit(QDateTime.currentDateTime())
        self.start_dt.setCalendarPopup(True)
        self.start_dt.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        left_layout.addRow("Start Date:", self.start_dt)

        self.end_dt = QDateTimeEdit(QDateTime.currentDateTime().addDays(30))
        self.end_dt.setCalendarPopup(True)
        self.end_dt.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        left_layout.addRow("End Date:", self.end_dt)

        self.owner_grp_combo = QComboBox()
        c.execute("SELECT DISTINCT GROUP_NAME FROM GROUP_PERMISSIONS ORDER BY GROUP_NAME")
        permsrow = get_cursor_rows(c)
        for pp in permsrow:
            self.owner_grp_combo.addItem(pp["GROUP_NAME"], pp["GROUP_NAME"])
        left_layout.addRow("Owner Group:", self.owner_grp_combo)

        self.global_checkbox = None
        if self.logged_in_user == "Admin":
            self.global_checkbox = QCheckBox("Global (admin-only)")
            left_layout.addRow("Global:", self.global_checkbox)

        self.critical_checkbox = QCheckBox()
        left_layout.addRow("Critical Rule?", self.critical_checkbox)

        self.scope_combo = QComboBox()
        self.scope_combo.addItems(["NONE","GROUP","CLUSTER","GLOBAL"])
        left_layout.addRow("Critical Scope:", self.scope_combo)

        self.cdc_combo = QComboBox()
        self.cdc_combo.addItems(["NONE","FULL_LOAD","INCREMENTAL","INSERT_ONLY","UPSERT"])
        left_layout.addRow("CDC Type:", self.cdc_combo)

        main_layout.addWidget(left_box)

        right_box = QGroupBox("Details & Logic")
        right_layout = QFormLayout(right_box)

        self.sql_editor = QPlainTextEdit()
        font = QtGui.QFont("Courier",10)
        self.sql_editor.setFont(font)
        right_layout.addRow(QLabel("Rule SQL:"), self.sql_editor)

        self.description_edit = QTextEdit()
        right_layout.addRow(QLabel("Description:"), self.description_edit)

        self.justification_edit = QTextEdit()
        right_layout.addRow(QLabel("Justification:"), self.justification_edit)

        btn_box = QHBoxLayout()
        self.save_btn = QPushButton("Save" if rule_data else "Add")
        self.save_btn.clicked.connect(self.on_save)
        btn_box.addWidget(self.save_btn)

        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        btn_box.addWidget(cancel_btn)

        right_layout.addRow(btn_box)
        main_layout.addWidget(right_box)
        self.setLayout(main_layout)

        if self.rule_data:
            self.load_rule_data(self.rule_data)

    def load_rule_data(self, rd):
        if rd["GROUP_ID"]:
            idx = self.group_combo.findData(rd["GROUP_ID"])
            if idx >= 0:
                self.group_combo.setCurrentIndex(idx)
        if rd["PARENT_RULE_ID"]:
            idx2 = self.parent_rule_combo.findData(rd["PARENT_RULE_ID"])
            if idx2 >= 0:
                self.parent_rule_combo.setCurrentIndex(idx2)
        self.name_edit.setText(rd["RULE_NAME"])
        for nm, tid in self.rule_types.items():
            if tid == rd["RULE_TYPE_ID"]:
                i = self.type_combo.findText(nm)
                if i >= 0:
                    self.type_combo.setCurrentIndex(i)
                break
        i_st = self.status_combo.findText(rd["STATUS"])
        if i_st >= 0:
            self.status_combo.setCurrentIndex(i_st)
        from datetime import datetime
        try:
            sdt = datetime.strptime(rd["EFFECTIVE_START_DATE"], "%Y-%m-%d %H:%M:%S")
            self.start_dt.setDateTime(QtCore.QDateTime(sdt))
        except:
            pass
        if rd["EFFECTIVE_END_DATE"]:
            try:
                edt = datetime.strptime(rd["EFFECTIVE_END_DATE"], "%Y-%m-%d %H:%M:%S")
                self.end_dt.setDateTime(QtCore.QDateTime(edt))
            except:
                pass
        iog = self.owner_grp_combo.findText(rd["OWNER_GROUP"])
        if iog >= 0:
            self.owner_grp_combo.setCurrentIndex(iog)
        self.sql_editor.setPlainText(rd["RULE_SQL"] or "")
        if rd.get("DESCRIPTION"):
            self.description_edit.setText(rd["DESCRIPTION"])
        if rd.get("BUSINESS_JUSTIFICATION"):
            self.justification_edit.setText(rd["BUSINESS_JUSTIFICATION"])
        if self.global_checkbox and rd.get("IS_GLOBAL",0) == 1:
            self.global_checkbox.setChecked(True)
        if rd.get("CRITICAL_RULE",0) == 1:
            self.critical_checkbox.setChecked(True)
        ix_scope = self.scope_combo.findText(rd.get("CRITICAL_SCOPE","NONE").upper())
        if ix_scope >= 0:
            self.scope_combo.setCurrentIndex(ix_scope)
        cdc_val = rd.get("CDC_TYPE","NONE").upper()
        ix_cdc = self.cdc_combo.findText(cdc_val)
        if ix_cdc >= 0:
            self.cdc_combo.setCurrentIndex(ix_cdc)

    def on_save(self):
        if not self.name_edit.text().strip():
            QMessageBox.warning(self, "Error", "Name is empty.")
            return
        sql_text = self.sql_editor.toPlainText().strip()
        if not sql_text:
            QMessageBox.warning(self, "Error", "SQL is empty.")
            return
        op_type = get_op_type_from_sql(sql_text)
        rule_dict = {
            "GROUP_ID": self.group_combo.currentData(),
            "PARENT_RULE_ID": self.parent_rule_combo.currentData(),
            "RULE_TYPE_ID": self.rule_types.get(self.type_combo.currentText()),
            "RULE_NAME": self.name_edit.text().strip(),
            "RULE_SQL": sql_text,
            "EFFECTIVE_START_DATE": self.start_dt.dateTime().toString("yyyy-MM-dd HH:mm:ss"),
            "EFFECTIVE_END_DATE": self.end_dt.dateTime().toString("yyyy-MM-dd HH:mm:ss"),
            "STATUS": self.status_combo.currentText(),
            "DESCRIPTION": self.description_edit.toPlainText().strip(),
            "OPERATION_TYPE": op_type,
            "BUSINESS_JUSTIFICATION": self.justification_edit.toPlainText().strip(),
            "OWNER_GROUP": self.owner_grp_combo.currentText().strip(),
            "IS_GLOBAL": 1 if (self.global_checkbox and self.global_checkbox.isChecked()) else 0,
            "CRITICAL_RULE": 1 if self.critical_checkbox.isChecked() else 0,
            "CRITICAL_SCOPE": self.scope_combo.currentText().upper(),
            "CDC_TYPE": self.cdc_combo.currentText().upper()
        }
        created_by = self.logged_in_user
        if self.rule_data:
            rule_dict["RULE_ID"] = self.rule_data["RULE_ID"]
            confirm = QMessageBox.question(self, "Confirm", "Update rule?")
            if confirm != QMessageBox.Yes:
                return
            try:
                update_rule(self.connection, rule_dict, created_by, self.logged_in_user)
                QMessageBox.information(self, "Success", "Rule updated. Approval re-initiated.")
                self.accept()
            except Exception as ex:
                QMessageBox.critical(self, "DB Error", str(ex))
        else:
            confirm = QMessageBox.question(self, "Confirm", "Add new rule?")
            if confirm != QMessageBox.Yes:
                return
            try:
                new_id = add_rule(self.connection, rule_dict, created_by, self.logged_in_user)
                QMessageBox.information(self, "Success", f"Rule created (ID={new_id}). Approval in progress.")
                self.accept()
            except Exception as ex:
                QMessageBox.critical(self, "DB Error", str(ex))

# ----------------------------------------------------------------------------
# Rule Analytics
# ----------------------------------------------------------------------------
class RuleAnalyticsDialog(QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Rule Analytics")
        self.resize(800, 600)

        layout = QVBoxLayout(self)
        chart_hbox = QHBoxLayout()

        self.bar_chart = pg.PlotWidget(title="Number of Rules by Creator")
        self.bar_chart.setBackground('w')
        chart_hbox.addWidget(self.bar_chart)

        self.pie_chart = pg.PlotWidget(title="Rule Status Distribution")
        self.pie_chart.setBackground('w')
        chart_hbox.addWidget(self.pie_chart)

        layout.addLayout(chart_hbox)
        close_btn = QPushButton("Close")
        close_btn.clicked.connect(self.close)
        layout.addWidget(close_btn)
        self.setLayout(layout)
        self.load_charts()

    def load_charts(self):
        c = self.connection.cursor()
        c.execute("SELECT CREATED_BY,COUNT(*) as cnt FROM BRM_RULES GROUP BY CREATED_BY")
        creators = {r["CREATED_BY"]: r["cnt"] for r in get_cursor_rows(c)}
        status_counts = {"ACTIVE":0, "INACTIVE":0, "DELETED":0}
        c.execute("SELECT STATUS,COUNT(*) as sc FROM BRM_RULES GROUP BY STATUS")
        srows = get_cursor_rows(c)
        for s_ in srows:
            status_counts[s_["STATUS"].upper()] = s_["sc"]
        c.execute("SELECT COUNT(*) as delcnt FROM BRM_AUDIT_LOG WHERE ACTION='DELETE'")
        drow = c.fetchone()
        if drow:
            status_counts["DELETED"] = drow[0]

        self.bar_chart.clear()
        if creators:
            sorted_creators = sorted(creators.items(), key=lambda x:x[1], reverse=True)
            names = [x[0] for x in sorted_creators]
            vals = [x[1] for x in sorted_creators]
            bar_item = pg.BarGraphItem(x=range(len(names)), height=vals, width=0.6, brush="skyblue")
            self.bar_chart.addItem(bar_item)
            ax = self.bar_chart.getAxis("bottom")
            ax.setTicks([list(zip(range(len(names)), names))])
            self.bar_chart.setLabel("left", "Number of Rules")
            self.bar_chart.setLabel("bottom", "Created By")
            self.bar_chart.showGrid(x=True, y=True)

        self.pie_chart.clear()
        total = sum(status_counts.values())
        if total>0:
            angles = [360*(v/total) for v in status_counts.values()]
            start = 90
            color_map = {"ACTIVE":"green","INACTIVE":"red","DELETED":"gray"}
            scene = self.pie_chart.scene()
            if not scene:
                from PyQt5.QtWidgets import QGraphicsScene
                scene = QGraphicsScene()
                self.pie_chart.setScene(scene)
            keys = list(status_counts.keys())
            for i, ang in enumerate(angles):
                k = keys[i]
                if ang>0:
                    wedge = QtGui.QPainterPath()
                    wedge.moveTo(0,0)
                    wedge.arcTo(-100,-100,200,200,start,ang)
                    wedge.closeSubpath()
                    brush = QtGui.QBrush(QtGui.QColor(color_map.get(k,"blue")))
                    path_item = pg.QtWidgets.QGraphicsPathItem(wedge)
                    path_item.setBrush(brush)
                    path_item.setPen(pg.mkPen("black"))
                    scene.addItem(path_item)
                    mid = start + (ang/2)
                    rad = (mid*math.pi)/180
                    xx = 50*math.cos(rad)
                    yy = 50*math.sin(rad)
                    perc = int((ang/360)*100)
                    lab = pg.TextItem(f"{k} ({perc}%)",anchor=(0.5,0.5))
                    lab.setPos(xx, yy)
                    scene.addItem(lab)
                    start += ang
            self.pie_chart.setAspectLocked(True)

# ----------------------------------------------------------------------------
# Audit Log Viewer
# ----------------------------------------------------------------------------
class AuditLogViewer(QDialog):
    def __init__(self, connection, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_group = user_group
        self.setWindowTitle("Audit Logs")
        self.resize(800, 600)
        layout = QVBoxLayout(self)

        top_h = QHBoxLayout()
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Search by Action, Table, or Action By...")
        self.search_edit.textChanged.connect(self.perform_search)
        top_h.addWidget(QLabel("Search:"))
        top_h.addWidget(self.search_edit)
        layout.addLayout(top_h)

        self.audit_table = QTableWidget(0, 8)
        self.audit_table.setHorizontalHeaderLabels(["Audit ID","Action","Table","Record ID","Action By","Old Data","New Data","Timestamp"])
        self.audit_table.horizontalHeader().setStretchLastSection(True)
        self.audit_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.audit_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        layout.addWidget(self.audit_table)

        ref_btn = QPushButton("Refresh Logs")
        ref_btn.clicked.connect(self.load_logs)
        layout.addWidget(ref_btn)

        self.setLayout(layout)
        self.load_logs()

    def load_logs(self):
        c = self.connection.cursor()
        c.execute("""
        SELECT AUDIT_ID, ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA, ACTION_TIMESTAMP
        FROM BRM_AUDIT_LOG
        ORDER BY ACTION_TIMESTAMP DESC
        """)
        rows = get_cursor_rows(c)
        self.audit_table.setRowCount(0)
        for row in rows:
            r = self.audit_table.rowCount()
            self.audit_table.insertRow(r)
            self.audit_table.setItem(r, 0, QTableWidgetItem(str(row["AUDIT_ID"])))
            self.audit_table.setItem(r, 1, QTableWidgetItem(row["ACTION"]))
            self.audit_table.setItem(r, 2, QTableWidgetItem(row["TABLE_NAME"]))
            self.audit_table.setItem(r, 3, QTableWidgetItem(row["RECORD_ID"]))
            self.audit_table.setItem(r, 4, QTableWidgetItem(row["ACTION_BY"]))

            oldtxt = ""
            if row["OLD_DATA"]:
                try:
                    oldtxt = json.dumps(json.loads(row["OLD_DATA"]), indent=2)
                except:
                    oldtxt = row["OLD_DATA"]
            self.audit_table.setItem(r, 5, QTableWidgetItem(oldtxt))

            newtxt = ""
            if row["NEW_DATA"]:
                try:
                    newtxt = json.dumps(json.loads(row["NEW_DATA"]), indent=2)
                except:
                    newtxt = row["NEW_DATA"]
            self.audit_table.setItem(r, 6, QTableWidgetItem(newtxt))

            self.audit_table.setItem(r, 7, QTableWidgetItem(str(row["ACTION_TIMESTAMP"])))

    def perform_search(self, text):
        txt_l = text.lower()
        for row in range(self.audit_table.rowCount()):
            match = False
            for col in (1,2,4):
                it = self.audit_table.item(row, col)
                if it and txt_l in it.text().lower():
                    match = True
                    break
            self.audit_table.setRowHidden(row, not match)

# ----------------------------------------------------------------------------
# Search Rule Dialog
# ----------------------------------------------------------------------------
class SearchRuleDialog(QDialog):
    def __init__(self, connection, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_group = user_group
        self.setWindowTitle("Search Rules")
        self.resize(800,600)
        layout = QVBoxLayout(self)

        top_h = QHBoxLayout()
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Enter name or SQL snippet...")
        self.search_edit.textChanged.connect(self.load_results)
        top_h.addWidget(QLabel("Search:"))
        top_h.addWidget(self.search_edit)
        layout.addLayout(top_h)

        self.res_table = QTableWidget(0,6)
        self.res_table.setHorizontalHeaderLabels(["Rule ID","Name","SQL","Status","Version","Created By"])
        self.res_table.horizontalHeader().setStretchLastSection(True)
        self.res_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.res_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        layout.addWidget(self.res_table)

        ref_btn = QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_results)
        layout.addWidget(ref_btn)

        self.setLayout(layout)
        self.load_results()

    def load_results(self):
        c = self.connection.cursor()
        txt = self.search_edit.text().strip()
        if txt:
            c.execute("""
            SELECT RULE_ID,RULE_NAME,RULE_SQL,STATUS,VERSION,CREATED_BY
            FROM BRM_RULES
            WHERE RULE_NAME LIKE ? OR RULE_SQL LIKE ?
            ORDER BY RULE_ID DESC
            """,(f"%{txt}%", f"%{txt}%"))
        else:
            c.execute("""
            SELECT RULE_ID,RULE_NAME,RULE_SQL,STATUS,VERSION,CREATED_BY
            FROM BRM_RULES
            ORDER BY RULE_ID DESC
            """)
        rows = get_cursor_rows(c)
        self.res_table.setRowCount(0)
        for row in rows:
            r = self.res_table.rowCount()
            self.res_table.insertRow(r)
            self.res_table.setItem(r,0,QTableWidgetItem(str(row["RULE_ID"])))
            self.res_table.setItem(r,1,QTableWidgetItem(row["RULE_NAME"]))
            self.res_table.setItem(r,2,QTableWidgetItem(row["RULE_SQL"]))
            self.res_table.setItem(r,3,QTableWidgetItem(row["STATUS"]))
            self.res_table.setItem(r,4,QTableWidgetItem(str(row["VERSION"])))
            self.res_table.setItem(r,5,QTableWidgetItem(row["CREATED_BY"]))

# ----------------------------------------------------------------------------
# Rule Dashboard
# ----------------------------------------------------------------------------
class RuleDashboard(QGroupBox):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__("Rule Dashboard", parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group
        self.selected_rule_id = None
        self.current_page = 1
        self.records_per_page = 50
        self.total_pages = 1

        main_layout = QVBoxLayout(self)

        top_h = QHBoxLayout()
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Search name or SQL...")
        top_h.addWidget(QLabel("Search:"))
        top_h.addWidget(self.search_edit)

        self.status_filter = QComboBox()
        self.status_filter.addItem("All Statuses", None)
        self.status_filter.addItem("ACTIVE","ACTIVE")
        self.status_filter.addItem("INACTIVE","INACTIVE")
        self.status_filter.addItem("DELETED","DELETED")
        top_h.addWidget(QLabel("Status:"))
        top_h.addWidget(self.status_filter)

        main_layout.addLayout(top_h)

        self.rule_table = QTableWidget(0,8)
        self.rule_table.setHorizontalHeaderLabels(["Rule ID","Name","SQL","Status","Version","Owner Group","Created Timestamp","Approval Status"])
        self.rule_table.horizontalHeader().setStretchLastSection(True)
        self.rule_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.rule_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.rule_table.itemSelectionChanged.connect(self.update_selected_rule_id)
        main_layout.addWidget(self.rule_table)

        nav_h = QHBoxLayout()
        self.prev_btn = QPushButton("Previous")
        self.next_btn = QPushButton("Next")
        self.page_label = QLabel("Page 1/1")
        nav_h.addWidget(self.prev_btn)
        nav_h.addWidget(self.page_label)
        nav_h.addWidget(self.next_btn)
        main_layout.addLayout(nav_h)

        btn_h = QHBoxLayout()
        ref_btn = QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_rules)
        btn_h.addWidget(ref_btn)

        run_etl_btn = QPushButton("Run ETL (Execute Rules)")
        run_etl_btn.clicked.connect(self.run_etl)
        btn_h.addWidget(run_etl_btn)

        analytics_btn = QPushButton("Rule Analytics")
        analytics_btn.clicked.connect(self.show_analytics)
        btn_h.addWidget(analytics_btn)

        btn_h.addStretch()
        main_layout.addLayout(btn_h)

        self.setLayout(main_layout)
        self.search_edit.textChanged.connect(self.load_rules)
        self.status_filter.currentIndexChanged.connect(self.load_rules)
        self.prev_btn.clicked.connect(self.prev_page)
        self.next_btn.clicked.connect(self.next_page)

        self.load_rules()

    def build_filter_query(self):
        f = []
        p = []
        txt = self.search_edit.text().strip()
        if txt:
            f.append("(RULE_NAME LIKE ? OR RULE_SQL LIKE ?)")
            p.extend([f"%{txt}%", f"%{txt}%"])
        st = self.status_filter.currentData()
        if st:
            if st.upper() == "DELETED":
                f.append("RULE_ID IN (SELECT RECORD_ID FROM BRM_AUDIT_LOG WHERE ACTION='DELETE')")
            else:
                f.append("STATUS=?")
                p.append(st)
        clause = " AND ".join(f) if f else "1"
        return clause, p

    def load_rules(self):
        c = self.connection.cursor()
        clause, params = self.build_filter_query()
        c.execute(f"SELECT COUNT(*) as ccount FROM BRM_RULES WHERE {clause}", params)
        rowc = c.fetchone()
        total = rowc[0] if rowc else 0
        import math
        self.total_pages = max(1, math.ceil(total/self.records_per_page))
        if self.current_page>self.total_pages:
            self.current_page=self.total_pages
        elif self.current_page<1:
            self.current_page=1
        self.page_label.setText(f"Page {self.current_page}/{self.total_pages}")

        offset = (self.current_page-1)*self.records_per_page
        c.execute(f"""
        SELECT RULE_ID,RULE_NAME,RULE_SQL,STATUS,VERSION,OWNER_GROUP,CREATED_TIMESTAMP,APPROVAL_STATUS
        FROM BRM_RULES
        WHERE {clause}
        ORDER BY RULE_ID DESC
        OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
        """, (*params, offset, self.records_per_page))
        rows = get_cursor_rows(c)
        self.rule_table.setRowCount(0)
        for rd in rows:
            r = self.rule_table.rowCount()
            self.rule_table.insertRow(r)
            self.rule_table.setItem(r,0,QTableWidgetItem(str(rd["RULE_ID"])))
            self.rule_table.setItem(r,1,QTableWidgetItem(rd["RULE_NAME"]))
            self.rule_table.setItem(r,2,QTableWidgetItem(rd["RULE_SQL"]))
            st_item = QTableWidgetItem(rd["STATUS"])
            if rd["STATUS"].lower()=="active":
                st_item.setBackground(QColor(144,238,144))
            else:
                st_item.setBackground(QColor(255,182,193))
            self.rule_table.setItem(r,3, st_item)
            self.rule_table.setItem(r,4,QTableWidgetItem(str(rd["VERSION"])))
            self.rule_table.setItem(r,5,QTableWidgetItem(rd["OWNER_GROUP"]))
            self.rule_table.setItem(r,6,QTableWidgetItem(str(rd["CREATED_TIMESTAMP"])))
            self.rule_table.setItem(r,7,QTableWidgetItem(rd["APPROVAL_STATUS"]))

    def update_selected_rule_id(self):
        sel = self.rule_table.selectedItems()
        if not sel:
            self.selected_rule_id = None
            return
        row = sel[0].row()
        it = self.rule_table.item(row, 0)
        if it:
            self.selected_rule_id = int(it.text())
        else:
            self.selected_rule_id = None

    def get_selected_rule_ids(self):
        idxs = self.rule_table.selectionModel().selectedRows()
        rids = []
        for i in idxs:
            row = i.row()
            it = self.rule_table.item(row,0)
            if it:
                rids.append(int(it.text()))
        return rids

    def prev_page(self):
        if self.current_page>1:
            self.current_page-=1
            self.load_rules()

    def next_page(self):
        if self.current_page<self.total_pages:
            self.current_page+=1
            self.load_rules()

    def run_etl(self):
        executed, skipped = execute_rules_in_order(self.connection)
        msg = f"ETL finished.\nExecuted: {executed}\nSkipped: {list(skipped)}"
        QMessageBox.information(self, "ETL", msg)
        self.load_rules()

    def show_analytics(self):
        dlg = RuleAnalyticsDialog(self.connection, self)
        dlg.exec_()

# ----------------------------------------------------------------------------
# BusinessRuleManagementTab
# ----------------------------------------------------------------------------
class BusinessRuleManagementTab(QWidget):
    def __init__(self, main_app, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.main_app = main_app
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group

        layout = QVBoxLayout(self)
        btn_h = QHBoxLayout()

        add_btn = QPushButton("Add Rule")
        add_btn.clicked.connect(self.on_add_rule)
        btn_h.addWidget(add_btn)

        upd_btn = QPushButton("Update Rule")
        upd_btn.clicked.connect(self.on_update_rule)
        btn_h.addWidget(upd_btn)

        deact_btn = QPushButton("Deactivate Selected")
        deact_btn.clicked.connect(self.on_deactivate_rules)
        btn_h.addWidget(deact_btn)

        del_btn = QPushButton("Delete Rule")
        del_btn.clicked.connect(self.on_delete_rule)
        btn_h.addWidget(del_btn)

        aud_btn = QPushButton("View Audit Logs")
        aud_btn.clicked.connect(self.main_app.launch_audit_log_viewer)
        btn_h.addWidget(aud_btn)

        srch_btn = QPushButton("Search Rules")
        srch_btn.clicked.connect(self.main_app.launch_search_rule_dialog)
        btn_h.addWidget(srch_btn)

        btn_h.addStretch()
        layout.addLayout(btn_h)

        self.rule_dash = RuleDashboard(self.connection, self.user_id, self.user_group)
        layout.addWidget(self.rule_dash)

        layout.addStretch()
        self.setLayout(layout)

    def on_add_rule(self):
        rtypes = self.main_app.get_rule_types()
        dlg = RuleEditorDialog(self.connection, rtypes, self.user_group, parent=self)
        if dlg.exec_() == QDialog.Accepted:
            self.rule_dash.load_rules()

    def on_update_rule(self):
        rid = self.rule_dash.selected_rule_id
        if not rid:
            QMessageBox.warning(self, "No Selection", "Select a rule first.")
            return
        c = self.connection.cursor()
        c.execute("SELECT * FROM BRM_RULES WHERE RULE_ID=?", (rid,))
        row = get_cursor_one(c)
        if not row:
            QMessageBox.warning(self, "Not Found", "No rule with that ID.")
            return
        rule_data = dict(row)
        rtypes = self.main_app.get_rule_types()
        dlg = RuleEditorDialog(self.connection, rtypes, self.user_group, rule_data, self)
        if dlg.exec_() == QDialog.Accepted:
            self.rule_dash.load_rules()

    def on_deactivate_rules(self):
        rids = self.rule_dash.get_selected_rule_ids()
        if not rids:
            QMessageBox.warning(self, "None", "No rules selected.")
            return
        success = 0
        fails = []
        for rr in rids:
            try:
                deactivate_rule(self.connection, rr, self.user_group, self.user_group)
                success += 1
            except Exception as ex:
                fails.append(f"Rule {rr}: {str(ex)}")
        msg = f"Deactivation done. Success={success}"
        if fails:
            msg += "\nFails:\n" + "\n".join(fails)
        QMessageBox.information(self, "Deactivate", msg)
        self.rule_dash.load_rules()

    def on_delete_rule(self):
        rids = self.rule_dash.get_selected_rule_ids()
        if not rids:
            QMessageBox.warning(self, "None", "No rule(s) selected.")
            return
        confirm = QMessageBox.question(self, "Confirm", f"Delete {len(rids)} rule(s)?")
        if confirm != QMessageBox.Yes:
            return
        success = 0
        fails = []
        for rid in rids:
            try:
                delete_rule(self.connection, rid, self.user_group, self.user_group)
                success += 1
            except Exception as ex:
                fails.append(f"Rule {rid}: {str(ex)}")
        msg = f"Deletion done. Success={success}"
        if fails:
            msg += "\nFails:\n" + "\n".join(fails)
        QMessageBox.information(self, "Delete", msg)
        self.rule_dash.load_rules()

# ----------------------------------------------------------------------------
# Backup/Restore Helpers
# ----------------------------------------------------------------------------
class BackupRestoreHelpers:
    @staticmethod
    def backup_group(conn, group_name, action_by="System"):
        c = conn.cursor()
        c.execute("SELECT * FROM BRM_RULES WHERE OWNER_GROUP=?", (group_name,))
        rules = get_cursor_rows(c)
        data = {"rules": []}
        for r in rules:
            rd = dict(r)
            rid = rd["RULE_ID"]
            c.execute("SELECT * FROM BRM_RULE_TABLE_DEPENDENCIES WHERE RULE_ID=?", (rid,))
            rd["dependencies"] = get_cursor_rows(c)
            c.execute("SELECT * FROM BRM_RULE_LINEAGE WHERE RULE_ID=?", (rid,))
            rd["lineage"] = get_cursor_rows(c)
            c.execute("SELECT * FROM BRM_COLUMN_MAPPING WHERE RULE_ID=?", (rid,))
            rd["column_mappings"] = get_cursor_rows(c)
            data["rules"].append(rd)
        js = json.dumps(data, default=str)
        c.execute("SELECT ISNULL(MAX(BACKUP_VERSION),0) as mv FROM BRM_GROUP_BACKUPS WHERE GROUP_NAME=?", (group_name,))
        row = c.fetchone()
        nextv = (row[0] if row else 0)+1
        c.execute("INSERT INTO BRM_GROUP_BACKUPS (GROUP_NAME, BACKUP_VERSION, BACKUP_JSON) VALUES(?, ?, ?)", (group_name, nextv, js))
        conn.commit()
        add_audit_log(conn, "BACKUP", "BRM_GROUP_BACKUPS", group_name, action_by, {"group": group_name}, {"version": nextv})
        return nextv

    @staticmethod
    def restore_group(conn, group_name, backup_version, action_by="System"):
        c = conn.cursor()
        c.execute("SELECT BACKUP_JSON FROM BRM_GROUP_BACKUPS WHERE GROUP_NAME=? AND BACKUP_VERSION=?", (group_name, backup_version))
        row = c.fetchone()
        if not row:
            raise ValueError("No backup found.")
        data = json.loads(row[0])
        c.execute("DELETE FROM BRM_RULE_LINEAGE WHERE RULE_ID IN (SELECT RULE_ID FROM BRM_RULES WHERE OWNER_GROUP=?)", (group_name,))
        c.execute("DELETE FROM BRM_RULE_TABLE_DEPENDENCIES WHERE RULE_ID IN (SELECT RULE_ID FROM BRM_RULES WHERE OWNER_GROUP=?)", (group_name,))
        c.execute("DELETE FROM BRM_COLUMN_MAPPING WHERE RULE_ID IN (SELECT RULE_ID FROM BRM_RULES WHERE OWNER_GROUP=?)", (group_name,))
        c.execute("DELETE FROM BRM_RULES WHERE OWNER_GROUP=?", (group_name,))
        for rdict in data["rules"]:
            c.execute("""
            INSERT INTO BRM_RULES(
              RULE_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
              EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION, CREATED_BY,
              DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION, CREATED_TIMESTAMP,
              UPDATED_BY, OWNER_GROUP, CLUSTER_NAME, GROUP_ID, APPROVAL_STATUS,
              IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE
            )
            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
            """, (
                rdict["RULE_ID"], rdict["PARENT_RULE_ID"], rdict["RULE_TYPE_ID"], rdict["RULE_NAME"], rdict["RULE_SQL"],
                rdict["EFFECTIVE_START_DATE"], rdict["EFFECTIVE_END_DATE"], rdict["STATUS"], rdict["VERSION"],
                rdict["CREATED_BY"], rdict["DESCRIPTION"], rdict["OPERATION_TYPE"], rdict["BUSINESS_JUSTIFICATION"],
                rdict["CREATED_TIMESTAMP"], rdict["UPDATED_BY"], rdict["OWNER_GROUP"], rdict.get("CLUSTER_NAME",""),
                rdict.get("GROUP_ID",None), rdict.get("APPROVAL_STATUS","DRAFT"), rdict.get("IS_GLOBAL",0),
                rdict.get("CRITICAL_RULE",0), rdict.get("CRITICAL_SCOPE","NONE"), rdict.get("CDC_TYPE","NONE")
            ))
            rid = rdict["RULE_ID"]
            for d_ in rdict.get("dependencies", []):
                c.execute("""
                INSERT INTO BRM_RULE_TABLE_DEPENDENCIES (DEPENDENCY_ID, RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME)
                VALUES(?,?,?,?,?)
                """, (d_["DEPENDENCY_ID"], rid, d_["DATABASE_NAME"], d_["TABLE_NAME"], d_["COLUMN_NAME"]))
            for l_ in rdict.get("lineage", []):
                c.execute("""
                INSERT INTO BRM_RULE_LINEAGE (LINEAGE_ID, RULE_ID, SOURCE_INFO, TARGET_INFO, TRANSFORMATION_DETAILS, CREATED_TIMESTAMP)
                VALUES(?,?,?,?,?,?)
                """, (l_["LINEAGE_ID"], rid, l_["SOURCE_INFO"], l_["TARGET_INFO"], l_["TRANSFORMATION_DETAILS"], l_["CREATED_TIMESTAMP"]))
            for m_ in rdict.get("column_mappings", []):
                c.execute("""
                INSERT INTO BRM_COLUMN_MAPPING(MAPPING_ID,RULE_ID,SOURCE_RULE_ID,SOURCE_COLUMN_NAME,TARGET_COLUMN_NAME)
                VALUES(?,?,?,?,?)
                """,(m_["MAPPING_ID"],m_["RULE_ID"],m_["SOURCE_RULE_ID"],m_["SOURCE_COLUMN_NAME"],m_["TARGET_COLUMN_NAME"]))
        conn.commit()
        add_audit_log(conn, "RESTORE", "BRM_RULES", group_name, action_by, {"group": group_name, "version": backup_version}, None)

    @staticmethod
    def backup_custom_group(conn, custom_group_id, action_by="System"):
        c = conn.cursor()
        c.execute("SELECT CUSTOM_GROUP_NAME FROM BRM_CUSTOM_RULE_GROUPS WHERE CUSTOM_GROUP_ID=?", (custom_group_id,))
        rowg = c.fetchone()
        if not rowg:
            raise ValueError("Custom group ID not found.")
        c.execute("""
        SELECT R.*
        FROM BRM_CUSTOM_GROUP_MEMBERS M
        JOIN BRM_RULES R ON M.RULE_ID=R.RULE_ID
        WHERE M.CUSTOM_GROUP_ID=?
        """, (custom_group_id,))
        rules = get_cursor_rows(c)
        data = {"rules":[]}
        for rule in rules:
            rd = dict(rule)
            rid = rule["RULE_ID"]
            c.execute("SELECT * FROM BRM_RULE_TABLE_DEPENDENCIES WHERE RULE_ID=?", (rid,))
            rd["dependencies"] = get_cursor_rows(c)
            c.execute("SELECT * FROM BRM_RULE_LINEAGE WHERE RULE_ID=?", (rid,))
            rd["lineage"] = get_cursor_rows(c)
            c.execute("SELECT * FROM BRM_COLUMN_MAPPING WHERE RULE_ID=?", (rid,))
            rd["column_mappings"] = get_cursor_rows(c)
            data["rules"].append(rd)
        c.execute("SELECT ISNULL(MAX(BACKUP_VERSION),0) as mv FROM BRM_CUSTOM_GROUP_BACKUPS WHERE CUSTOM_GROUP_ID=?", (custom_group_id,))
        row = c.fetchone()
        nextv = (row[0] if row else 0)+1
        js = json.dumps(data, default=str)
        c.execute("""
        INSERT INTO BRM_CUSTOM_GROUP_BACKUPS(CUSTOM_GROUP_ID,BACKUP_VERSION,BACKUP_JSON)
        VALUES(?,?,?)
        """,(custom_group_id, nextv, js))
        conn.commit()
        add_audit_log(conn,"BACKUP_CUSTOM_GROUP","BRM_CUSTOM_GROUP_BACKUPS",custom_group_id,action_by,{"cgid":custom_group_id},{"version":nextv})
        return nextv

    @staticmethod
    def restore_custom_group(conn, custom_group_id, backup_version, action_by="System"):
        c = conn.cursor()
        c.execute("SELECT CUSTOM_GROUP_NAME FROM BRM_CUSTOM_RULE_GROUPS WHERE CUSTOM_GROUP_ID=?", (custom_group_id,))
        rowg = c.fetchone()
        if not rowg:
            raise ValueError("Custom group not found.")
        c.execute("""
        SELECT BACKUP_JSON
        FROM BRM_CUSTOM_GROUP_BACKUPS
        WHERE CUSTOM_GROUP_ID=? AND BACKUP_VERSION=?
        """,(custom_group_id, backup_version))
        rowb = c.fetchone()
        if not rowb:
            raise ValueError("No backup found.")
        data = json.loads(rowb[0])
        c.execute("SELECT RULE_ID FROM BRM_CUSTOM_GROUP_MEMBERS WHERE CUSTOM_GROUP_ID=?", (custom_group_id,))
        mem_ids = [x["RULE_ID"] for x in get_cursor_rows(c)]
        if mem_ids:
            placeholders = ",".join(["?"]*len(mem_ids))
            c.execute(f"DELETE FROM BRM_RULE_LINEAGE WHERE RULE_ID IN ({placeholders})", mem_ids)
            c.execute(f"DELETE FROM BRM_RULE_TABLE_DEPENDENCIES WHERE RULE_ID IN ({placeholders})", mem_ids)
            c.execute(f"DELETE FROM BRM_COLUMN_MAPPING WHERE RULE_ID IN ({placeholders})", mem_ids)
            c.execute(f"DELETE FROM BRM_RULES WHERE RULE_ID IN ({placeholders})", mem_ids)
        for rd in data["rules"]:
            c.execute("""
            INSERT INTO BRM_RULES(
                RULE_ID,PARENT_RULE_ID,RULE_TYPE_ID,RULE_NAME,RULE_SQL,
                EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,STATUS,VERSION,
                CREATED_BY,DESCRIPTION,OPERATION_TYPE,BUSINESS_JUSTIFICATION,
                CREATED_TIMESTAMP,UPDATED_BY,OWNER_GROUP,CLUSTER_NAME,GROUP_ID,
                APPROVAL_STATUS,IS_GLOBAL,CRITICAL_RULE,CRITICAL_SCOPE,CDC_TYPE
            )
            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
            """,(
                rd["RULE_ID"], rd["PARENT_RULE_ID"], rd["RULE_TYPE_ID"], rd["RULE_NAME"], rd["RULE_SQL"],
                rd["EFFECTIVE_START_DATE"], rd["EFFECTIVE_END_DATE"], rd["STATUS"], rd["VERSION"],
                rd["CREATED_BY"], rd["DESCRIPTION"], rd["OPERATION_TYPE"], rd.get("BUSINESS_JUSTIFICATION",""),
                rd["CREATED_TIMESTAMP"], rd["UPDATED_BY"], rd["OWNER_GROUP"], rd.get("CLUSTER_NAME",""),
                rd.get("GROUP_ID",None), rd.get("APPROVAL_STATUS","DRAFT"),
                rd.get("IS_GLOBAL",0), rd.get("CRITICAL_RULE",0),
                rd.get("CRITICAL_SCOPE","NONE"), rd.get("CDC_TYPE","NONE")
            ))
            rid = rd["RULE_ID"]
            for d_ in rd.get("dependencies",[]):
                c.execute("""
                INSERT INTO BRM_RULE_TABLE_DEPENDENCIES(DEPENDENCY_ID,RULE_ID,DATABASE_NAME,TABLE_NAME,COLUMN_NAME)
                VALUES(?,?,?,?,?)
                """,(d_["DEPENDENCY_ID"], rid, d_["DATABASE_NAME"], d_["TABLE_NAME"], d_["COLUMN_NAME"]))
            for l_ in rd.get("lineage",[]):
                c.execute("""
                INSERT INTO BRM_RULE_LINEAGE(LINEAGE_ID,RULE_ID,SOURCE_INFO,TARGET_INFO,TRANSFORMATION_DETAILS,CREATED_TIMESTAMP)
                VALUES(?,?,?,?,?,?)
                """,(l_["LINEAGE_ID"], rid, l_["SOURCE_INFO"], l_["TARGET_INFO"], l_["TRANSFORMATION_DETAILS"], l_["CREATED_TIMESTAMP"]))
            for m_ in rd.get("column_mappings",[]):
                c.execute("""
                INSERT INTO BRM_COLUMN_MAPPING(MAPPING_ID,RULE_ID,SOURCE_RULE_ID,SOURCE_COLUMN_NAME,TARGET_COLUMN_NAME)
                VALUES(?,?,?,?,?)
                """,(m_["MAPPING_ID"], m_["RULE_ID"], m_["SOURCE_RULE_ID"],
                     m_["SOURCE_COLUMN_NAME"], m_["TARGET_COLUMN_NAME"]))
            c.execute("INSERT OR IGNORE INTO BRM_CUSTOM_GROUP_MEMBERS(CUSTOM_GROUP_ID,RULE_ID) VALUES(?,?)",(custom_group_id, rid))
        conn.commit()
        add_audit_log(conn,"RESTORE_CUSTOM_GROUP","BRM_RULES",custom_group_id,action_by,
                      {"cgid":custom_group_id,"version":backup_version}, None)

# ----------------------------------------------------------------------------
# CustomRuleGroupEnhancedTab
# ----------------------------------------------------------------------------
class CustomRuleGroupEnhancedTab(QWidget):
    def __init__(self, main_app, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.main_app = main_app
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group

        layout = QVBoxLayout(self)

        top_h = QHBoxLayout()
        self.new_group_edit = QLineEdit()
        self.new_group_edit.setPlaceholderText("Enter new custom group name")
        top_h.addWidget(self.new_group_edit)

        create_btn = QPushButton("Create Group")
        create_btn.clicked.connect(self.create_group)
        top_h.addWidget(create_btn)

        rename_btn = QPushButton("Rename Group")
        rename_btn.clicked.connect(self.rename_group)
        top_h.addWidget(rename_btn)

        del_btn = QPushButton("Delete Group")
        del_btn.clicked.connect(self.delete_group)
        top_h.addWidget(del_btn)

        backup_btn = QPushButton("Backup Group")
        backup_btn.clicked.connect(self.backup_group)
        top_h.addWidget(backup_btn)

        restore_btn = QPushButton("Restore Group")
        restore_btn.clicked.connect(self.restore_group)
        top_h.addWidget(restore_btn)

        top_h.addStretch()
        layout.addLayout(top_h)

        splitter = QSplitter(Qt.Horizontal)
        self.tree = QtWidgets.QTreeWidget()
        self.tree.setHeaderLabels(["Custom Group / Rule"])
        self.tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree.customContextMenuRequested.connect(self.on_tree_context)
        splitter.addWidget(self.tree)

        right_widget = QWidget()
        rw_layout = QVBoxLayout(right_widget)
        self.rule_search = QLineEdit()
        self.rule_search.setPlaceholderText("Search available rules ...")
        self.rule_search.textChanged.connect(self.load_available_rules)
        rw_layout.addWidget(self.rule_search)
        self.rule_list = QListWidget()
        self.rule_list.setSelectionMode(QAbstractItemView.ExtendedSelection)
        rw_layout.addWidget(self.rule_list)
        assign_btn = QPushButton("Assign Selected Rule(s)")
        assign_btn.clicked.connect(self.assign_rules)
        rw_layout.addWidget(assign_btn)

        splitter.addWidget(right_widget)
        layout.addWidget(splitter)
        self.setLayout(layout)

        self.refresh_all()

    def refresh_all(self):
        self.load_group_tree()
        self.load_available_rules()

    def load_group_tree(self):
        self.tree.clear()
        c = self.connection.cursor()
        c.execute("""
        SELECT CUSTOM_GROUP_ID, CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP
        FROM BRM_CUSTOM_RULE_GROUPS
        ORDER BY CUSTOM_GROUP_ID DESC
        """)
        groups = get_cursor_rows(c)
        for g in groups:
            g_item = QtWidgets.QTreeWidgetItem([f"{g['CUSTOM_GROUP_NAME']} ({g['OWNER_BUSINESS_GROUP']})"])
            g_item.setData(0, Qt.UserRole, g["CUSTOM_GROUP_ID"])
            g_item.setBackground(0, QColor("lightgray"))
            self.tree.addTopLevelItem(g_item)

            c.execute("""
            SELECT R.*
            FROM BRM_CUSTOM_GROUP_MEMBERS M
            JOIN BRM_RULES R ON M.RULE_ID = R.RULE_ID
            WHERE M.CUSTOM_GROUP_ID=?
            """,(g["CUSTOM_GROUP_ID"],))
            rule_rows = get_cursor_rows(c)
            for rr in rule_rows:
                txt = f"Rule {rr['RULE_ID']}: {rr['RULE_NAME']}"
                rr_item = QtWidgets.QTreeWidgetItem([txt])
                rr_item.setData(0, Qt.UserRole, rr["RULE_ID"])
                if rr["IS_GLOBAL"] == 1:
                    rr_item.setBackground(0, QColor("lightblue"))
                if rr["CRITICAL_RULE"] == 1:
                    rr_item.setBackground(0, QColor("lightcoral"))
                g_item.addChild(rr_item)
        self.tree.expandAll()

    def load_available_rules(self):
        self.rule_list.clear()
        txt = self.rule_search.text().strip()
        c = self.connection.cursor()
        if txt:
            c.execute("""
            SELECT RULE_ID, RULE_NAME, OWNER_GROUP
            FROM BRM_RULES
            WHERE RULE_NAME LIKE ? OR RULE_SQL LIKE ?
            ORDER BY RULE_ID DESC
            """,(f"%{txt}%", f"%{txt}%"))
        else:
            c.execute("SELECT RULE_ID, RULE_NAME, OWNER_GROUP FROM BRM_RULES ORDER BY RULE_ID DESC")
        rows = get_cursor_rows(c)
        c.execute("SELECT DISTINCT RULE_ID FROM BRM_CUSTOM_GROUP_MEMBERS")
        assigned = set(x["RULE_ID"] for x in get_cursor_rows(c))
        for r in rows:
            if r["RULE_ID"] in assigned:
                continue
            disp = f"Rule {r['RULE_ID']}: {r['RULE_NAME']} (Owner:{r['OWNER_GROUP']})"
            it = QListWidgetItem(disp)
            it.setData(Qt.UserRole, r["RULE_ID"])
            self.rule_list.addItem(it)

    def on_tree_context(self, pos):
        item = self.tree.itemAt(pos)
        if not item:
            return
        parent = item.parent()
        if parent:
            menu = QtWidgets.QMenu()
            rem_act = menu.addAction("Remove Rule from Group")
            chosen = menu.exec_(self.tree.viewport().mapToGlobal(pos))
            if chosen == rem_act:
                group_id = parent.data(0, Qt.UserRole)
                rule_id = item.data(0, Qt.UserRole)
                c = self.connection.cursor()
                c.execute("DELETE FROM BRM_CUSTOM_GROUP_MEMBERS WHERE CUSTOM_GROUP_ID=? AND RULE_ID=?", (group_id, rule_id))
                self.connection.commit()
                QMessageBox.information(self, "Removed", f"Rule {rule_id} removed.")
                self.refresh_all()

    def create_group(self):
        name = self.new_group_edit.text().strip()
        if not name:
            QMessageBox.warning(self, "Error", "No name.")
            return
        c = self.connection.cursor()
        c.execute("""
        INSERT INTO BRM_CUSTOM_RULE_GROUPS(CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
        VALUES(?,?,?)
        """,(name, self.user_group, f"User:{self.user_id}"))
        self.connection.commit()
        QMessageBox.information(self, "Success", f"Created custom group {name}.")
        self.new_group_edit.clear()
        self.refresh_all()

    def rename_group(self):
        sel = self.tree.selectedItems()
        if not sel:
            QMessageBox.warning(self, "None", "No group selected.")
            return
        g_item = sel[0]
        if g_item.parent():
            g_item = g_item.parent()
        gid = g_item.data(0, Qt.UserRole)
        new_name, ok = QInputDialog.getText(self, "Rename", "New group name:")
        if not ok or not new_name.strip():
            return
        c = self.connection.cursor()
        try:
            c.execute("UPDATE BRM_CUSTOM_RULE_GROUPS SET CUSTOM_GROUP_NAME=? WHERE CUSTOM_GROUP_ID=?", (new_name.strip(), gid))
            self.connection.commit()
            QMessageBox.information(self, "Renamed", "Group renamed.")
            self.refresh_all()
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))

    def delete_group(self):
        sel = self.tree.selectedItems()
        if not sel:
            QMessageBox.warning(self, "None", "No group selected.")
            return
        g_item = sel[0]
        if g_item.parent():
            g_item = g_item.parent()
        gid = g_item.data(0, Qt.UserRole)
        confirm = QMessageBox.question(self, "Confirm", "Delete group?")
        if confirm != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM BRM_CUSTOM_RULE_GROUPS WHERE CUSTOM_GROUP_ID=?", (gid,))
            self.connection.commit()
            QMessageBox.information(self, "Deleted", "Group deleted.")
            self.refresh_all()
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))

    def backup_group(self):
        sel = self.tree.selectedItems()
        if not sel:
            QMessageBox.warning(self, "None", "No group selected.")
            return
        g_item = sel[0]
        if g_item.parent():
            g_item = g_item.parent()
        gid = g_item.data(0, Qt.UserRole)
        try:
            v = BackupRestoreHelpers.backup_custom_group(self.connection, gid, f"User:{self.user_id}")
            QMessageBox.information(self, "Backup", f"Backup version {v} created.")
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))

    def restore_group(self):
        sel = self.tree.selectedItems()
        if not sel:
            QMessageBox.warning(self, "None", "No group selected.")
            return
        g_item = sel[0]
        if g_item.parent():
            g_item = g_item.parent()
        gid = g_item.data(0, Qt.UserRole)
        c = self.connection.cursor()
        c.execute("""
        SELECT BACKUP_VERSION,BACKUP_TIMESTAMP
        FROM BRM_CUSTOM_GROUP_BACKUPS
        WHERE CUSTOM_GROUP_ID=?
        ORDER BY BACKUP_VERSION DESC
        """,(gid,))
        rows = get_cursor_rows(c)
        if not rows:
            QMessageBox.information(self, "None", "No backups found.")
            return
        items = [f"Version {r['BACKUP_VERSION']} (ts {r['BACKUP_TIMESTAMP']})" for r in rows]
        selx, ok = QInputDialog.getItem(self, "Restore", "Pick version:", items, 0, False)
        if not ok:
            return
        m = re.search(r"Version\s+(\d+)", selx)
        if not m:
            return
        ver = int(m.group(1))
        confirm = QMessageBox.question(self, "Confirm", f"Restore group {gid} => version {ver}?")
        if confirm != QMessageBox.Yes:
            return
        try:
            BackupRestoreHelpers.restore_custom_group(self.connection, gid, ver, f"User:{self.user_id}")
            QMessageBox.information(self, "Restored", f"Group {gid} => version {ver}")
            self.refresh_all()
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))

    def assign_rules(self):
        sel = self.tree.selectedItems()
        if not sel:
            QMessageBox.warning(self, "None", "No group selected.")
            return
        g_item = sel[0]
        if g_item.parent():
            g_item = g_item.parent()
        gid = g_item.data(0, Qt.UserRole)
        sel_rules = self.rule_list.selectedItems()
        if not sel_rules:
            QMessageBox.warning(self, "None", "No rules selected in list.")
            return
        c = self.connection.cursor()
        count = 0
        for it in sel_rules:
            rid = it.data(Qt.UserRole)
            try:
                c.execute("INSERT INTO BRM_CUSTOM_GROUP_MEMBERS(CUSTOM_GROUP_ID,RULE_ID) VALUES(?,?)", (gid, rid))
                count += 1
            except:
                pass
        self.connection.commit()
        QMessageBox.information(self, "Assigned", f"{count} rule(s) assigned.")
        self.refresh_all()

# ----------------------------------------------------------------------------
# MultiStep Approvals
# ----------------------------------------------------------------------------
class ApprovalPipelineWidget(QWidget):
    def __init__(self, stage_status_map, parent=None):
        super().__init__(parent)
        self.setLayout(QHBoxLayout())
        self.layout().setContentsMargins(0,0,0,0)
        self.layout().setSpacing(5)
        stages = ["BG1","BG2","BG3","FINAL"]
        for st in stages:
            circle = QLabel()
            circle.setFixedSize(20,20)
            stval = stage_status_map.get(st,"NotStarted")
            if stval=="Approved":
                circle.setStyleSheet("background-color:green;border-radius:10px;border:1px solid black;")
            elif stval=="Pending":
                circle.setStyleSheet("background-color:yellow;border-radius:10px;border:1px solid black;")
            elif stval=="Rejected":
                circle.setStyleSheet("background-color:red;border-radius:10px;border:1px solid black;")
            else:
                circle.setStyleSheet("background-color:lightgray;border-radius:10px;border:1px solid black;")
            circle.setToolTip(f"{st}: {stval}")
            self.layout().addWidget(circle)

class MultiStepApprovalTab(QWidget):
    def __init__(self, connection, logged_in_username, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.logged_in_username = logged_in_username
        self.user_group = user_group

        layout = QVBoxLayout(self)
        self.appr_table = QTableWidget(0,7)
        self.appr_table.setHorizontalHeaderLabels(["Rule ID","Group Name","Rule Name","Stage","Approved?","Action","Pipeline"])
        self.appr_table.horizontalHeader().setStretchLastSection(True)
        self.appr_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.appr_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        layout.addWidget(self.appr_table)

        ref_btn = QPushButton("Refresh Approvals")
        ref_btn.clicked.connect(self.load_approvals)
        layout.addWidget(ref_btn)

        self.setLayout(layout)
        self.load_approvals()

    def load_approvals(self):
        c = self.connection.cursor()
        c.execute("""
        SELECT A.RULE_ID,A.GROUP_NAME,A.USERNAME,A.APPROVED_FLAG,A.APPROVED_TIMESTAMP,A.APPROVAL_STAGE,
               R.RULE_NAME,R.APPROVAL_STATUS
        FROM BRM_RULE_APPROVALS A
        JOIN BRM_RULES R ON A.RULE_ID=R.RULE_ID
        WHERE A.USERNAME=? AND A.APPROVED_FLAG=0
        ORDER BY A.RULE_ID
        """,(self.logged_in_username,))
        rows = get_cursor_rows(c)

        pipeline_data={}
        all_app = self.connection.cursor()
        all_app.execute("SELECT * FROM BRM_RULE_APPROVALS")
        allrows = get_cursor_rows(all_app)
        for apr in allrows:
            rid = apr["RULE_ID"]
            grp = apr["GROUP_NAME"]
            stage = apr["APPROVAL_STAGE"]
            flag = apr["APPROVED_FLAG"]
            pipeline_data.setdefault(rid, {"BG1":"NotStarted","BG2":"NotStarted","BG3":"NotStarted","FINAL":"NotStarted"})
            if flag==1:
                pipeline_data[rid][grp] = "Approved"
            else:
                cur_st = get_current_approval_stage(self.connection, rid)
                if cur_st==stage:
                    pipeline_data[rid][grp] = "Pending"
                else:
                    pipeline_data[rid][grp] = "NotStarted"

        minimal_rows=[]
        for rd in rows:
            rid = rd["RULE_ID"]
            st = rd["APPROVAL_STAGE"]
            min_st = get_current_approval_stage(self.connection, rid)
            if min_st==st:
                minimal_rows.append(rd)

        self.appr_table.setRowCount(0)
        for rd in minimal_rows:
            r = self.appr_table.rowCount()
            self.appr_table.insertRow(r)
            self.appr_table.setItem(r,0,QTableWidgetItem(str(rd["RULE_ID"])))
            self.appr_table.setItem(r,1,QTableWidgetItem(rd["GROUP_NAME"]))
            self.appr_table.setItem(r,2,QTableWidgetItem(rd["RULE_NAME"]))
            self.appr_table.setItem(r,3,QTableWidgetItem(str(rd["APPROVAL_STAGE"])))
            self.appr_table.setItem(r,4,QTableWidgetItem(str(rd["APPROVED_FLAG"])))

            approve_btn = QPushButton("Approve")
            approve_btn.clicked.connect(lambda _, row_idx=r: self.do_approve(row_idx))
            self.appr_table.setCellWidget(r,5,approve_btn)

            pipe_map = pipeline_data.get(rd["RULE_ID"],{"BG1":"NotStarted","BG2":"NotStarted","BG3":"NotStarted","FINAL":"NotStarted"})
            pipe_widget = ApprovalPipelineWidget(pipe_map)
            self.appr_table.setCellWidget(r,6,pipe_widget)

    def do_approve(self, row_index):
        rid_item = self.appr_table.item(row_index, 0)
        grp_item = self.appr_table.item(row_index, 1)
        if not rid_item or not grp_item:
            return
        rule_id = int(rid_item.text())
        grp = grp_item.text()
        c = self.connection.cursor()
        c.execute("""
        UPDATE BRM_RULE_APPROVALS
        SET APPROVED_FLAG=1, APPROVED_TIMESTAMP=GETDATE()
        WHERE RULE_ID=? AND GROUP_NAME=? AND USERNAME=?
        """,(rule_id, grp, self.logged_in_username))
        nxt = get_current_approval_stage(self.connection, rule_id)
        if nxt is None:
            c.execute("UPDATE BRM_RULES SET APPROVAL_STATUS='APPROVED',STATUS='ACTIVE' WHERE RULE_ID=?", (rule_id,))
        else:
            c.execute("UPDATE BRM_RULES SET APPROVAL_STATUS='APPROVAL_IN_PROGRESS',STATUS='INACTIVE' WHERE RULE_ID=?", (rule_id,))
        add_audit_log(self.connection,"UPDATE","BRM_RULE_APPROVALS", rule_id, self.logged_in_username, {"APPROVED_FLAG":0}, {"APPROVED_FLAG":1})
        self.connection.commit()
        QMessageBox.information(self,"Approved",f"You approved rule {rule_id}.")
        self.load_approvals()

# ----------------------------------------------------------------------------
# Enhanced Lineage Graph
# ----------------------------------------------------------------------------
class EnhancedLineageGraphWidget(QtWidgets.QGraphicsView):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.scene = QtWidgets.QGraphicsScene(self)
        self.setScene(self.scene)
        self.setRenderHint(QtGui.QPainter.Antialiasing)
        self.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)
        self.setTransformationAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
        self.node_map = {}
        self.children_map = {}
        self.parents_map = {}
        self.populate_graph()

    def populate_graph(self):
        self.scene.clear()
        self.node_map.clear()
        self.children_map.clear()
        self.parents_map.clear()
        c = self.connection.cursor()
        c.execute("""
        SELECT RULE_ID,RULE_NAME,PARENT_RULE_ID,STATUS,RULE_TYPE_ID,CLUSTER_NAME,IS_GLOBAL,CRITICAL_RULE
        FROM BRM_RULES
        ORDER BY RULE_ID
        """)
        rules = get_cursor_rows(c)
        if not rules:
            self.scene.addItem(QtWidgets.QGraphicsTextItem("No rules found."))
            return
        for r in rules:
            rid = r["RULE_ID"]
            pid = r["PARENT_RULE_ID"]
            if pid:
                self.children_map.setdefault(pid, []).append(rid)
                self.parents_map[rid] = pid
        rule_lookup = {r["RULE_ID"]:r for r in rules}
        all_ids = set(r["RULE_ID"] for r in rules)
        child_ids = set(self.parents_map.keys())
        roots = list(all_ids - child_ids)

        from collections import deque
        queue = deque()
        level_map = {}
        visited = set()

        for rt in roots:
            queue.append((rt,0))

        while queue:
            rid, depth = queue.popleft()
            if rid in visited:
                continue
            visited.add(rid)
            rinfo = rule_lookup[rid]
            c_so_far = level_map.get(depth,0)
            level_map[depth] = c_so_far+1
            x = depth*220
            y = c_so_far*120
            node_item = self.create_node(rinfo)
            node_item.setPos(x,y)
            self.scene.addItem(node_item)
            self.node_map[rid] = node_item
            if rid in self.children_map:
                for ch in self.children_map[rid]:
                    queue.append((ch, depth+1))

        for r in rules:
            pid = r["PARENT_RULE_ID"]
            rid = r["RULE_ID"]
            if pid and pid in self.node_map and rid in self.node_map:
                self.draw_edge(self.node_map[pid], self.node_map[rid])

        c.execute("SELECT RULE_ID, DATABASE_NAME, TABLE_NAME FROM BRM_RULE_TABLE_DEPENDENCIES")
        deps = get_cursor_rows(c)
        table_nodes = {}
        for dep in deps:
            key = f"{dep['DATABASE_NAME']}.{dep['TABLE_NAME']}"
            if key not in table_nodes:
                t_item = QtWidgets.QGraphicsEllipseItem(0,0,100,40)
                t_item.setBrush(QtGui.QBrush(QtGui.QColor("lightblue")))
                t_item.setToolTip(key)
                t_item.setPos(800, len(table_nodes)*60)
                self.scene.addItem(t_item)
                table_nodes[key] = t_item
            rule_id = dep["RULE_ID"]
            if rule_id in self.node_map:
                self.draw_edge(self.node_map[rule_id], table_nodes[key], color=QtGui.QColor("darkmagenta"))

        self.scene.setSceneRect(self.scene.itemsBoundingRect())
        self.resetView()

    def create_node(self, rinfo):
        rtype = rinfo["RULE_TYPE_ID"]
        status = rinfo["STATUS"]
        cluster = rinfo.get("CLUSTER_NAME","") or ""
        is_global = rinfo["IS_GLOBAL"]
        is_crit = rinfo["CRITICAL_RULE"]
        if rtype == 1:
            node = QtWidgets.QGraphicsRectItem(0,0,120,50)
        else:
            node = QtWidgets.QGraphicsEllipseItem(0,0,120,50)
        if status.lower()=="active":
            basecol = QtGui.QColor("lightgreen")
        else:
            basecol = QtGui.QColor("tomato")
        if cluster:
            hv = abs(hash(cluster))%360
            basecol = QtGui.QColor.fromHsv(hv,128,255)
        node.setBrush(QtGui.QBrush(basecol))
        pen = QtGui.QPen(QtCore.Qt.black,2)
        if is_crit==1:
            pen = QtGui.QPen(QtGui.QColor("red"),3)
        node.setPen(pen)
        if is_global==1:
            rinfo["RULE_NAME"] = f"(G) {rinfo['RULE_NAME']}"
        node.setToolTip(f"Rule {rinfo['RULE_ID']}: {rinfo['RULE_NAME']}")
        return node

    def draw_edge(self, item1, item2, color=QtGui.QColor("darkblue")):
        r1 = item1.sceneBoundingRect()
        r2 = item2.sceneBoundingRect()
        p1 = r1.center()
        p2 = r2.center()
        line = QtWidgets.QGraphicsLineItem(p1.x(), p1.y(), p2.x(), p2.y())
        line.setPen(QtGui.QPen(color, 2))
        self.scene.addItem(line)

    def resetView(self):
        if self.scene and self.scene.sceneRect().isValid():
            self.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)

    def mousePressEvent(self, event):
        if event.button()==Qt.LeftButton:
            item = self.itemAt(event.pos())
            if isinstance(item, (QtWidgets.QGraphicsRectItem, QtWidgets.QGraphicsEllipseItem)):
                self.show_rule_details(item.toolTip())
        super().mousePressEvent(event)

    def show_rule_details(self, tooltip):
        QMessageBox.information(self, "Rule Details", tooltip)

    def search_nodes(self, query):
        self.clear_highlights()
        ql = query.lower()
        c = self.connection.cursor()
        found = set()

        c.execute("""
        SELECT RULE_ID
        FROM BRM_RULES
        WHERE LOWER(RULE_NAME) LIKE ? OR LOWER(RULE_SQL) LIKE ?
           OR LOWER(DESCRIPTION) LIKE ? OR LOWER(BUSINESS_JUSTIFICATION) LIKE ?
           OR CAST(RULE_ID AS VARCHAR) LIKE ?
        """,(f"%{ql}%", f"%{ql}%", f"%{ql}%", f"%{ql}%", f"%{ql}%"))
        for rr in get_cursor_rows(c):
            found.add(rr["RULE_ID"])

        c.execute("""
        SELECT RULE_ID
        FROM BRM_COLUMN_MAPPING
        WHERE LOWER(SOURCE_COLUMN_NAME) LIKE ? OR LOWER(TARGET_COLUMN_NAME) LIKE ?
        """,(f"%{ql}%", f"%{ql}%"))
        for rr2 in get_cursor_rows(c):
            found.add(rr2["RULE_ID"])

        c.execute("""
        SELECT RULE_ID
        FROM BRM_RULE_TABLE_DEPENDENCIES
        WHERE LOWER(DATABASE_NAME) LIKE ? OR LOWER(TABLE_NAME) LIKE ?
        """,(f"%{ql}%", f"%{ql}%"))
        for rr3 in get_cursor_rows(c):
            found.add(rr3["RULE_ID"])

        if not found:
            QMessageBox.information(self, "No Match", f"No match for '{query}'")
            return
        for rid in found:
            if rid in self.node_map:
                self.node_map[rid].setPen(QtGui.QPen(QtGui.QColor("yellow"),4))
                self.highlight_ancestors(rid)
                self.highlight_descendants(rid)

    def highlight_ancestors(self, start_id):
        cur = start_id
        while cur in self.parents_map:
            if cur in self.node_map:
                self.node_map[cur].setPen(QtGui.QPen(QtGui.QColor("yellow"),4))
            par = self.parents_map[cur]
            if par in self.node_map:
                self.node_map[par].setPen(QtGui.QPen(QtGui.QColor("yellow"),4))
            cur = par

    def highlight_descendants(self, start_id):
        stack = [start_id]
        visited = set()
        while stack:
            cid = stack.pop()
            if cid in visited:
                continue
            visited.add(cid)
            if cid in self.node_map:
                self.node_map[cid].setPen(QtGui.QPen(QtGui.QColor("yellow"),4))
            if cid in self.children_map:
                stack.extend(self.children_map[cid])

    def clear_highlights(self):
        for nd in self.node_map.values():
            nd.setPen(QtGui.QPen(QtCore.Qt.black,2))

# ----------------------------------------------------------------------------
# Hierarchy View
# ----------------------------------------------------------------------------
class HierarchyViewTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        layout = QVBoxLayout(self)

        self.tree_view = QTreeView()
        layout.addWidget(self.tree_view)

        refresh_btn = QPushButton("Refresh Hierarchy")
        refresh_btn.clicked.connect(self.refresh_tree)
        layout.addWidget(refresh_btn)
        self.setLayout(layout)
        self.refresh_tree()

    def refresh_tree(self):
        model = QStandardItemModel()
        model.setHorizontalHeaderLabels(["Hierarchy"])
        root_item = QStandardItem("APPLICATION")
        root_item.setEditable(False)
        model.appendRow(root_item)

        c = self.connection.cursor()
        c.execute("SELECT GROUP_NAME, EMAIL FROM BUSINESS_GROUPS ORDER BY GROUP_NAME")
        groups = get_cursor_rows(c)

        c.execute("SELECT GROUP_ID, GROUP_NAME FROM BRM_RULE_GROUPS")
        rg_rows = get_cursor_rows(c)
        rg_map = {x["GROUP_ID"]: x["GROUP_NAME"] for x in rg_rows}

        def build_tree(rule, childmap):
            item = QStandardItem(f"Rule {rule['RULE_ID']}: {rule['RULE_NAME']}")
            item.setEditable(False)
            if rule["IS_GLOBAL"]==1:
                item.setBackground(QColor("lightblue"))
            elif rule["CRITICAL_RULE"]==1:
                item.setBackground(QColor("lightcoral"))
            if rule["RULE_ID"] in childmap:
                for cch in childmap[rule["RULE_ID"]]:
                    item.appendRow(build_tree(cch, childmap))
            return item

        for g in groups:
            g_item = QStandardItem(f"{g['GROUP_NAME']} ({g['EMAIL']})")
            g_item.setEditable(False)
            root_item.appendRow(g_item)
            c.execute("SELECT * FROM BRM_RULES WHERE OWNER_GROUP=?", (g["GROUP_NAME"],))
            arr = get_cursor_rows(c)
            group_buckets = {}
            ungroup = []
            for rr in arr:
                if rr["GROUP_ID"]:
                    group_buckets.setdefault(rr["GROUP_ID"], []).append(rr)
                else:
                    ungroup.append(rr)
            for gid, subrules in group_buckets.items():
                rgname = rg_map.get(gid, f"Unknown RG {gid}")
                rg_item = QStandardItem(f"Rule Group: {rgname}")
                rg_item.setEditable(False)
                g_item.appendRow(rg_item)

                submap = {}
                for r_ in subrules:
                    pid = r_["PARENT_RULE_ID"]
                    if pid and any(x["RULE_ID"]==pid for x in subrules):
                        submap.setdefault(pid, []).append(r_)

                arr_ids = set(x["RULE_ID"] for x in subrules)
                child_ids = set()
                for k, v in submap.items():
                    for xx in v:
                        child_ids.add(xx["RULE_ID"])
                real_roots = arr_ids - child_ids
                for r_ in subrules:
                    if r_["RULE_ID"] in real_roots:
                        rg_item.appendRow(build_tree(r_, submap))

            if ungroup:
                unitem = QStandardItem("Ungrouped")
                unitem.setEditable(False)
                g_item.appendRow(unitem)
                submap2 = {}
                for rr2 in ungroup:
                    pid = rr2["PARENT_RULE_ID"]
                    if pid and any(x["RULE_ID"]==pid for x in ungroup):
                        submap2.setdefault(pid,[]).append(rr2)
                arr_ids = set(x["RULE_ID"] for x in ungroup)
                child_ids = set()
                for k,v in submap2.items():
                    for xx in v:
                        child_ids.add(xx["RULE_ID"])
                real_roots = arr_ids - child_ids
                for ru2 in ungroup:
                    if ru2["RULE_ID"] in real_roots:
                        unitem.appendRow(build_tree(ru2, submap2))

        self.tree_view.setModel(model)
        self.tree_view.expandAll()

# ----------------------------------------------------------------------------
# GlobalCriticalAdminTab
# ----------------------------------------------------------------------------
class GlobalCriticalAdminTab(QWidget):
    def __init__(self, main_app, connection, user_group, parent=None):
        super().__init__(parent)
        self.main_app = main_app
        self.connection = connection
        self.user_group = user_group

        layout = QVBoxLayout(self)
        if self.user_group != "Admin":
            layout.addWidget(QLabel("Access Denied: only Admin."))
            self.setLayout(layout)
            return

        filter_layout = QHBoxLayout()
        self.show_only_gcr = QCheckBox("Show only Global/Critical")
        self.show_only_gcr.setChecked(True)
        filter_layout.addWidget(self.show_only_gcr)

        ref_btn = QPushButton("Refresh Rule List")
        ref_btn.clicked.connect(self.load_rule_list)
        filter_layout.addWidget(ref_btn)
        filter_layout.addStretch()
        layout.addLayout(filter_layout)

        self.rule_table = QTableWidget(0,8)
        self.rule_table.setHorizontalHeaderLabels(["Rule ID","Rule Name","Owner Group","IS_GLOBAL","CRITICAL_RULE","CRITICAL_SCOPE","STATUS","UPDATED_BY"])
        self.rule_table.horizontalHeader().setStretchLastSection(True)
        self.rule_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.rule_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        layout.addWidget(self.rule_table)

        gcs_layout = QHBoxLayout()
        self.global_checkbox = QCheckBox("Set Global?")
        gcs_layout.addWidget(self.global_checkbox)
        self.critical_checkbox = QCheckBox("Set Critical?")
        gcs_layout.addWidget(self.critical_checkbox)
        gcs_layout.addWidget(QLabel("Critical Scope:"))
        self.scope_combo = QComboBox()
        self.scope_combo.addItems(["NONE","GROUP","CLUSTER","GLOBAL"])
        gcs_layout.addWidget(self.scope_combo)

        apply_btn = QPushButton("Apply Flags/Scope To Selected")
        apply_btn.clicked.connect(self.apply_gcs_to_selected)
        gcs_layout.addWidget(apply_btn)

        impact_btn = QPushButton("Show Impacted Descendants")
        impact_btn.clicked.connect(self.show_impacted_descendants)
        gcs_layout.addWidget(impact_btn)
        gcs_layout.addStretch()
        layout.addLayout(gcs_layout)

        link_box = QHBoxLayout()
        self.gcr_rule_combo = QComboBox()
        link_box.addWidget(QLabel("Select Parent GCR Rule:"))
        link_box.addWidget(self.gcr_rule_combo)

        self.child_rule_combo = QComboBox()
        link_box.addWidget(QLabel("Child Rule to Link/Unlink:"))
        link_box.addWidget(self.child_rule_combo)

        link_btn = QPushButton("Link Child")
        link_btn.clicked.connect(self.link_child)
        link_box.addWidget(link_btn)

        unlink_btn = QPushButton("Unlink Child")
        unlink_btn.clicked.connect(self.unlink_child)
        link_box.addWidget(unlink_btn)
        link_box.addStretch()
        layout.addLayout(link_box)

        self.link_view = QTableWidget(0,2)
        self.link_view.setHorizontalHeaderLabels(["Parent GCR ID","Child Rule ID"])
        self.link_view.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.link_view)

        ref_all_btn = QPushButton("Refresh Everything")
        ref_all_btn.clicked.connect(self.refresh_all)
        layout.addWidget(ref_all_btn)

        self.setLayout(layout)
        self.refresh_all()

    def refresh_all(self):
        self.load_rule_list()
        self.populate_gcr_rule_combo()
        self.populate_child_rule_combo()
        self.load_link_view()

    def load_rule_list(self):
        c = self.connection.cursor()
        if self.show_only_gcr.isChecked():
            c.execute("""
            SELECT RULE_ID,RULE_NAME,OWNER_GROUP,IS_GLOBAL,CRITICAL_RULE,
                   CRITICAL_SCOPE,STATUS,UPDATED_BY
            FROM BRM_RULES
            WHERE IS_GLOBAL=1 OR CRITICAL_RULE=1
            ORDER BY RULE_ID DESC
            """)
        else:
            c.execute("""
            SELECT RULE_ID,RULE_NAME,OWNER_GROUP,IS_GLOBAL,CRITICAL_RULE,
                   CRITICAL_SCOPE,STATUS,UPDATED_BY
            FROM BRM_RULES
            ORDER BY RULE_ID DESC
            """)
        rows = c.fetchall()
        self.rule_table.setRowCount(0)
        for rr in rows:
            r = self.rule_table.rowCount()
            self.rule_table.insertRow(r)
            for j in range(8):
                self.rule_table.setItem(r,j,QTableWidgetItem(str(rr[j])))
        self.rule_table.resizeColumnsToContents()

    def get_selected_rule_ids(self):
        idxs = self.rule_table.selectionModel().selectedRows()
        rids = []
        for i in idxs:
            row = i.row()
            it = self.rule_table.item(row, 0)
            if it:
                rids.append(int(it.text()))
        return rids

    def populate_gcr_rule_combo(self):
        self.gcr_rule_combo.clear()
        c = self.connection.cursor()
        c.execute("""
        SELECT RULE_ID,RULE_NAME
        FROM BRM_RULES
        WHERE IS_GLOBAL=1 OR CRITICAL_RULE=1
        ORDER BY RULE_ID
        """)
        rows = c.fetchall()
        for row in rows:
            disp = f"ID:{row[0]} - {row[1]}"
            self.gcr_rule_combo.addItem(disp, row[0])

    def populate_child_rule_combo(self):
        self.child_rule_combo.clear()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID,RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        rows = c.fetchall()
        for row in rows:
            disp = f"ID:{row[0]} - {row[1]}"
            self.child_rule_combo.addItem(disp, row[0])

    def load_link_view(self):
        c = self.connection.cursor()
        c.execute("SELECT GCR_RULE_ID,TARGET_RULE_ID FROM BRM_GLOBAL_CRITICAL_LINKS ORDER BY GCR_RULE_ID")
        rows = c.fetchall()
        self.link_view.setRowCount(0)
        for row in rows:
            r = self.link_view.rowCount()
            self.link_view.insertRow(r)
            self.link_view.setItem(r,0,QTableWidgetItem(str(row[0])))
            self.link_view.setItem(r,1,QTableWidgetItem(str(row[1])))

    def apply_gcs_to_selected(self):
        rids = self.get_selected_rule_ids()
        if not rids:
            QMessageBox.warning(self, "No Selection", "Select one or more rules first.")
            return
        is_global = 1 if self.global_checkbox.isChecked() else 0
        is_critical = 1 if self.critical_checkbox.isChecked() else 0
        scope_val = self.scope_combo.currentText().upper()
        confirm = QMessageBox.question(
            self, "Confirm",
            f"Update {len(rids)} rule(s) to IS_GLOBAL={is_global}, CRITICAL_RULE={is_critical}, CRITICAL_SCOPE='{scope_val}'?"
        )
        if confirm != QMessageBox.Yes:
            return

        c = self.connection.cursor()
        for rid in rids:
            c.execute("SELECT * FROM BRM_RULES WHERE RULE_ID=?", (rid,))
            old = get_cursor_one(c)
            if not old:
                continue
            old_status = old.get("APPROVAL_STATUS","DRAFT")
            new_data = dict(old)
            new_data["IS_GLOBAL"] = is_global
            new_data["CRITICAL_RULE"] = is_critical
            new_data["CRITICAL_SCOPE"] = scope_val
            try:
                update_rule(self.connection, new_data, "Admin", "Admin")
            except Exception as ex:
                logger.error(f"Error updating rule {rid}: {ex}")
                continue
            was_approved = (old_status == "APPROVED")
            now_global_crit = (is_global==1 or is_critical==1)
            if was_approved and now_global_crit:
                c.execute("UPDATE BRM_RULES SET APPROVAL_STATUS='APPROVAL_IN_PROGRESS',STATUS='INACTIVE' WHERE RULE_ID=?", (rid,))
                c.execute("DELETE FROM BRM_RULE_APPROVALS WHERE RULE_ID=?", (rid,))
                self.connection.commit()
                if is_global==0:
                    impacted = find_impacted_business_groups(self.connection, rid)
                    create_multistep_approvals(self.connection, rid, impacted)
        QMessageBox.information(self, "Done", "Global/Critical/Scope updated.")
        self.load_rule_list()

    def show_impacted_descendants(self):
        rids = self.get_selected_rule_ids()
        if not rids:
            QMessageBox.warning(self, "None", "Select a rule first.")
            return
        children_map, _ = build_rule_adjacency(self.connection)
        lines = []
        for rid in rids:
            visited = set()
            stack = [rid]
            desc = set()
            while stack:
                curr = stack.pop()
                if curr in visited:
                    continue
                visited.add(curr)
                if curr in children_map:
                    for child_id in children_map[curr]:
                        desc.add(child_id)
                        stack.append(child_id)
            lines.append(f"Rule {rid} => {len(desc)} impacted child(ren). IDs={sorted(desc)}")
        msg = "\n".join(lines)
        QMessageBox.information(self, "Impacted Descendants", msg)

    def link_child(self):
        pid = self.gcr_rule_combo.currentData()
        if not pid:
            QMessageBox.warning(self, "No GCR Selected", "Pick a parent GCR from the combo.")
            return
        c = self.connection.cursor()
        c.execute("SELECT IS_GLOBAL,CRITICAL_RULE FROM BRM_RULES WHERE RULE_ID=?", (pid,))
        rowp = c.fetchone()
        if not rowp:
            QMessageBox.warning(self, "No Parent Found", f"Rule {pid} not found.")
            return
        if rowp[0]!=1 and rowp[1]!=1:
            QMessageBox.warning(self, "Invalid Parent", "Selected rule is neither global nor critical.")
            return
        cid = self.child_rule_combo.currentData()
        if not cid:
            QMessageBox.warning(self, "No Child", "Select a child rule first.")
            return
        confirm = QMessageBox.question(self, "Confirm", f"Link child {cid} => parent {pid}?")
        if confirm!=QMessageBox.Yes:
            return
        full_children_map, _ = build_rule_adjacency(self.connection)
        def would_create_cycle(p_id, c_id):
            sstack = [c_id]
            visited = set()
            while sstack:
                node = sstack.pop()
                if node in visited:
                    continue
                visited.add(node)
                if node == p_id:
                    return True
                if node in full_children_map:
                    sstack.extend(full_children_map[node])
            return False
        if would_create_cycle(pid, cid):
            QMessageBox.warning(self, "Cycle Detected", f"Linking parent {pid} -> child {cid} creates a cycle.")
            return
        try:
            c.execute("INSERT INTO BRM_GLOBAL_CRITICAL_LINKS(GCR_RULE_ID,TARGET_RULE_ID) VALUES(?,?)", (pid, cid))
            add_audit_log(self.connection, "LINK_GCR", "BRM_GLOBAL_CRITICAL_LINKS", f"{pid}->{cid}", "Admin", None, {"parent_id":pid,"child_id":cid})
            self.connection.commit()
            QMessageBox.information(self, "Linked", f"Child {cid} => parent {pid}")
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))
        self.load_link_view()

    def unlink_child(self):
        pid = self.gcr_rule_combo.currentData()
        if not pid:
            QMessageBox.warning(self, "No GCR Selected", "Pick a parent GCR.")
            return
        cid = self.child_rule_combo.currentData()
        if not cid:
            QMessageBox.warning(self, "No Child", "Pick a child rule.")
            return
        confirm = QMessageBox.question(self, "Confirm", f"Unlink child {cid} from parent {pid}?")
        if confirm!=QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM BRM_GLOBAL_CRITICAL_LINKS WHERE GCR_RULE_ID=? AND TARGET_RULE_ID=?", (pid, cid))
            add_audit_log(self.connection, "UNLINK_GCR", "BRM_GLOBAL_CRITICAL_LINKS", f"{pid}->{cid}", "Admin", {"parent_id":pid,"child_id":cid}, None)
            self.connection.commit()
            QMessageBox.information(self, "Unlinked", f"Child {cid} from parent {pid}")
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))
        self.load_link_view()

# ----------------------------------------------------------------------------
# GroupManagementTab
# ----------------------------------------------------------------------------
class GroupManagementTab(QWidget):
    def __init__(self, main_app, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.main_app = main_app
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group

        if user_group!="Admin":
            lay = QVBoxLayout(self)
            lay.addWidget(QLabel("Access Denied: only Admin."))
            self.setLayout(lay)
            return

        layout = QVBoxLayout(self)
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)

        gm_tab = QWidget()
        gm_layout = QVBoxLayout(gm_tab)

        grp_box = QGroupBox("Group Details")
        grp_layout = QVBoxLayout(grp_box)
        self.groups_table = QTableWidget(0,3)
        self.groups_table.setHorizontalHeaderLabels(["Group Name","Description","Email"])
        self.groups_table.horizontalHeader().setStretchLastSection(True)
        grp_layout.addWidget(self.groups_table)

        btn_h = QHBoxLayout()
        add_grp_btn = QPushButton("Add Group")
        add_grp_btn.clicked.connect(self.on_add_group)
        btn_h.addWidget(add_grp_btn)

        rename_grp_btn = QPushButton("Rename Group")
        rename_grp_btn.clicked.connect(self.on_rename_group)
        btn_h.addWidget(rename_grp_btn)

        del_grp_btn = QPushButton("Delete Group")
        del_grp_btn.clicked.connect(self.on_delete_group)
        btn_h.addWidget(del_grp_btn)

        backup_grp_btn = QPushButton("Backup Group")
        backup_grp_btn.clicked.connect(self.on_backup_group)
        btn_h.addWidget(backup_grp_btn)

        restore_grp_btn = QPushButton("Restore Group")
        restore_grp_btn.clicked.connect(self.on_restore_group)
        btn_h.addWidget(restore_grp_btn)

        btn_h.addStretch()
        grp_layout.addLayout(btn_h)
        gm_layout.addWidget(grp_box)

        membership_box = QGroupBox("Membership Management")
        membership_layout = QVBoxLayout(membership_box)
        self.users_table = QTableWidget(0,3)
        self.users_table.setHorizontalHeaderLabels(["User ID","Username","Group"])
        self.users_table.horizontalHeader().setStretchLastSection(True)
        membership_layout.addWidget(self.users_table)

        memb_btn_h = QHBoxLayout()
        add_usr_btn = QPushButton("Add User to Group")
        add_usr_btn.clicked.connect(self.on_add_user_to_group)
        memb_btn_h.addWidget(add_usr_btn)

        rem_usr_btn = QPushButton("Remove User from Group")
        rem_usr_btn.clicked.connect(self.on_remove_user_from_group)
        memb_btn_h.addWidget(rem_usr_btn)
        memb_btn_h.addStretch()
        membership_layout.addLayout(memb_btn_h)

        gm_layout.addWidget(membership_box)
        self.tabs.addTab(gm_tab,"Groups & Membership")

        perm_tab = QWidget()
        perm_layout = QVBoxLayout(perm_tab)
        perm_box = QGroupBox("Group Permissions")
        perm_box_layout = QVBoxLayout(perm_box)

        ptop_h = QHBoxLayout()
        ptop_h.addWidget(QLabel("Select Group:"))
        self.perm_group_combo = QComboBox()
        ptop_h.addWidget(self.perm_group_combo)
        ptop_h.addStretch()
        perm_box_layout.addLayout(ptop_h)

        self.perm_table = QTableWidget(0,1)
        self.perm_table.setHorizontalHeaderLabels(["Target Table"])
        self.perm_table.horizontalHeader().setStretchLastSection(True)
        perm_box_layout.addWidget(self.perm_table)

        pbtn_h = QHBoxLayout()
        add_perm_btn = QPushButton("Add Permission")
        add_perm_btn.clicked.connect(self.on_add_permission)
        pbtn_h.addWidget(add_perm_btn)
        rem_perm_btn = QPushButton("Remove Permission")
        rem_perm_btn.clicked.connect(self.on_remove_permission)
        pbtn_h.addWidget(rem_perm_btn)
        pbtn_h.addStretch()
        perm_box_layout.addLayout(pbtn_h)
        perm_layout.addWidget(perm_box)
        self.tabs.addTab(perm_tab,"Group Permissions")

        appr_tab = QWidget()
        appr_layout = QVBoxLayout(appr_tab)
        ah = QHBoxLayout()
        ah.addWidget(QLabel("Group:"))
        self.appr_group_combo = QComboBox()
        ah.addWidget(self.appr_group_combo)
        ah.addStretch()
        appr_layout.addLayout(ah)

        self.appr_table = QTableWidget(0,2)
        self.appr_table.setHorizontalHeaderLabels(["Approver ID","Username"])
        self.appr_table.horizontalHeader().setStretchLastSection(True)
        appr_layout.addWidget(self.appr_table)

        appr_btn_h = QHBoxLayout()
        add_appr_btn = QPushButton("Add Approver")
        add_appr_btn.clicked.connect(self.on_add_approver)
        appr_btn_h.addWidget(add_appr_btn)

        del_appr_btn = QPushButton("Remove Approver")
        del_appr_btn.clicked.connect(self.on_remove_approver)
        appr_btn_h.addWidget(del_appr_btn)

        appr_btn_h.addStretch()
        appr_layout.addLayout(appr_btn_h)
        self.tabs.addTab(appr_tab,"Approvers Management")

        ref_btn = QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_data)
        layout.addWidget(ref_btn)
        self.setLayout(layout)

        self.load_data()
        self.perm_group_combo.currentIndexChanged.connect(self.load_permissions)
        self.appr_group_combo.currentIndexChanged.connect(self.load_approvers)

    def load_data(self):
        self.load_groups()
        self.load_users()
        self.load_group_combo()
        self.load_appr_group_combo()

    def load_groups(self):
        c = self.connection.cursor()
        c.execute("SELECT GROUP_NAME,DESCRIPTION,EMAIL FROM BUSINESS_GROUPS ORDER BY GROUP_NAME")
        rows = get_cursor_rows(c)
        self.groups_table.setRowCount(0)
        for row in rows:
            r = self.groups_table.rowCount()
            self.groups_table.insertRow(r)
            self.groups_table.setItem(r,0,QTableWidgetItem(row["GROUP_NAME"]))
            self.groups_table.setItem(r,1,QTableWidgetItem(row["DESCRIPTION"] or ""))
            self.groups_table.setItem(r,2,QTableWidgetItem(row["EMAIL"] or ""))

    def load_users(self):
        c = self.connection.cursor()
        c.execute("SELECT USER_ID,USERNAME,USER_GROUP FROM USERS ORDER BY USER_ID")
        rows = get_cursor_rows(c)
        self.users_table.setRowCount(0)
        for row in rows:
            rr = self.users_table.rowCount()
            self.users_table.insertRow(rr)
            self.users_table.setItem(rr,0,QTableWidgetItem(str(row["USER_ID"])))
            self.users_table.setItem(rr,1,QTableWidgetItem(row["USERNAME"]))
            self.users_table.setItem(rr,2,QTableWidgetItem(row["USER_GROUP"]))

    def load_group_combo(self):
        c = self.connection.cursor()
        c.execute("SELECT GROUP_NAME FROM BUSINESS_GROUPS ORDER BY GROUP_NAME")
        rows = get_cursor_rows(c)
        self.perm_group_combo.clear()
        for r in rows:
            self.perm_group_combo.addItem(r["GROUP_NAME"], r["GROUP_NAME"])

    def load_appr_group_combo(self):
        c = self.connection.cursor()
        c.execute("SELECT GROUP_NAME FROM BUSINESS_GROUPS ORDER BY GROUP_NAME")
        rows = get_cursor_rows(c)
        self.appr_group_combo.clear()
        for r in rows:
            self.appr_group_combo.addItem(r["GROUP_NAME"], r["GROUP_NAME"])

    def load_permissions(self):
        grp = self.perm_group_combo.currentText().strip()
        c = self.connection.cursor()
        c.execute("SELECT TARGET_TABLE FROM GROUP_PERMISSIONS WHERE GROUP_NAME=?", (grp,))
        rows = get_cursor_rows(c)
        self.perm_table.setRowCount(0)
        for row in rows:
            rr = self.perm_table.rowCount()
            self.perm_table.insertRow(rr)
            self.perm_table.setItem(rr,0,QTableWidgetItem(row["TARGET_TABLE"]))

    def load_approvers(self):
        grp = self.appr_group_combo.currentText().strip()
        c = self.connection.cursor()
        c.execute("SELECT APPROVER_ID,USERNAME FROM BUSINESS_GROUP_APPROVERS WHERE GROUP_NAME=?", (grp,))
        rows = get_cursor_rows(c)
        self.appr_table.setRowCount(0)
        for row in rows:
            r = self.appr_table.rowCount()
            self.appr_table.insertRow(r)
            self.appr_table.setItem(r,0,QTableWidgetItem(str(row["APPROVER_ID"])))
            self.appr_table.setItem(r,1,QTableWidgetItem(row["USERNAME"]))

    def get_selected_group(self):
        idx = self.groups_table.currentRow()
        if idx<0:
            return None
        it = self.groups_table.item(idx,0)
        if not it:
            return None
        return it.text().strip()

    def on_add_group(self):
        name,ok = QInputDialog.getText(self,"Add Group","Group Name:")
        if not ok or not name.strip():
            return
        desc, ok2 = QInputDialog.getText(self,"Add Group","Description:")
        if not ok2:
            desc=""
        email, ok3 = QInputDialog.getText(self,"Add Group","Email:")
        if not ok3:
            email=""
        c = self.connection.cursor()
        c.execute("SELECT * FROM BUSINESS_GROUPS WHERE GROUP_NAME=?", (name.strip(),))
        if c.fetchone():
            QMessageBox.warning(self,"Error","Group already exists.")
            return
        c.execute("INSERT INTO BUSINESS_GROUPS(GROUP_NAME,DESCRIPTION,EMAIL) VALUES(?,?,?)",(name.strip(),desc.strip(),email.strip()))
        self.connection.commit()
        QMessageBox.information(self,"Success","Group added.")
        self.load_data()

    def on_rename_group(self):
        grp = self.get_selected_group()
        if not grp:
            QMessageBox.warning(self,"No selection","No group selected.")
            return
        new_name, ok = QInputDialog.getText(self,"Rename Group","New group name:")
        if not ok or not new_name.strip():
            return
        c = self.connection.cursor()
        c.execute("SELECT * FROM BUSINESS_GROUPS WHERE GROUP_NAME=?", (new_name.strip(),))
        if c.fetchone():
            QMessageBox.warning(self,"Error","New group name already exists.")
            return
        try:
            c.execute("BEGIN TRAN")
            c.execute("UPDATE BUSINESS_GROUPS SET GROUP_NAME=? WHERE GROUP_NAME=?", (new_name.strip(), grp))
            c.execute("UPDATE BRM_RULES SET OWNER_GROUP=? WHERE OWNER_GROUP=?", (new_name.strip(), grp))
            c.execute("UPDATE BRM_RULE_GROUPS SET GROUP_NAME=? WHERE GROUP_NAME=?", (new_name.strip(), grp))
            c.execute("COMMIT TRAN")
            add_audit_log(self.connection,"RENAME_GROUP","BUSINESS_GROUPS",grp,"Admin",{"old_group_name":grp},{"new_group_name":new_name.strip()})
            QMessageBox.information(self,"Renamed",f"Renamed to {new_name}")
            self.load_data()
        except Exception as ex:
            c.execute("ROLLBACK TRAN")
            QMessageBox.critical(self,"Error",str(ex))

    def on_delete_group(self):
        grp = self.get_selected_group()
        if not grp:
            QMessageBox.warning(self,"No selection","No group selected.")
            return
        confirm = QMessageBox.question(self,"Confirm",f"Delete group '{grp}'?")
        if confirm!=QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM BUSINESS_GROUPS WHERE GROUP_NAME=?", (grp,))
            self.connection.commit()
            QMessageBox.information(self,"Deleted","Group deleted.")
            self.load_data()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def on_backup_group(self):
        grp = self.get_selected_group()
        if not grp:
            QMessageBox.warning(self,"No selection","No group selected.")
            return
        try:
            ver = BackupRestoreHelpers.backup_group(self.connection, grp, "Admin")
            QMessageBox.information(self,"Backup",f"Group {grp} v{ver} created.")
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def on_restore_group(self):
        grp = self.get_selected_group()
        if not grp:
            QMessageBox.warning(self,"No selection","No group selected.")
            return
        c = self.connection.cursor()
        c.execute("SELECT BACKUP_VERSION,BACKUP_TIMESTAMP FROM BRM_GROUP_BACKUPS WHERE GROUP_NAME=? ORDER BY BACKUP_VERSION DESC",(grp,))
        rows = get_cursor_rows(c)
        if not rows:
            QMessageBox.information(self,"None",f"No backups for {grp}")
            return
        items = [f"Version {r['BACKUP_VERSION']} (ts {r['BACKUP_TIMESTAMP']})" for r in rows]
        sel, ok = QInputDialog.getItem(self,"Restore Group","Choose version:", items, 0, False)
        if not ok:
            return
        mm = re.search(r"Version\s+(\d+)", sel)
        if not mm:
            return
        chosen_ver = int(mm.group(1))
        confirm = QMessageBox.question(self,"Confirm",f"Restore {grp} => version {chosen_ver}? Overwrites current.")
        if confirm!=QMessageBox.Yes:
            return
        try:
            BackupRestoreHelpers.restore_group(self.connection, grp, chosen_ver, "Admin")
            QMessageBox.information(self,"Restored",f"{grp} => version {chosen_ver}")
            self.load_data()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def get_selected_user(self):
        rr = self.users_table.currentRow()
        if rr<0:
            return None
        it = self.users_table.item(rr,0)
        if not it:
            return None
        return int(it.text())

    def on_add_user_to_group(self):
        uid = self.get_selected_user()
        if not uid:
            QMessageBox.warning(self,"None","No user.")
            return
        grp, ok = QInputDialog.getText(self,"Add to Group","Group name:")
        if not ok or not grp.strip():
            return
        c = self.connection.cursor()
        c.execute("SELECT * FROM BUSINESS_GROUPS WHERE GROUP_NAME=?", (grp.strip(),))
        if not c.fetchone():
            QMessageBox.warning(self,"Error","Group not found.")
            return
        c.execute("SELECT * FROM USERS WHERE USER_ID=?", (uid,))
        row = c.fetchone()
        if not row:
            QMessageBox.warning(self,"Error","User not found.")
            return
        if row[2] == grp.strip():
            QMessageBox.warning(self,"Error","User already in that group.")
            return
        c.execute("UPDATE USERS SET USER_GROUP=? WHERE USER_ID=?", (grp.strip(), uid))
        self.connection.commit()
        QMessageBox.information(self,"Success","User added to group.")
        self.load_data()

    def on_remove_user_from_group(self):
        uid = self.get_selected_user()
        if not uid:
            QMessageBox.warning(self,"None","No user.")
            return
        confirm = QMessageBox.question(self,"Confirm","Remove user from group? (Will move user to BG1)")
        if confirm!=QMessageBox.Yes:
            return
        c = self.connection.cursor()
        c.execute("UPDATE USERS SET USER_GROUP='BG1' WHERE USER_ID=?", (uid,))
        self.connection.commit()
        QMessageBox.information(self,"Success","User moved to BG1.")
        self.load_data()

    def on_add_permission(self):
        grp = self.perm_group_combo.currentText().strip()
        if not grp:
            QMessageBox.warning(self,"None","No group selected.")
            return
        tbl, ok = QInputDialog.getText(self,"Add Permission","Target table:")
        if not ok or not tbl.strip():
            return
        c = self.connection.cursor()
        c.execute("INSERT INTO GROUP_PERMISSIONS(GROUP_NAME,TARGET_TABLE) VALUES(?,?)", (grp.strip(), tbl.strip()))
        self.connection.commit()
        QMessageBox.information(self,"Success",f"Permission {tbl} => {grp}")
        self.load_permissions()

    def on_remove_permission(self):
        grp = self.perm_group_combo.currentText().strip()
        if not grp:
            QMessageBox.warning(self,"None","No group.")
            return
        rr = self.perm_table.currentRow()
        if rr<0:
            QMessageBox.warning(self,"None","No permission row.")
            return
        it = self.perm_table.item(rr,0)
        if not it:
            return
        tbl = it.text().strip()
        confirm = QMessageBox.question(self,"Confirm",f"Remove {tbl} from {grp}?")
        if confirm!=QMessageBox.Yes:
            return
        c = self.connection.cursor()
        c.execute("DELETE FROM GROUP_PERMISSIONS WHERE GROUP_NAME=? AND TARGET_TABLE=?", (grp, tbl))
        self.connection.commit()
        QMessageBox.information(self,"Success",f"Removed {tbl} from {grp}")
        self.load_permissions()

    def on_add_approver(self):
        grp = self.appr_group_combo.currentText().strip()
        if not grp:
            QMessageBox.warning(self,"None","No group.")
            return
        username, ok = QInputDialog.getText(self,"Add Approver","Username:")
        if not ok or not username.strip():
            return
        c = self.connection.cursor()
        c.execute("SELECT USER_ID FROM USERS WHERE USERNAME=?", (username.strip(),))
        row = c.fetchone()
        if not row:
            QMessageBox.warning(self,"Error","User not found.")
            return
        c.execute("INSERT INTO BUSINESS_GROUP_APPROVERS(GROUP_NAME,USERNAME) VALUES(?,?)", (grp.strip(), username.strip()))
        self.connection.commit()
        QMessageBox.information(self,"Added",f"{username} => {grp}")
        self.load_approvers()

    def on_remove_approver(self):
        grp = self.appr_group_combo.currentText().strip()
        if not grp:
            QMessageBox.warning(self,"None","No group.")
            return
        row = self.appr_table.currentRow()
        if row<0:
            QMessageBox.warning(self,"None","No row.")
            return
        it = self.appr_table.item(row,0)
        if not it:
            return
        appr_id = it.text().strip()
        confirm = QMessageBox.question(self,"Confirm",f"Remove Approver {appr_id}?")
        if confirm!=QMessageBox.Yes:
            return
        c = self.connection.cursor()
        c.execute("DELETE FROM BUSINESS_GROUP_APPROVERS WHERE APPROVER_ID=?", (appr_id,))
        self.connection.commit()
        QMessageBox.information(self,"Removed","Approver removed.")
        self.load_approvers()

# ----------------------------------------------------------------------------
# User Management Tab
# ----------------------------------------------------------------------------
class UserManagementTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        layout = QVBoxLayout(self)
        self.users_table = QTableWidget(0,4)
        self.users_table.setHorizontalHeaderLabels(["User ID","Username","Password","User Group"])
        self.users_table.horizontalHeader().setStretchLastSection(True)
        self.users_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.users_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        layout.addWidget(self.users_table)

        btn_row = QHBoxLayout()
        add_btn = QPushButton("Add User")
        add_btn.clicked.connect(self.add_user)
        btn_row.addWidget(add_btn)

        upd_btn = QPushButton("Update User")
        upd_btn.clicked.connect(self.update_user)
        btn_row.addWidget(upd_btn)

        del_btn = QPushButton("Delete User")
        del_btn.clicked.connect(self.delete_user)
        btn_row.addWidget(del_btn)

        btn_row.addStretch()
        layout.addLayout(btn_row)

        ref_btn = QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_users)
        layout.addWidget(ref_btn)

        self.setLayout(layout)
        self.load_users()

    def load_users(self):
        c = self.connection.cursor()
        c.execute("SELECT USER_ID,USERNAME,PASSWORD,USER_GROUP FROM USERS ORDER BY USER_ID")
        rows = get_cursor_rows(c)
        self.users_table.setRowCount(0)
        for row in rows:
            r = self.users_table.rowCount()
            self.users_table.insertRow(r)
            self.users_table.setItem(r,0,QTableWidgetItem(str(row["USER_ID"])))
            self.users_table.setItem(r,1,QTableWidgetItem(row["USERNAME"]))
            self.users_table.setItem(r,2,QTableWidgetItem(row["PASSWORD"]))
            self.users_table.setItem(r,3,QTableWidgetItem(row["USER_GROUP"]))

    def get_selected_user_id(self):
        sel = self.users_table.selectedItems()
        if not sel:
            return None
        row = sel[0].row()
        uid_item = self.users_table.item(row,0)
        if uid_item:
            return int(uid_item.text())
        return None

    def add_user(self):
        uname, ok = QInputDialog.getText(self,"Add User","Username:")
        if not ok or not uname.strip():
            return
        pw, ok2 = QInputDialog.getText(self,"Add User","Password:")
        if not ok2 or not pw.strip():
            return
        grp, ok3 = QInputDialog.getText(self,"Add User","User Group:")
        if not ok3 or not grp.strip():
            return
        c = self.connection.cursor()
        try:
            c.execute("INSERT INTO USERS(USERNAME,PASSWORD,USER_GROUP) VALUES(?,?,?)",(uname.strip(),pw.strip(),grp.strip()))
            self.connection.commit()
            QMessageBox.information(self,"Success","User added.")
            self.load_users()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def update_user(self):
        uid = self.get_selected_user_id()
        if not uid:
            QMessageBox.warning(self,"None","No user selected.")
            return
        c = self.connection.cursor()
        c.execute("SELECT * FROM USERS WHERE USER_ID=?", (uid,))
        colz = [desc[0] for desc in c.description]
        row = c.fetchone()
        if not row:
            QMessageBox.warning(self,"None","No user found.")
            return
        old_data = dict(zip(colz, row))
        old_un = old_data["USERNAME"]
        old_pw = old_data["PASSWORD"]
        old_grp = old_data["USER_GROUP"]

        new_un, ok = QInputDialog.getText(self,"Update User","New Username:", text=old_un)
        if not ok or not new_un.strip():
            return
        new_pw, ok2 = QInputDialog.getText(self,"Update User","New Password:", text=old_pw)
        if not ok2 or not new_pw.strip():
            return
        new_grp, ok3 = QInputDialog.getText(self,"Update User","New Group:", text=old_grp)
        if not ok3 or not new_grp.strip():
            return
        try:
            c.execute("UPDATE USERS SET USERNAME=?,PASSWORD=?,USER_GROUP=? WHERE USER_ID=?",
                      (new_un.strip(), new_pw.strip(), new_grp.strip(), uid))
            self.connection.commit()
            QMessageBox.information(self,"Success","User updated.")
            self.load_users()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def delete_user(self):
        uid = self.get_selected_user_id()
        if not uid:
            QMessageBox.warning(self,"None","No user selected.")
            return
        confirm = QMessageBox.question(self,"Confirm","Delete user?")
        if confirm!=QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM USERS WHERE USER_ID=?", (uid,))
            self.connection.commit()
            QMessageBox.information(self,"Deleted","User removed.")
            self.load_users()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

# ----------------------------------------------------------------------------
# Control Tables Tab
# ----------------------------------------------------------------------------
class CtrlTablesTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        layout = QVBoxLayout(self)

        self.table_list = [
            "USERS","BUSINESS_GROUPS","GROUP_PERMISSIONS","BRM_RULE_TYPES","BRM_RULE_GROUPS",
            "BRM_RULES","BRM_RULE_TABLE_DEPENDENCIES","BRM_AUDIT_LOG","BRM_RULE_LINEAGE",
            "BRM_GROUP_BACKUPS","BRM_COLUMN_MAPPING","BRM_CUSTOM_RULE_GROUPS","BRM_CUSTOM_GROUP_MEMBERS",
            "BUSINESS_GROUP_APPROVERS","BRM_RULE_APPROVALS","BRM_CUSTOM_GROUP_BACKUPS","BRM_GLOBAL_CRITICAL_LINKS"
        ]

        self.table_combo = QComboBox()
        for t in self.table_list:
            self.table_combo.addItem(t)
        layout.addWidget(QLabel("Select Table:"))
        layout.addWidget(self.table_combo)

        self.load_btn = QPushButton("Load Data")
        self.load_btn.clicked.connect(self.on_load_data)
        layout.addWidget(self.load_btn)

        self.table_view = QTableWidget(0,0)
        self.table_view.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table_view.setEditTriggers(QAbstractItemView.NoEditTriggers)
        layout.addWidget(self.table_view)

        self.setLayout(layout)

    def on_load_data(self):
        tbl = self.table_combo.currentText()
        if not tbl:
            return
        c = self.connection.cursor()
        try:
            c.execute(f"SELECT * FROM {tbl}")
            rows = get_cursor_rows(c)
            if rows:
                col_names = list(rows[0].keys())
            else:
                col_names = []
        except Exception as ex:
            QMessageBox.critical(self,"Error","Failed to retrieve data: "+str(ex))
            return

        self.table_view.setRowCount(0)
        self.table_view.setColumnCount(len(col_names))
        self.table_view.setHorizontalHeaderLabels(col_names)
        for rd in rows:
            r = self.table_view.rowCount()
            self.table_view.insertRow(r)
            for j, cn in enumerate(col_names):
                val = rd.get(cn, "")
                self.table_view.setItem(r, j, QTableWidgetItem(str(val)))

# ----------------------------------------------------------------------------
# Main Application Window
# ----------------------------------------------------------------------------
class BRMTool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BRM Tool – Full Integrated Enhanced Version")
        self.resize(1200, 800)

        dlg = DatabaseConnectionDialog()
        if dlg.exec_() == QDialog.Accepted:
            self.connection = dlg.get_connection()
            if not self.connection:
                sys.exit(1)
        else:
            sys.exit(0)

        try:
            cur = self.connection.cursor()
            create_tables_if_needed(cur)
            seed_dummy_data(cur)
            self.connection.commit()
        except Exception as ex:
            QMessageBox.critical(None, "DB Error", f"Error creating or seeding tables: {ex}")
            sys.exit(1)

        self.login_dialog = LoginDialog(self.connection)
        if self.login_dialog.exec_() != QDialog.Accepted:
            sys.exit(0)
        self.user_id = self.login_dialog.user_id

        c = self.connection.cursor()
        c.execute("SELECT USERNAME,USER_GROUP FROM USERS WHERE USER_ID=?", (self.user_id,))
        row = c.fetchone()
        if row:
            self.logged_in_username = row[0]
            self.user_group = row[1]
        else:
            self.logged_in_username = "Unknown"
            self.user_group = "Unknown"

        self.init_ui()

    def init_ui(self):
        cw = QWidget()
        layout = QVBoxLayout(cw)

        if self.user_group=="Admin":
            top_h = QHBoxLayout()
            self.switch_combo = QComboBox()
            self.switch_btn = QPushButton("Switch User")
            self.switch_btn.clicked.connect(self.on_switch_user)
            top_h.addWidget(QLabel("Impersonate:"))
            top_h.addWidget(self.switch_combo)
            top_h.addWidget(self.switch_btn)
            top_h.addStretch()
            layout.addLayout(top_h)
            self.populate_switch_combo()

        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)

        self.brm_tab = BusinessRuleManagementTab(self, self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.brm_tab, "Business Rule Management")

        if self.user_group=="Admin":
            self.grp_mgmt_tab = GroupManagementTab(self, self.connection, self.user_id, self.user_group)
            self.tabs.addTab(self.grp_mgmt_tab, "Group Management")

            self.user_mgmt_tab = UserManagementTab(self.connection)
            self.tabs.addTab(self.user_mgmt_tab, "User Management")

        self.lineage_tab = EnhancedLineageGraphWidget(self.connection)
        lw_container = QWidget()
        lw_lay = QVBoxLayout(lw_container)
        lb = QLabel("Lineage Visualization")
        lb.setStyleSheet("font-weight:bold;")
        lw_lay.addWidget(lb)
        lw_lay.addWidget(self.lineage_tab)
        s_h = QHBoxLayout()
        self.lineage_search = QLineEdit()
        self.lineage_search.setPlaceholderText("Search rule/desc/col/db/table...")
        s_btn = QPushButton("Search")
        s_btn.clicked.connect(lambda: self.lineage_tab.search_nodes(self.lineage_search.text()))
        rst_btn = QPushButton("Reset View")
        rst_btn.clicked.connect(self.lineage_tab.resetView)
        ref_btn = QPushButton("Refresh Graph")
        ref_btn.clicked.connect(self.lineage_tab.populate_graph)
        s_h.addWidget(self.lineage_search)
        s_h.addWidget(s_btn)
        s_h.addWidget(rst_btn)
        s_h.addWidget(ref_btn)
        s_h.addStretch()
        lw_lay.addLayout(s_h)
        self.tabs.addTab(lw_container,"Lineage Visualization")

        self.hierarchy_tab = HierarchyViewTab(self.connection)
        self.tabs.addTab(self.hierarchy_tab, "Hierarchy View")

        self.custom_tab = CustomRuleGroupEnhancedTab(self, self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.custom_tab,"Custom Rule Groups")

        self.approv_tab = MultiStepApprovalTab(self.connection, self.logged_in_username, self.user_group)
        self.tabs.addTab(self.approv_tab,"Approvals")

        if self.user_group=="Admin":
            self.gc_admin_tab = GlobalCriticalAdminTab(self, self.connection, self.user_group)
            self.tabs.addTab(self.gc_admin_tab,"Global/Critical Admin")

        self.ctrl_tab = CtrlTablesTab(self.connection)
        self.tabs.addTab(self.ctrl_tab,"Control Tables")

        cw.setLayout(layout)
        self.setCentralWidget(cw)

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.refresh_approvals)
        self.timer.start(5000)

        self.show()

    def populate_switch_combo(self):
        c = self.connection.cursor()
        c.execute("SELECT USER_ID,USERNAME,USER_GROUP FROM USERS ORDER BY USER_ID")
        rows = c.fetchall()
        for row in rows:
            disp = f"{row[1]} ({row[2]})"
            self.switch_combo.addItem(disp, (row[0], row[2]))

    def on_switch_user(self):
        data = self.switch_combo.currentData()
        if not data:
            return
        new_uid, new_grp = data
        if new_uid==self.user_id and new_grp==self.user_group:
            return
        self.user_id = new_uid
        self.user_group = new_grp
        self.reinit_tabs()

    def reinit_tabs(self):
        self.tabs.clear()
        self.brm_tab = BusinessRuleManagementTab(self, self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.brm_tab, "Business Rule Management")

        if self.user_group=="Admin":
            self.grp_mgmt_tab = GroupManagementTab(self, self.connection, self.user_id, self.user_group)
            self.tabs.addTab(self.grp_mgmt_tab, "Group Management")
            self.user_mgmt_tab = UserManagementTab(self.connection)
            self.tabs.addTab(self.user_mgmt_tab, "User Management")

        self.lineage_tab = EnhancedLineageGraphWidget(self.connection)
        lw_container = QWidget()
        lw_lay = QVBoxLayout(lw_container)
        lb = QLabel("Lineage Visualization")
        lb.setStyleSheet("font-weight:bold;")
        lw_lay.addWidget(lb)
        lw_lay.addWidget(self.lineage_tab)
        s_h = QHBoxLayout()
        self.lineage_search = QLineEdit()
        self.lineage_search.setPlaceholderText("Search rule/desc/col/db/table...")
        s_btn = QPushButton("Search")
        s_btn.clicked.connect(lambda: self.lineage_tab.search_nodes(self.lineage_search.text()))
        rst_btn = QPushButton("Reset View")
        rst_btn.clicked.connect(self.lineage_tab.resetView)
        ref_btn = QPushButton("Refresh Graph")
        ref_btn.clicked.connect(self.lineage_tab.populate_graph)
        s_h.addWidget(self.lineage_search)
        s_h.addWidget(s_btn)
        s_h.addWidget(rst_btn)
        s_h.addWidget(ref_btn)
        s_h.addStretch()
        lw_lay.addLayout(s_h)
        self.tabs.addTab(lw_container, "Lineage Visualization")

        self.hierarchy_tab = HierarchyViewTab(self.connection)
        self.tabs.addTab(self.hierarchy_tab,"Hierarchy View")

        self.custom_tab = CustomRuleGroupEnhancedTab(self, self.connection, self.user_id, self.user_group)
        self.tabs.addTab(self.custom_tab,"Custom Rule Groups")

        self.approv_tab = MultiStepApprovalTab(self.connection, self.logged_in_username, self.user_group)
        self.tabs.addTab(self.approv_tab,"Approvals")

        if self.user_group=="Admin":
            self.gc_admin_tab = GlobalCriticalAdminTab(self, self.connection, self.user_group)
            self.tabs.addTab(self.gc_admin_tab,"Global/Critical Admin")

        self.ctrl_tab = CtrlTablesTab(self.connection)
        self.tabs.addTab(self.ctrl_tab,"Control Tables")

    def refresh_approvals(self):
        self.approv_tab.load_approvals()

    def get_rule_types(self):
        c = self.connection.cursor()
        c.execute("SELECT RULE_TYPE_NAME,RULE_TYPE_ID FROM BRM_RULE_TYPES")
        rows = c.fetchall()
        result = {}
        for row in rows:
            result[row[0]] = row[1]
        return result

    def launch_audit_log_viewer(self):
        dlg = AuditLogViewer(self.connection, self.user_group, self)
        dlg.exec_()

    def launch_search_rule_dialog(self):
        dlg = SearchRuleDialog(self.connection, self.user_group, self)
        dlg.exec_()

    def closeEvent(self, event):
        try:
            self.connection.close()
        except:
            pass
        event.accept()

# ----------------------------------------------------------------------------
# Main Entry
# ----------------------------------------------------------------------------
def main():
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    w = BRMTool()
    w.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()