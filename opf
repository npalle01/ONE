    # Insert dependencies from parsed SQL (deps["tables"])
    # Determine column operation based on the SQL operation type.
    col_op = "WRITE" if op_type in ("INSERT", "UPDATE", "DELETE") else "READ"
    
    # Ensure deps["tables"] exists; otherwise, skip.
    for dep in deps.get("tables", []):
        if not isinstance(dep, tuple):
            logger.error(f"Invalid dependency (not a tuple): {dep}")
            continue

        # Safely unpack dependency tuple:
        schema = dep[0] if len(dep) >= 1 else None
        table = dep[1] if len(dep) >= 2 else None
        alias = dep[2] if len(dep) >= 3 else None
        is_sub = dep[3] if len(dep) >= 4 else False

        # Only process if table is valid and is not a CTE reference.
        if table and not table.startswith("(CTE)"):
            dbn = schema if schema else "dbo"
            try:
                c.execute("""
                    INSERT INTO BRM_RULE_TABLE_DEPENDENCIES (
                        RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP
                    ) VALUES (?, ?, ?, ?, ?)
                """, (new_rule_id, dbn, table, "AutoCol", col_op))
            except Exception as ex:
                logger.error(f"Error inserting dependency {dep}: {ex}")