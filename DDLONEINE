-------------------------------------------------------------------------------
-- 1) USERS
-------------------------------------------------------------------------------
CREATE TABLE dbo.USERS
(
    USER_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    USERNAME     NVARCHAR(100) NOT NULL,
    PASSWORD     NVARCHAR(100) NOT NULL,
    USER_GROUP   NVARCHAR(100) NOT NULL
);
GO

-------------------------------------------------------------------------------
-- 2) BUSINESS_GROUPS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BUSINESS_GROUPS
(
    GROUP_NAME   NVARCHAR(100) NOT NULL PRIMARY KEY,
    DESCRIPTION  NVARCHAR(200) NULL,
    EMAIL        NVARCHAR(200) NULL
);
GO

-------------------------------------------------------------------------------
-- 3) GROUP_PERMISSIONS
-------------------------------------------------------------------------------
CREATE TABLE dbo.GROUP_PERMISSIONS
(
    PERMISSION_ID  INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME     NVARCHAR(100) NOT NULL,
    TARGET_TABLE   NVARCHAR(200) NOT NULL
    -- Optionally, add a foreign key if you want to link GROUP_NAME to BUSINESS_GROUPS.
    -- CONSTRAINT FK_GROUP_PERMISSIONS_BG FOREIGN KEY (GROUP_NAME) REFERENCES BUSINESS_GROUPS(GROUP_NAME)
);
GO

-------------------------------------------------------------------------------
-- 4) BRM_RULE_TYPES
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_TYPES
(
    RULE_TYPE_ID    INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_TYPE_NAME  NVARCHAR(100) NOT NULL
);
GO

-------------------------------------------------------------------------------
-- 5) BRM_RULE_GROUPS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_GROUPS
(
    GROUP_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_NAME NVARCHAR(100) NOT NULL
    -- You could add UNIQUE if you want group names unique, e.g.:
    -- CONSTRAINT UQ_BRM_RULE_GROUPS_NAME UNIQUE(GROUP_NAME)
);
GO

-------------------------------------------------------------------------------
-- 6) BRM_RULES
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULES
(
    RULE_ID               INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    GROUP_ID              INT NULL,           -- references BRM_RULE_GROUPS
    PARENT_RULE_ID        INT NULL,           -- self-reference to another RULE_ID
    RULE_TYPE_ID          INT NULL,           -- references BRM_RULE_TYPES
    RULE_NAME             NVARCHAR(200) NOT NULL,
    RULE_SQL              NVARCHAR(MAX) NULL,
    EFFECTIVE_START_DATE  DATETIME NULL,
    EFFECTIVE_END_DATE    DATETIME NULL,
    STATUS                NVARCHAR(50) NOT NULL DEFAULT('INACTIVE'),
    VERSION               INT NOT NULL DEFAULT(1),
    CREATED_BY            NVARCHAR(100) NULL,
    DESCRIPTION           NVARCHAR(MAX) NULL,
    OPERATION_TYPE        NVARCHAR(50) NULL,  -- SELECT/INSERT/UPDATE/DELETE/DECISION_TABLE/OTHER
    BUSINESS_JUSTIFICATION NVARCHAR(MAX) NULL,
    CREATED_TIMESTAMP     DATETIME NOT NULL DEFAULT(GETDATE()),
    UPDATED_BY            NVARCHAR(100) NULL,
    OWNER_GROUP           NVARCHAR(100) NULL,
    APPROVAL_STATUS       NVARCHAR(50) NULL,
    IS_GLOBAL             BIT NOT NULL DEFAULT(0),
    CRITICAL_RULE         BIT NOT NULL DEFAULT(0),
    CRITICAL_SCOPE        NVARCHAR(50) NULL,
    CDC_TYPE              NVARCHAR(50) NULL,
    LIFECYCLE_STATE       NVARCHAR(50) NULL,
    DECISION_TABLE_ID     INT NULL,           -- references DECISION_TABLES
    ENCRYPTED_FLAG        BIT NOT NULL DEFAULT(0),
    LOCKED_BY             NVARCHAR(100) NULL  -- code references R.LOCKED_BY for BFS
);
GO

-------------------------------------------------------------------------------
-- 7) BRM_RULE_LOCKS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_LOCKS
(
    LOCK_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID        INT NOT NULL,     -- references BRM_RULES
    LOCKED_BY      NVARCHAR(100) NOT NULL,
    LOCK_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    EXPIRY_TIMESTAMP DATETIME NOT NULL,
    FORCE_LOCK     BIT NOT NULL DEFAULT(0),
    ACTIVE_LOCK    BIT NOT NULL DEFAULT(1)
);
GO

-------------------------------------------------------------------------------
-- 8) BRM_CUSTOM_RULE_GROUPS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_CUSTOM_RULE_GROUPS
(
    CUSTOM_GROUP_ID         INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_NAME       NVARCHAR(200) NOT NULL,
    OWNER_BUSINESS_GROUP    NVARCHAR(100) NOT NULL,
    CREATED_BY              NVARCHAR(100) NULL,
    CREATED_TIMESTAMP       DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- 9) BRM_CUSTOM_GROUP_MEMBERS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS
(
    CUSTOM_GROUP_ID INT NOT NULL,   -- references BRM_CUSTOM_RULE_GROUPS
    RULE_ID         INT NOT NULL    -- references BRM_RULES
    -- Optionally add a composite PK or unique constraint:
    -- PRIMARY KEY (CUSTOM_GROUP_ID, RULE_ID)
);
GO

-------------------------------------------------------------------------------
-- 10) BRM_CUSTOM_GROUP_BACKUPS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS
(
    BACKUP_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,      -- references BRM_CUSTOM_RULE_GROUPS
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    BACKUP_VERSION   INT NOT NULL,
    BACKUP_JSON      NVARCHAR(MAX) NOT NULL
);
GO

-------------------------------------------------------------------------------
-- 11) BRM_RULE_TABLE_DEPENDENCIES
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES
(
    DEPENDENCY_ID  INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID        INT NOT NULL,      -- references BRM_RULES
    DATABASE_NAME  NVARCHAR(200) NULL,
    TABLE_NAME     NVARCHAR(200) NULL,
    COLUMN_NAME    NVARCHAR(200) NULL,
    COLUMN_OP      NVARCHAR(20) NULL  -- 'READ' or 'WRITE'
);
GO

-------------------------------------------------------------------------------
-- 12) BRM_RULE_LINEAGE
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_LINEAGE
(
    LINEAGE_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID      INT NOT NULL,   -- references BRM_RULES
    PARENT_ID    INT NULL        -- references BRM_RULES
);
GO

-------------------------------------------------------------------------------
-- 13) BRM_COLUMN_MAPPING
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_COLUMN_MAPPING
(
    MAPPING_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SOURCE_COL   NVARCHAR(200) NOT NULL,
    TARGET_COL   NVARCHAR(200) NOT NULL,
    DESCRIPTION  NVARCHAR(MAX)  NULL
);
GO

-------------------------------------------------------------------------------
-- 14) BRM_RULE_COMMENTS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_COMMENTS
(
    COMMENT_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID      INT NOT NULL,
    COMMENT_TEXT NVARCHAR(MAX) NOT NULL,
    COMMENTED_BY NVARCHAR(100) NOT NULL,
    COMMENT_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- 15) DECISION_TABLES
-------------------------------------------------------------------------------
CREATE TABLE dbo.DECISION_TABLES
(
    DECISION_TABLE_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    TABLE_NAME          NVARCHAR(200) NOT NULL,
    DESCRIPTION         NVARCHAR(MAX) NULL,
    DECISION_QUERY      NVARCHAR(MAX) NOT NULL,
    CREATED_TIMESTAMP   DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- 16) RULE_CONFLICTS
-------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_CONFLICTS
(
    CONFLICT_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID1    INT NOT NULL,  -- references BRM_RULES
    RULE_ID2    INT NOT NULL,  -- references BRM_RULES
    PRIORITY    INT NOT NULL DEFAULT(1)
);
GO

-------------------------------------------------------------------------------
-- 17) COMPOSITE_RULES
-------------------------------------------------------------------------------
CREATE TABLE dbo.COMPOSITE_RULES
(
    COMPOSITE_RULE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CRULE_NAME        NVARCHAR(200) NOT NULL,
    LOGIC_EXPR        NVARCHAR(MAX) NULL,
    ACTION_ON_PASS    NVARCHAR(200) NULL
);
GO

-------------------------------------------------------------------------------
-- 18) RULE_SNAPSHOTS
-------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_SNAPSHOTS
(
    SNAPSHOT_ID     INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    SNAPSHOT_NAME   NVARCHAR(200) NOT NULL,
    CREATED_BY      NVARCHAR(100) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    SNAPSHOT_JSON   NVARCHAR(MAX) NOT NULL
);
GO

-------------------------------------------------------------------------------
-- 19) RULE_TAGS
-------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_TAGS
(
    TAG_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID     INT NOT NULL,         -- references BRM_RULES
    TAG_NAME    NVARCHAR(200) NOT NULL
);
GO

-------------------------------------------------------------------------------
-- 20) DATA_VALIDATIONS
-------------------------------------------------------------------------------
CREATE TABLE dbo.DATA_VALIDATIONS
(
    VALIDATION_ID    INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    TABLE_NAME       NVARCHAR(200) NOT NULL,
    COLUMN_NAME      NVARCHAR(200) NOT NULL,
    VALIDATION_TYPE  NVARCHAR(50)  NOT NULL,   -- e.g. NOT NULL, RANGE, UNIQUE
    PARAMS           NVARCHAR(500) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- 21) RULE_EXECUTION_LOGS
-------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_EXECUTION_LOGS
(
    EXECUTION_LOG_ID  INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID           INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    PASS_FLAG         BIT NOT NULL DEFAULT(0),
    MESSAGE           NVARCHAR(MAX) NULL,
    RECORD_COUNT      INT NOT NULL DEFAULT(0),
    EXECUTION_TIME_MS INT NOT NULL DEFAULT(0),
    CPU_USAGE         INT NOT NULL DEFAULT(0),
    MEM_USAGE         INT NOT NULL DEFAULT(0)
);
GO

-------------------------------------------------------------------------------
-- 22) RULE_PERF_STATS
-------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_PERF_STATS
(
    PERF_STAT_ID   INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID        INT NOT NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    EXEC_TIME_MS   INT NOT NULL DEFAULT(0),
    MEM_USAGE      INT NOT NULL DEFAULT(0),
    USAGE_COUNT    INT NOT NULL DEFAULT(0),
    DATE_KEY       CHAR(8) NULL       -- e.g. '20250318'
);
GO

-------------------------------------------------------------------------------
-- 23) BRM_RULE_APPROVALS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_APPROVALS
(
    APPROVAL_ID     INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID         INT NOT NULL,    -- references BRM_RULES
    GROUP_NAME      NVARCHAR(100) NOT NULL,
    USERNAME        NVARCHAR(100) NOT NULL,
    APPROVED_FLAG   INT NOT NULL DEFAULT(0),  -- 0=pending,1=approved,2=rejected
    APPROVAL_STAGE  INT NOT NULL DEFAULT(1),
    APPROVED_TIMESTAMP DATETIME NULL
);
GO

-------------------------------------------------------------------------------
-- 24) COLLABORATION_LOGS
-------------------------------------------------------------------------------
CREATE TABLE dbo.COLLABORATION_LOGS
(
    COLLAB_ID  INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    MESSAGE    NVARCHAR(MAX) NOT NULL,
    SENDER     NVARCHAR(100) NOT NULL,
    TIMESTAMP  DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- 25) BRM_AUDIT_LOG
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_AUDIT_LOG
(
    AUDIT_ID      INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    ACTION        NVARCHAR(50) NOT NULL,
    TABLE_NAME    NVARCHAR(200) NULL,
    RECORD_ID     NVARCHAR(50) NULL,
    ACTION_BY     NVARCHAR(100) NULL,
    OLD_DATA      NVARCHAR(MAX) NULL,
    NEW_DATA      NVARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- 26) RULE_SCHEDULES
-------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_SCHEDULES
(
    SCHEDULE_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID           INT NOT NULL,     -- references BRM_RULES
    SCHEDULE_TIME     DATETIME NOT NULL,
    STATUS            NVARCHAR(50) NOT NULL DEFAULT('Scheduled'),
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    RUN_DATA_VALIDATIONS BIT NOT NULL DEFAULT(0)
);
GO

-------------------------------------------------------------------------------
-- 27) BRM_DEFECT_LOGS
-------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_DEFECT_LOGS
(
    DEFECT_ID    INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    RULE_ID      INT NOT NULL,   -- references BRM_RULES
    DESCRIPTION  NVARCHAR(MAX) NOT NULL,
    SEVERITY     NVARCHAR(50) NOT NULL,
    REPORTER     NVARCHAR(100) NOT NULL,
    STATUS       NVARCHAR(50) NOT NULL DEFAULT('Open'),
    TIMESTAMP    DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- 28) HELP_CONTENT
-------------------------------------------------------------------------------
CREATE TABLE dbo.HELP_CONTENT
(
    HELP_ID       INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    CATEGORY      NVARCHAR(50) NOT NULL,   -- e.g., 'FAQ', 'Guide'
    TITLE         NVARCHAR(200) NOT NULL,
    CONTENT       NVARCHAR(MAX) NULL,
    LAST_UPDATED  DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- DATA_VALIDATION_LOGS (Referenced by run_data_validations for storing results)
-------------------------------------------------------------------------------
CREATE TABLE dbo.DATA_VALIDATION_LOGS
(
    LOG_ID              INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    VALIDATION_ID       INT NOT NULL,     -- references DATA_VALIDATIONS
    RESULT_FLAG         NVARCHAR(10) NOT NULL,  -- PASS/FAIL
    DETAILS             NVARCHAR(MAX) NULL,
    VALIDATION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);
GO

-------------------------------------------------------------------------------
-- DECISION_TABLE_EXEC_LOGS (Referenced for logging DT executions)
-------------------------------------------------------------------------------
CREATE TABLE dbo.DECISION_TABLE_EXEC_LOGS
(
    EXEC_LOG_ID        INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    DECISION_TABLE_ID  INT NOT NULL,  -- references DECISION_TABLES
    EXEC_TIMESTAMP     DATETIME NOT NULL DEFAULT(GETDATE()),
    PASS_FLAG          BIT NOT NULL DEFAULT(0),
    MESSAGE            NVARCHAR(MAX) NULL,
    RECORD_COUNT       INT NOT NULL DEFAULT(0)
);
GO


------------------------------------------------------------------------------
-- SAMPLE FOREIGN KEYS (OPTIONAL):
-- In practice, you would add constraints to enforce references. E.g.:
-- ALTER TABLE dbo.BRM_RULES
--   ADD CONSTRAINT FK_BRM_RULES_GROUP_ID 
--   FOREIGN KEY (GROUP_ID) REFERENCES BRM_RULE_GROUPS(GROUP_ID);

-- etc. 
------------------------------------------------------------------------------

/*
   All table creations complete.  You may add additional indexes, 
   foreign keys, or constraints as needed to ensure referential integrity.
*/