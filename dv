#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
BRM TOOL – DataValidationTab Module (Advanced CRUD)
------------------------------------------------------
This module provides an enhanced DataValidationTab for managing data validation
rules stored in the DATA_VALIDATIONS table. It supports full CRUD:
  - Create: Add new validation rule.
  - Read:  Display all validation rules.
  - Update: Edit an existing rule.
  - Delete: Remove a rule.
It also supports running all validations and reporting detailed results,
including the number of records impacted by each rule.

Dependencies:
  • A helper function `run_single_data_validation(validation_rule, conn)` that
    executes a given validation rule and returns a tuple:
       (pass_flag: bool, details: str, record_count: int)
  • (Optional) `insert_audit_log()` to log changes.
  • Any encryption/hashing routines as needed.
  
For demonstration, a simple stub for `run_single_data_validation()` is provided.
Replace or extend it as needed for your production environment.
"""

import json
import logging
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QPushButton, QMessageBox, QInputDialog, QLineEdit, QFileDialog
)
from PyQt5.QtCore import Qt

# ---------------------------------------------------------------------------
# Stub for run_single_data_validation()
# ---------------------------------------------------------------------------
def run_single_data_validation(validation_rule, conn):
    """
    Executes a data validation rule.
    Expected keys in validation_rule: 
        "VALIDATION_ID", "TABLE_NAME", "COLUMN_NAME", "VALIDATION_TYPE", "PARAMS"
    Returns:
        (pass_flag: bool, details: str, record_count: int)
    For example:
      • For "NOT NULL": counts records where the column is NULL.
      • For "RANGE": expects PARAMS as "min,max" and counts records out-of-range.
      • For "REGEX": may use a stub or actual regex engine.
    """
    vtype = validation_rule.get("VALIDATION_TYPE", "").strip().upper()
    table = validation_rule.get("TABLE_NAME", "").strip()
    column = validation_rule.get("COLUMN_NAME", "").strip()
    params = validation_rule.get("PARAMS", "").strip()
    cursor = conn.cursor()
    try:
        if vtype == "NOT NULL":
            query = f"SELECT COUNT(*) FROM {table} WHERE {column} IS NULL"
            cursor.execute(query)
            count = cursor.fetchone()[0]
            if count == 0:
                return (True, "No NULL values found.", 0)
            else:
                return (False, f"{count} NULL value(s) found.", count)
        elif vtype == "RANGE":
            parts = params.split(",")
            if len(parts) != 2:
                return (False, "Invalid range parameters.", 0)
            try:
                min_val = float(parts[0])
                max_val = float(parts[1])
            except ValueError:
                return (False, "Range parameters are not numeric.", 0)
            query = f"SELECT COUNT(*) FROM {table} WHERE {column} < {min_val} OR {column} > {max_val}"
            cursor.execute(query)
            count = cursor.fetchone()[0]
            if count == 0:
                return (True, "All values are within the specified range.", 0)
            else:
                return (False, f"{count} value(s) out of range.", count)
        elif vtype == "REGEX":
            # For REGEX validations, implement a real check if possible.
            # Here we return a stub result.
            return (True, "Regex validation passed (stub).", 0)
        else:
            return (False, "Unknown validation type.", 0)
    except Exception as ex:
        return (False, f"Error: {ex}", 0)

# ---------------------------------------------------------------------------
# DataValidationTab Class
# ---------------------------------------------------------------------------
class DataValidationTab(QWidget):
    """
    Provides an advanced GUI for managing data validation rules stored in the
    DATA_VALIDATIONS table. It offers:
      • CRUD operations (Add, Edit, Delete)
      • A refresh function to re-load rules from the database.
      • A "Run All Validations" feature that executes each rule and reports
        pass/fail status and the number of impacted records.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Data Validation Management")
        
        layout = QVBoxLayout(self)
        
        # Table to display validation rules
        self.dv_table = QTableWidget(0, 5)
        self.dv_table.setHorizontalHeaderLabels([
            "VALIDATION_ID", "TABLE_NAME", "COLUMN_NAME", "VALIDATION_TYPE", "PARAMS"
        ])
        self.dv_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.dv_table)
        
        # Buttons for CRUD and Run validations
        btn_layout = QHBoxLayout()
        add_btn = QPushButton("Add Validation")
        add_btn.clicked.connect(self.add_validation)
        btn_layout.addWidget(add_btn)
        
        edit_btn = QPushButton("Edit Validation")
        edit_btn.clicked.connect(self.edit_validation)
        btn_layout.addWidget(edit_btn)
        
        remove_btn = QPushButton("Remove Validation")
        remove_btn.clicked.connect(self.remove_validation)
        btn_layout.addWidget(remove_btn)
        
        run_btn = QPushButton("Run All Validations")
        run_btn.clicked.connect(self.run_all_validations)
        btn_layout.addWidget(run_btn)
        
        refresh_btn = QPushButton("Refresh")
        refresh_btn.clicked.connect(self.load_validations)
        btn_layout.addWidget(refresh_btn)
        
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        
        self.setLayout(layout)
        self.load_validations()
    
    def load_validations(self):
        """Load all validation rules from the DATA_VALIDATIONS table."""
        self.dv_table.setRowCount(0)
        try:
            c = self.connection.cursor()
            c.execute("""
                SELECT VALIDATION_ID, TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS
                FROM DATA_VALIDATIONS
                ORDER BY VALIDATION_ID
            """)
            rows = c.fetchall()
            for row in rows:
                r_i = self.dv_table.rowCount()
                self.dv_table.insertRow(r_i)
                for col, val in enumerate(row):
                    self.dv_table.setItem(r_i, col, QTableWidgetItem(str(val) if val is not None else ""))
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error loading validations: {ex}")
    
    def add_validation(self):
        """Prompt the user to add a new data validation rule."""
        table, ok = QInputDialog.getText(self, "Add Validation", "Enter Table Name (e.g., dbo.Customers):")
        if not ok or not table.strip():
            return
        column, ok = QInputDialog.getText(self, "Add Validation", "Enter Column Name:")
        if not ok or not column.strip():
            return
        vtype, ok = QInputDialog.getText(self, "Add Validation", "Enter Validation Type (e.g., NOT NULL, RANGE, REGEX):")
        if not ok or not vtype.strip():
            return
        params, ok = QInputDialog.getText(self, "Add Validation", "Enter Params (if applicable, e.g., 0,100):")
        if not ok:
            params = ""
        try:
            c = self.connection.cursor()
            c.execute("""
                INSERT INTO DATA_VALIDATIONS(TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
                VALUES(?, ?, ?, ?)
            """, (table.strip(), column.strip(), vtype.strip(), params.strip()))
            self.connection.commit()
            QMessageBox.information(self, "Added", "Data validation rule added successfully.")
            self.load_validations()
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error adding validation: {ex}")
    
    def edit_validation(self):
        """Allow the user to edit the currently selected validation rule."""
        row = self.dv_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Selection Error", "Please select a validation rule to edit.")
            return
        vid_item = self.dv_table.item(row, 0)
        if not vid_item:
            return
        vid = int(vid_item.text())
        # Get current values
        table_item = self.dv_table.item(row, 1)
        col_item = self.dv_table.item(row, 2)
        type_item = self.dv_table.item(row, 3)
        params_item = self.dv_table.item(row, 4)
        current_table = table_item.text() if table_item else ""
        current_column = col_item.text() if col_item else ""
        current_vtype = type_item.text() if type_item else ""
        current_params = params_item.text() if params_item else ""
        
        new_table, ok = QInputDialog.getText(self, "Edit Validation", "Enter Table Name:", text=current_table)
        if not ok or not new_table.strip():
            return
        new_column, ok = QInputDialog.getText(self, "Edit Validation", "Enter Column Name:", text=current_column)
        if not ok or not new_column.strip():
            return
        new_vtype, ok = QInputDialog.getText(self, "Edit Validation", "Enter Validation Type:", text=current_vtype)
        if not ok or not new_vtype.strip():
            return
        new_params, ok = QInputDialog.getText(self, "Edit Validation", "Enter Params (if applicable):", text=current_params)
        if not ok:
            new_params = ""
        try:
            c = self.connection.cursor()
            c.execute("""
                UPDATE DATA_VALIDATIONS
                SET TABLE_NAME = ?, COLUMN_NAME = ?, VALIDATION_TYPE = ?, PARAMS = ?
                WHERE VALIDATION_ID = ?
            """, (new_table.strip(), new_column.strip(), new_vtype.strip(), new_params.strip(), vid))
            self.connection.commit()
            # Optionally, call insert_audit_log() here to record the change.
            QMessageBox.information(self, "Updated", "Data validation rule updated successfully.")
            self.load_validations()
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error updating validation: {ex}")
    
    def remove_validation(self):
        """Delete the selected validation rule from the database."""
        row = self.dv_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "Selection Error", "Please select a validation rule to remove.")
            return
        vid_item = self.dv_table.item(row, 0)
        if not vid_item:
            return
        vid = int(vid_item.text())
        confirm = QMessageBox.question(self, "Confirm Delete", f"Are you sure you want to delete validation ID {vid}?", QMessageBox.Yes | QMessageBox.No)
        if confirm != QMessageBox.Yes:
            return
        try:
            c = self.connection.cursor()
            c.execute("DELETE FROM DATA_VALIDATIONS WHERE VALIDATION_ID = ?", (vid,))
            self.connection.commit()
            QMessageBox.information(self, "Deleted", "Validation rule deleted successfully.")
            self.load_validations()
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error deleting validation: {ex}")
    
    def run_all_validations(self):
        """
        Executes all data validation rules across all tables and displays the results,
        including whether each rule passed or failed and the number of impacted records.
        """
        c = self.connection.cursor()
        try:
            c.execute("SELECT DISTINCT TABLE_NAME FROM DATA_VALIDATIONS")
            table_rows = c.fetchall()
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error retrieving table list: {ex}")
            return
        results = []
        for (table_name,) in table_rows:
            if not table_name:
                continue
            try:
                c.execute("""
                    SELECT VALIDATION_ID, TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS
                    FROM DATA_VALIDATIONS
                    WHERE LOWER(TABLE_NAME) = LOWER(?)
                """, (table_name,))
                validations = c.fetchall()
            except Exception as ex:
                results.append((None, table_name, None, None, f"Error: {ex}", 0))
                continue
            for val in validations:
                validation_rule = {
                    "VALIDATION_ID": val[0],
                    "TABLE_NAME": val[1],
                    "COLUMN_NAME": val[2],
                    "VALIDATION_TYPE": val[3],
                    "PARAMS": val[4]
                }
                pass_flag, details, rec_count = run_single_data_validation(validation_rule, self.connection)
                results.append((val[0], table_name, val[2], val[3], details, rec_count))
        # Build a detailed result message
        msg_lines = ["Data Validation Results:"]
        for res in results:
            vid, tbl, col, vtype, detail, count = res
            status = "PASS" if pass_flag else "FAIL"
            msg_lines.append(f"ID {vid} on {tbl}.{col} [{vtype}]: {detail} (Impacted: {count})")
        result_msg = "\n".join(msg_lines)
        dlg = QMessageBox(self)
        dlg.setWindowTitle("Data Validation Results")
        dlg.setText(result_msg)
        dlg.exec_()

# =============================================================================
# End of DataValidationTab Module
# =============================================================================