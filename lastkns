-- ============================================================
-- 1. Insert Basic Reference Data
-- ============================================================

-- USERS: Admin plus several non-admin users to test login, RBAC, impersonation, and approvals.
INSERT INTO USERS (USERNAME, PASSWORD, USER_GROUP) VALUES
('admin', 'adminpass', 'Admin'),
('alice', 'alicepass', 'BG1'),
('bob', 'bobpass', 'BG2'),
('charlie', 'charliepass', 'Finance'),
('david', 'davidpass', 'Operations'),
('eve', 'evepass', 'Operations'),
('frank', 'frankpass', 'Finance');

-- BUSINESS_GROUPS: Multiple groups to test group management and RBAC.
INSERT INTO BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL) VALUES
('BG1', 'Business Group 1', 'bg1@example.com'),
('BG2', 'Business Group 2', 'bg2@example.com'),
('Finance', 'Finance Department', 'finance@example.com'),
('Operations', 'Operations Department', 'ops@example.com'),
('IT', 'Information Technology', 'it@example.com');

-- BRM_RULE_TYPES: For testing rule type functionality.
INSERT INTO BRM_RULE_TYPES (TYPE_NAME, DESCRIPTION) VALUES
('TypeA', 'Test Type A rules'),
('TypeB', 'Test Type B rules');

-- BRM_RULE_GROUPS: For grouping rules.
INSERT INTO BRM_RULE_GROUPS (GROUP_NAME, DESCRIPTION) VALUES
('Group1', 'First rule group'),
('Group2', 'Second rule group');

-- GROUP_PERMISSIONS: To simulate which group has access to which tables.
INSERT INTO GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE) VALUES
('Admin', 'BRM_RULES'),
('BG1', 'BRM_RULES'),
('BG2', 'BRM_RULES'),
('Finance', 'BRM_RULES'),
('Operations', 'BRM_RULES');

-- HELP_CONTENT: For the Help & Feedback feature.
INSERT INTO HELP_CONTENT (CATEGORY, TITLE, CONTENT) VALUES
('General', 'Getting Started', 'Welcome to the BRM tool. Follow these steps to begin...'),
('Advanced', 'Custom Rules', 'Detailed guidelines for creating and managing custom rules.');


-- ============================================================
-- 2. Insert Master Business Rules and Related Data
-- ============================================================

-- BRM_RULES: Create multiple rules including parent–child relationships, critical flags, global flags, and decision table references.
-- Rule 1: A basic rule that passes.
INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (NULL, 'Rule 1', 'SELECT 1', 'SELECT', NULL, 0, 0, 'BG1', 'ACTIVE', 'APPROVED', 'ACTIVE', 'admin', 1, 'Basic rule that passes');

-- Rule 2: A critical rule that fails.
INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (NULL, 'Rule 2', 'SELECT 0', 'SELECT', NULL, 1, 0, 'BG2', 'INACTIVE', 'PENDING', 'INACTIVE', 'alice', 1, 'Critical rule expected to fail');

-- Rule 3: A parent rule for child rules.
INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (NULL, 'Rule 3', 'SELECT 1', 'SELECT', NULL, 0, 0, 'Finance', 'ACTIVE', 'APPROVED', 'ACTIVE', 'frank', 1, 'Finance rule for testing parent-child');

-- Rule 3.1: Child of Rule 3.
INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (3, 'Rule 3.1', 'SELECT 1', 'SELECT', NULL, 0, 0, 'Finance', 'ACTIVE', 'APPROVED', 'ACTIVE', 'frank', 1, 'Child rule of Rule 3');

-- Rule 4: A global rule with a child and used in conflict resolution.
INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (NULL, 'Rule 4', 'SELECT 1', 'SELECT', NULL, 0, 1, 'BG2', 'ACTIVE', 'APPROVED', 'ACTIVE', 'bob', 1, 'Global rule');

-- Rule 4.1: Child of Rule 4.
INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (4, 'Rule 4.1', 'SELECT 1', 'SELECT', NULL, 0, 1, 'BG2', 'ACTIVE', 'APPROVED', 'ACTIVE', 'bob', 1, 'Child of global rule 4');

-- Rule 5: A rule that uses a decision table.
INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (NULL, 'Decision Rule', '', 'DECISION_TABLE', 1, 0, 0, 'Finance', 'ACTIVE', 'APPROVED', 'ACTIVE', 'charlie', 1, 'Rule using decision table');

-- BRM_RULE_TABLE_DEPENDENCIES: Test dependencies between the business rules and real DB tables.
INSERT INTO BRM_RULE_TABLE_DEPENDENCIES (DATABASE_NAME, TABLE_NAME) VALUES
('TestDB', 'Customers'),
('TestDB', 'Orders');

-- BRM_COLUMN_MAPPING: Sample mapping for table columns.
INSERT INTO BRM_COLUMN_MAPPING (SOURCE_COLUMN, TARGET_COLUMN, TABLE_NAME) VALUES
('CustID', 'CustomerID', 'Customers'),
('OrdID', 'OrderID', 'Orders');

-- BRM_RULE_LINEAGE: Define lineage (parent–child relations) explicitly.
INSERT INTO BRM_RULE_LINEAGE (RULE_ID, PARENT_ID) VALUES
(3, 0),  -- Rule 3 as top-level (using 0 for no parent in this test set)
(4, 0),  -- Rule 4 as top-level
(3, 3),  -- For demonstration, mimic child relation (not enforced by FK)
(4, 4);

-- COMPOSITE_RULES: A composite rule that depends on other rules.
INSERT INTO COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS) VALUES
('Composite Rule 1', 'Rule1==PASS AND Rule2==PASS', 'Notify');

-- DECISION_TABLES: Define a decision table for use by rules.
INSERT INTO DECISION_TABLES (TABLE_NAME, DESCRIPTION, DECISION_QUERY) VALUES
('DecisionTable1', 'Test decision table', 'SELECT 1');

-- BRM_CUSTOM_GROUP_MEMBERS: Simulate custom groups with assigned rules.
INSERT INTO BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID) VALUES
(1, 1),
(1, 2),
(2, 3),
(2, 4),
(2, 5);

-- BRM_RULE_COMMENTS: Comments on rules to simulate audit trails.
INSERT INTO BRM_RULE_COMMENTS (RULE_ID, COMMENT_TEXT, COMMENTED_BY) VALUES
(1, 'Initial creation of Rule 1', 'admin'),
(2, 'Rule 2 flagged as critical', 'alice'),
(3, 'Reviewed by Finance team', 'frank');

-- RULE_SNAPSHOTS: Snapshots of rule state.
INSERT INTO RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON) VALUES
('Snapshot1', 'admin', '{"rules": [{"RULE_ID":1,"RULE_NAME":"Rule 1"},{"RULE_ID":2,"RULE_NAME":"Rule 2"}]}'),
('Snapshot2', 'admin', '{"rules": [{"RULE_ID":1,"RULE_NAME":"Rule 1 Updated"},{"RULE_ID":2,"RULE_NAME":"Rule 2"}]}');

-- RULE_TAGS: Tag rules for later filtering.
INSERT INTO RULE_TAGS (RULE_ID, TAG_NAME) VALUES
(1, 'Critical'),
(2, 'Experimental'),
(3, 'Finance'),
(4, 'Global');

-- RULE_PERF_STATS: Insert multiple performance stats records to simulate trends.
INSERT INTO RULE_PERF_STATS (RULE_ID, EXEC_TIME_MS, CPU_USAGE, MEM_USAGE, DATE_KEY) VALUES
(1, 100, 10, 100, '20250324'),
(2, 200, 20, 150, '20250324'),
(1, 110, 12, 105, '20250325'),
(2, 190, 18, 145, '20250325'),
(3, 150, 15, 110, '20250324'),
(3, 160, 17, 115, '20250325'),
(4, 180, 20, 130, '20250324'),
(4, 175, 18, 125, '20250325');


-- ============================================================
-- 3. Logging and Audit Data Inserts
-- ============================================================

-- BRM_AUDIT_LOG: Audit history for rule actions.
INSERT INTO BRM_AUDIT_LOG (ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA) VALUES
('INSERT', 'BRM_RULES', '1', 'admin', NULL, '{"RULE_NAME":"Rule 1"}'),
('UPDATE', 'BRM_RULES', '2', 'alice', '{"STATUS":"INACTIVE"}', '{"STATUS":"ACTIVE"}'),
('DELETE', 'BRM_RULES', '3', 'frank', '{"RULE_NAME":"Rule 3"}', NULL);

-- DATA_VALIDATION_LOGS: Log results from running validations.
INSERT INTO DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS) VALUES
(1, 'PASS', 'All values non-null'),
(2, 'FAIL', '5 rows out of range'),
(3, 'PASS', 'Unique constraint OK');

-- RULE_EXECUTION_LOGS: Log rule execution outcomes.
INSERT INTO RULE_EXECUTION_LOGS (RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE) VALUES
(1, 1, 'Passed', 1, 95, 8, 90),
(2, 0, 'Failed', 1, 210, 25, 160),
(3, 1, 'Passed', 1, 140, 14, 100),
(4, 1, 'Passed', 1, 170, 18, 120);

-- DECISION_TABLE_EXEC_LOGS: Log decision table execution.
INSERT INTO DECISION_TABLE_EXEC_LOGS (DECISION_TABLE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT) VALUES
(1, 1, 'Decision table passed', 1);

-- DATA_VALIDATIONS: Definitions of validations for testing.
INSERT INTO DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS) VALUES
('Customers', 'CustomerName', 'NOT NULL', NULL),
('Orders', 'OrderAmount', 'RANGE', 'min=0;max=1000'),
('Customers', 'CustomerID', 'UNIQUE', NULL),
('Orders', 'OrderDate', 'NOT NULL', NULL);


-- ============================================================
-- 4. Approvals, Conflicts, Locks, Global/Critical Data
-- ============================================================

-- BRM_RULE_APPROVALS: Multiple approval rows per rule to simulate serial and parallel stages.
INSERT INTO BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, APPROVAL_STAGE, APPROVED_FLAG, COMMENT, USERNAME) VALUES
(1, 'BG1', 1, 1, 'Approved by BG1', 'alice'),
(1, 'BG2', 2, 0, NULL, NULL),
(2, 'BG2', 1, 2, 'Rejected by BG2', 'bob'),
(3, 'Finance', 1, 1, 'Approved by Finance', 'frank'),
(3, 'IT', 2, 0, NULL, NULL),
(4, 'BG2', 1, 0, NULL, NULL),
(5, 'Finance', 1, 1, 'Approved decision rule', 'charlie');

-- RULE_CONFLICTS: Insert conflicts for testing conflict resolution.
INSERT INTO RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY) VALUES
(1, 2, 1),
(3, 4, 2),
(1, 3, 1);

-- BRM_GLOBAL_CRITICAL_LINKS: Global/critical rule links.
INSERT INTO BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID) VALUES
(2, 4),
(1, 3),
(3, 4);

-- BRM_RULE_LOCKS: Insert a current valid lock and one expired lock.
INSERT INTO BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK) VALUES
(1, 'alice', GETDATE(), DATEADD(MINUTE, 30, GETDATE()), 0, 1),
(2, 'bob', GETDATE(), DATEADD(MINUTE, -5, GETDATE()), 0, 1); -- expired lock

-- ============================================================
-- 5. Scheduling Data Inserts
-- ============================================================
INSERT INTO RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS) VALUES
(1, DATEADD(DAY, 1, GETDATE()), 'Scheduled', 1),
(2, DATEADD(DAY, 2, GETDATE()), 'Scheduled', 0),
(3, DATEADD(DAY, 3, GETDATE()), 'Scheduled', 1);


-- ============================================================
-- 6. Collaboration and Chat Inserts
-- ============================================================
INSERT INTO COLLABORATION_LOGS (MESSAGE, SENDER) VALUES
('Hello, team!', 'alice'),
('Please review Rule 2', 'bob'),
('Rule 1 has been updated.', 'admin'),
('New update on Rule 3', 'frank');

INSERT INTO COLLABORATION_THREADS (CONVERSATION_ID, MESSAGE, SENDER) VALUES
(1, 'Initial discussion about Rule 1', 'alice'),
(1, 'I have some concerns about Rule 1', 'bob'),
(2, 'Discuss scheduling for Rule 2', 'charlie'),
(3, 'Discussion on improvements for Rule 3', 'frank');


-- ============================================================
-- 7. Extended / Additional Test Data for Full Functionality
-- ============================================================

-- Additional BRM_RULES: More parent–child relationships and a decision table rule.
INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (NULL, 'Rule 6', 'SELECT 1', 'SELECT', NULL, 0, 0, 'Finance', 'ACTIVE', 'APPROVED', 'ACTIVE', 'frank', 1, 'Additional finance rule');

INSERT INTO BRM_RULES 
    (PARENT_RULE_ID, RULE_NAME, RULE_SQL, OPERATION_TYPE, DECISION_TABLE_ID, CRITICAL_RULE, IS_GLOBAL, OWNER_GROUP, STATUS, APPROVAL_STATUS, LIFECYCLE_STATE, UPDATED_BY, VERSION, RULE_DESCRIPTION)
VALUES
    (6, 'Rule 6.1', 'SELECT 1', 'SELECT', NULL, 0, 0, 'Finance', 'ACTIVE', 'APPROVED', 'ACTIVE', 'frank', 1, 'Child of Rule 6');

-- Additional RULE_PERF_STATS records
INSERT INTO RULE_PERF_STATS (RULE_ID, EXEC_TIME_MS, CPU_USAGE, MEM_USAGE, DATE_KEY) VALUES
(6, 130, 13, 105, '20250324'),
(6, 135, 14, 110, '20250325');

-- Additional Audit Log
INSERT INTO BRM_AUDIT_LOG (ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA) VALUES
('UPDATE', 'BRM_RULES', '6', 'frank', '{"STATUS":"INACTIVE"}', '{"STATUS":"ACTIVE"}');

-- Additional Approval for parallel stage testing in Rule 3 and 4.
INSERT INTO BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, APPROVAL_STAGE, APPROVED_FLAG, COMMENT, USERNAME) VALUES
(3, 'Finance', 1, 1, 'Finance approved', 'frank'),
(3, 'IT', 2, 0, NULL, NULL),
(4, 'BG2', 1, 0, NULL, NULL);

-- Additional Conflict and Global/Critical Links
INSERT INTO RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY) VALUES
(3, 4, 2);

-- Additional Lock (valid for Rule 3)
INSERT INTO BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK) VALUES
(3, 'frank', GETDATE(), DATEADD(MINUTE, 30, GETDATE()), 0, 1);

-- Additional Scheduling Record for Rule 6
INSERT INTO RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS) VALUES
(6, DATEADD(DAY, 4, GETDATE()), 'Scheduled', 1);

-- Additional Collaboration Threads for new rules
INSERT INTO COLLABORATION_THREADS (CONVERSATION_ID, MESSAGE, SENDER) VALUES
(4, 'Feedback on Rule 6 improvements', 'frank');

-- ============================================================
-- End of Massive Test Data Inserts