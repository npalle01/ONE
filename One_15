#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_live_collaboration.py

Description:
  This module provides a “Live Collaboration” style feature for the BRM Tool,
  showing real-time presence or “who is editing a rule.” Key capabilities:

  1) CollaborationManager: 
     - periodically polls the DB to see which rules are locked (and by whom).
     - broadcasts signals or callbacks so the UI can update. 
     - optionally a 'collab_session_id' so multiple clients can see each other.

  2) CollaborationTab (Optional):
     - a UI that lists all currently locked rules, 
       who is editing them, and how long they’ve been locked.
     - a small presence icon or table.

  3) Extends the existing lock/unlock logic:
     - When a user locks a rule, store extra info: 
       e.g., “COLLAB_SESSION_ID,” “MACHINE_NAME,” or “LAST_ACTIVITY_TIMESTAMP.”

  4) Real-time approach:
     - If you want true push notifications, you might need a WebSocket server. 
       This example uses periodic polling (every few seconds) to keep it simpler.

Integration:
  - The BFS or rule editor calls lock_rule_for_edit/unlock_rule_for_edit from brm_rule_engine or brm_core_foundation.
  - This module then displays or fetches lock states to show “User X is editing Rule Y.”
  - For advanced collaboration (like real-time multi-user editing), you’d need a merges or CRDT approach. 
    Here we just do presence/locking.

"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, logging
from datetime import datetime, timedelta
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem, QLabel, QPushButton, QMessageBox
from brm_core_foundation import logger
from brm_rule_engine import unlock_rule_for_edit

class CollaborationManager(QtCore.QObject):
    locks_updated = QtCore.pyqtSignal(list)
    
    def __init__(self, connection, poll_interval_ms=5000, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.poll_locks)
        self.timer.start(poll_interval_ms)
    
    def poll_locks(self):
        c = self.connection.cursor()
        try:
            c.execute("""
                SELECT RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK
                FROM BRM_RULE_LOCKS
                WHERE ACTIVE_LOCK=1
            """)
            rows = c.fetchall()
            self.locks_updated.emit(rows)
        except Exception as ex:
            logger.error(f"Error polling locks: {ex}")

class CollaborationTab(QWidget):
    def __init__(self, connection, collab_manager, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.collab_manager = collab_manager
        self.init_ui()
        self.collab_manager.locks_updated.connect(self.update_lock_table)
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        self.title_label = QLabel("Live Collaboration: Current Locked Rules")
        layout.addWidget(self.title_label)
        self.lock_table = QTableWidget(0, 5)
        self.lock_table.setHorizontalHeaderLabels(["RuleID", "LockedBy", "LockTimestamp", "Expiry", "ForceLock"])
        self.lock_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.lock_table)
        btn_layout = QHBoxLayout()
        self.force_unlock_btn = QPushButton("Force Unlock Selected")
        self.force_unlock_btn.clicked.connect(self.force_unlock_selected)
        btn_layout.addWidget(self.force_unlock_btn)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        self.setLayout(layout)
    
    def update_lock_table(self, lock_list):
        self.lock_table.setRowCount(0)
        for row in lock_list:
            r_i = self.lock_table.rowCount()
            self.lock_table.insertRow(r_i)
            for col, val in enumerate(row):
                self.lock_table.setItem(r_i, col, QTableWidgetItem(str(val) if val is not None else ""))
        self.lock_table.resizeColumnsToContents()
    
    def get_selected_rule_id(self):
        row = self.lock_table.currentRow()
        if row < 0:
            return None
        it = self.lock_table.item(row, 0)
        return int(it.text()) if it else None
    
    def force_unlock_selected(self):
        rid = self.get_selected_rule_id()
        if not rid:
            QMessageBox.warning(self, "None", "No locked rule selected.")
            return
        if QMessageBox.question(self, "Confirm", f"Force unlock rule {rid}?") != QMessageBox.Yes:
            return
        try:
            unlock_rule_for_edit(self.connection, rid, locked_by="AdminOverride", force=True)
            QMessageBox.information(self, "Forced", "Rule forcibly unlocked.")
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))
