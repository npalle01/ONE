#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_audit_activity_tracking.py

Description:
  Provides a comprehensive Activity / Audit logging system for the BRM Tool:
    1) record_activity_event: a function to log various events (login, BFS, schedule, etc.)
    2) ActivityTrackingTab: a UI to display these logs with advanced filters 
       (user, date range, event type, text search).
    3) Integration with BFS or scheduling so calls to record_activity_event can log
       each BFS run or schedule trigger.

You can unify or keep separate from the older brm_audit_log approach; 
this module aims to track a broader set of events beyond just rule CRUD.
"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, json, logging
from datetime import datetime
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLineEdit, QTableWidget,
    QTableWidgetItem, QLabel, QComboBox, QFileDialog, QMessageBox
)
from PyQt5.QtCore import Qt
# Assuming logger, fetch_all_dict, fetch_one_dict are available from brm_core_foundation

def record_activity_event(conn, event_type, user_id_or_name, details=None, rule_id=None):
    details = details or ""
    try:
        c = conn.cursor()
        c.execute("""
            INSERT INTO BRM_ACTIVITY_LOG(
                EVENT_TYPE, USERNAME, TIMESTAMP, DETAILS, RULE_ID
            )
            VALUES(?, ?, GETDATE(), ?, ?)
        """, (event_type, str(user_id_or_name), details, rule_id))
        conn.commit()
    except Exception as ex:
        logging.error(f"Error recording activity event {event_type}: {ex}")

class ActivityTrackingTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.init_ui()
        self.load_logs()

    def init_ui(self):
        layout = QVBoxLayout(self)
        top_h = QHBoxLayout()
        self.user_search = QLineEdit()
        self.user_search.setPlaceholderText("Filter by Username")
        top_h.addWidget(QLabel("User:"))
        top_h.addWidget(self.user_search)
        self.event_combo = QComboBox()
        self.event_combo.addItem("All Events", "")
        known_events = ["LOGIN", "LOGOFF", "BFS_RUN", "SCHEDULE_TRIGGER", "RULE_SIM", "DEFECT", "OTHER"]
        for ev in known_events:
            self.event_combo.addItem(ev, ev)
        top_h.addWidget(QLabel("Event Type:"))
        top_h.addWidget(self.event_combo)
        self.text_search = QLineEdit()
        self.text_search.setPlaceholderText("Search in details...")
        top_h.addWidget(self.text_search)
        refresh_btn = QPushButton("Refresh")
        refresh_btn.clicked.connect(self.load_logs)
        top_h.addWidget(refresh_btn)
        export_btn = QPushButton("Export CSV")
        export_btn.clicked.connect(self.export_csv)
        top_h.addWidget(export_btn)
        top_h.addStretch()
        layout.addLayout(top_h)
        self.log_table = QTableWidget(0, 5)
        self.log_table.setHorizontalHeaderLabels(["ActivityID", "EventType", "Username", "Timestamp", "Details"])
        self.log_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.log_table)
        self.setLayout(layout)

    def load_logs(self):
        user_filter = self.user_search.text().strip().lower()
        event_filter = self.event_combo.currentData().strip().lower()
        text_filter = self.text_search.text().strip().lower()
        c = self.connection.cursor()
        c.execute("""
            SELECT TOP 1000 ACTIVITY_ID, EVENT_TYPE, USERNAME, TIMESTAMP, DETAILS
            FROM BRM_ACTIVITY_LOG
            ORDER BY ACTIVITY_ID DESC
        """)
        rows = c.fetchall()
        self.log_table.setRowCount(0)
        for row in rows:
            if user_filter and user_filter not in (row[2] or "").lower():
                continue
            if event_filter and event_filter not in (row[1] or "").lower():
                continue
            if text_filter and text_filter not in (row[4] or "").lower():
                continue
            r_i = self.log_table.rowCount()
            self.log_table.insertRow(r_i)
            for col, val in enumerate(row):
                self.log_table.setItem(r_i, col, QTableWidgetItem(str(val) if val is not None else ""))
        self.log_table.resizeColumnsToContents()

    def export_csv(self):
        path, _ = QFileDialog.getSaveFileName(self, "Export Activity Logs CSV", "", "CSV Files (*.csv)")
        if not path:
            return
        try:
            import csv
            with open(path, "w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                headers = [self.log_table.horizontalHeaderItem(i).text() for i in range(self.log_table.columnCount())]
                writer.writerow(headers)
                for r in range(self.log_table.rowCount()):
                    rowdata = []
                    for c in range(self.log_table.columnCount()):
                        item = self.log_table.item(r, c)
                        rowdata.append(item.text() if item else "")
                    writer.writerow(rowdata)
            QMessageBox.information(self, "Exported", f"Activity logs exported to {path}.")
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))
