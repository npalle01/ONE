#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_dashboard_cards.py

Description:
  This module provides a "cards-style" dashboard UI. On the home screen or
  a specialized “DashboardCardsTab,” we display a row/column of “cards,” each
  showing a key metric or summary for the BRM tool. For example:

    • "Active Rules": <count>
    • "Approvals Pending": <count>
    • "Open Defects": <count>
    • "Critical Rules": <count>
    • "Schedules in Next 24h": <count>
    • etc.

  Each card can be clickable, leading to the relevant tab or filtering the user
  interface to show the relevant details.

Features:
  - A QGridLayout or QHBoxLayout with multiple "card" widgets.
  - Each card has a title, a large numeric count, maybe an icon, and a button or clickable area.
  - Refresh button or auto-refresh timer.

Implementation:
  - We'll create a "DashboardCardsTab" that queries each metric from the DB.
  - We can store them in a data structure or call separate queries.
  - Each card can be a small QFrame or custom widget with a label.

Dependencies:
  - brm_core_foundation for DB access, logging, etc.
  - Possibly references to other modules (defects, approvals, scheduling).
"""

import sys
import logging
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGridLayout, QFrame, QLabel, QPushButton, 
    QMessageBox
)
from PyQt5.QtCore import Qt, QTimer

# from brm_core_foundation import logger

###############################################################################
# Card Widget
###############################################################################
class DashboardCard(QFrame):
    """
    A simple card widget that shows:
      - a title (e.g. "Active Rules")
      - a big count or numeric label
      - optional button or clickable signal
    """
    def __init__(self, title, count=0, parent=None):
        super().__init__(parent)
        self.setFrameShape(QFrame.StyledPanel)
        self.setFrameShadow(QFrame.Raised)
        self.setStyleSheet("QFrame { background-color: #F0F0F0; border-radius: 6px; }")

        layout=QVBoxLayout(self)
        self.title_label=QLabel(title)
        self.title_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        layout.addWidget(self.title_label)

        self.count_label=QLabel(str(count))
        self.count_label.setStyleSheet("font-size: 24px; font-weight: bold; color: #007ACC;")
        self.count_label.setAlignment(Qt.AlignHCenter)
        layout.addWidget(self.count_label)

        self.detail_button=QPushButton("View Details")
        layout.addWidget(self.detail_button)

        layout.addStretch()

    def set_count(self, value):
        self.count_label.setText(str(value))


###############################################################################
# DashboardCardsTab
###############################################################################
class DashboardCardsTab(QWidget):
    """
    A home/landing page that shows several "cards," each with a metric:
      1) Number of Active Rules
      2) Approvals Pending
      3) Open Defects
      4) Critical Rules
      5) Upcoming Schedules (within 24h)
      etc.

    We place them in a grid or horizontal layout. 
    Each card can link to deeper detail by hooking signals from the "View Details" button.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.init_ui()
        self.load_metrics()
        self.start_auto_refresh()

    def init_ui(self):
        layout=QVBoxLayout(self)
        # top label
        top_label=QLabel("Dashboard – Key Metrics")
        top_label.setStyleSheet("font-size: 16pt; font-weight: bold;")
        layout.addWidget(top_label)

        # a grid for cards
        self.cards_layout=QGridLayout()
        layout.addLayout(self.cards_layout)

        # define the cards
        self.card_active_rules=DashboardCard("Active Rules",0)
        self.card_approvals=DashboardCard("Approvals Pending",0)
        self.card_defects=DashboardCard("Open Defects",0)
        self.card_critical=DashboardCard("Critical Rules",0)
        self.card_schedules=DashboardCard("Schedules <24h",0)

        # place them in the grid
        self.cards_layout.addWidget(self.card_active_rules,0,0)
        self.cards_layout.addWidget(self.card_approvals,0,1)
        self.cards_layout.addWidget(self.card_defects,1,0)
        self.cards_layout.addWidget(self.card_critical,1,1)
        self.cards_layout.addWidget(self.card_schedules,2,0)

        layout.addStretch()

        # wiring "View Details" signals => can connect to callbacks
        self.card_active_rules.detail_button.clicked.connect(self.show_active_rules_details)
        self.card_approvals.detail_button.clicked.connect(self.show_approvals_details)
        self.card_defects.detail_button.clicked.connect(self.show_defects_details)
        self.card_critical.detail_button.clicked.connect(self.show_critical_details)
        self.card_schedules.detail_button.clicked.connect(self.show_schedules_details)

        self.setLayout(layout)

    def load_metrics(self):
        """
        Query DB for each metric:
         - Active rules => SELECT COUNT(*) FROM BRM_RULES WHERE STATUS='ACTIVE'
         - Approvals pending => ...
         - Open defects => ...
         - Critical rules => ...
         - Schedules <24h => ...
        Then update each card’s count.
        """
        c=self.connection.cursor()
        # 1) active rules
        try:
            c.execute("SELECT COUNT(*) FROM BRM_RULES WHERE STATUS='ACTIVE'")
            row=c.fetchone()
            act_count=row[0] if row else 0
            self.card_active_rules.set_count(act_count)
        except:
            self.card_active_rules.set_count("N/A")

        # 2) approvals pending => 
        # we do: SELECT COUNT(DISTINCT RULE_ID) FROM BRM_RULE_APPROVALS WHERE APPROVED_FLAG=0
        try:
            c.execute("""
                SELECT COUNT(DISTINCT RULE_ID)
                FROM BRM_RULE_APPROVALS
                WHERE APPROVED_FLAG=0
            """)
            app_count=c.fetchone()[0]
            self.card_approvals.set_count(app_count)
        except:
            self.card_approvals.set_count("N/A")

        # 3) open defects => from BRM_DEFECT_LOGS or a “DEFECTS” table, 
        # e.g. SELECT COUNT(*) FROM BRM_DEFECT_LOGS WHERE STATUS IN ('Open','In Progress')
        try:
            c.execute("""
                SELECT COUNT(*)
                FROM BRM_DEFECT_LOGS
                WHERE STATUS IN ('Open','In Progress')
            """)
            def_count=c.fetchone()[0]
            self.card_defects.set_count(def_count)
        except:
            self.card_defects.set_count("N/A")

        # 4) critical rules => SELECT COUNT(*) FROM BRM_RULES WHERE CRITICAL_RULE=1 OR IS_GLOBAL=1
        try:
            c.execute("""
                SELECT COUNT(*)
                FROM BRM_RULES
                WHERE CRITICAL_RULE=1 OR IS_GLOBAL=1
            """)
            crit_count=c.fetchone()[0]
            self.card_critical.set_count(crit_count)
        except:
            self.card_critical.set_count("N/A")

        # 5) schedules <24h => SELECT COUNT(*) FROM RULE_SCHEDULES WHERE STATUS='Scheduled' AND SCHEDULE_TIME<=DATEADD(HOUR,24,GETDATE())
        try:
            c.execute("""
                SELECT COUNT(*)
                FROM RULE_SCHEDULES
                WHERE STATUS='Scheduled'
                  AND SCHEDULE_TIME>=GETDATE()
                  AND SCHEDULE_TIME<=DATEADD(HOUR,24,GETDATE())
            """)
            sch_count=c.fetchone()[0]
            self.card_schedules.set_count(sch_count)
        except:
            self.card_schedules.set_count("N/A")

    def start_auto_refresh(self, interval_ms=30000):
        """
        Optional: auto-refresh every 30 seconds
        """
        self.timer=QTimer(self)
        self.timer.timeout.connect(self.load_metrics)
        self.timer.start(interval_ms)

    # ========== "View Details" placeholders ==========
    def show_active_rules_details(self):
        QMessageBox.information(self,"Active Rules","Open the 'Business Rules' tab filtered by STATUS='ACTIVE'.")

    def show_approvals_details(self):
        QMessageBox.information(self,"Approvals Pending","Switch to the 'Approvals' tab or filter them specifically.")

    def show_defects_details(self):
        QMessageBox.information(self,"Open Defects","Open the 'DefectManagementTab' if you have one, filtered by STATUS='Open' or 'In Progress'.")

    def show_critical_details(self):
        QMessageBox.information(self,"Critical Rules","Open the 'Business Rules' or GCR Admin, filtered by CRITICAL_RULE=1 or IS_GLOBAL=1.")

    def show_schedules_details(self):
        QMessageBox.information(self,"Schedules <24h","Open the 'Scheduling' tab or filter them within 24 hours.")