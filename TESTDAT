-----------------------------------------------------------
-- 1. USERS: Login credentials and user groups.
-----------------------------------------------------------
INSERT INTO USERS (USER_ID, USERNAME, PASSWORD, USER_GROUP)
VALUES 
  (1, 'admin', 'adminpass', 'Admin'),
  (2, 'user1', 'user1pass', 'BG1'),
  (3, 'user2', 'user2pass', 'BG2');

-----------------------------------------------------------
-- 2. BUSINESS_GROUPS: Defines business groups.
-----------------------------------------------------------
INSERT INTO BUSINESS_GROUPS (GROUP_ID, GROUP_NAME, DESCRIPTION, EMAIL)
VALUES 
  (1, 'BG1', 'Business Group 1', 'bg1@example.com'),
  (2, 'BG2', 'Business Group 2', 'bg2@example.com');

-----------------------------------------------------------
-- 3. BRM_RULE_TYPES: Defines types of rules.
-----------------------------------------------------------
INSERT INTO BRM_RULE_TYPES (RULE_TYPE_ID, RULE_TYPE_NAME, DESCRIPTION)
VALUES
  (1, 'Standard', 'Standard business rule'),
  (2, 'Decision', 'Decision table based rule');

-----------------------------------------------------------
-- 4. BRM_RULE_GROUPS: Pre-defined rule groups.
-----------------------------------------------------------
INSERT INTO BRM_RULE_GROUPS (RULE_GROUP_ID, RULE_GROUP_NAME, DESCRIPTION)
VALUES
  (1, 'DefaultRules', 'Default set of business rules');

-----------------------------------------------------------
-- 5. BRM_AUDIT_LOG: Captures audit events.
-----------------------------------------------------------
INSERT INTO BRM_AUDIT_LOG (AUDIT_ID, ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA, ACTION_TIMESTAMP)
VALUES 
  (1, 'INSERT', 'USERS', '2', 'admin', NULL, '{"USER_ID":2,"USERNAME":"user1"}', GETDATE()),
  (2, 'UPDATE', 'BRM_RULES', '10', 'user1', '{"STATUS":"INACTIVE"}', '{"STATUS":"ACTIVE"}', GETDATE());

-----------------------------------------------------------
-- 6. BRM_RULES: Business rules with complex SQL examples.
-----------------------------------------------------------
-- Rule 10 uses a complex SQL with comments, a join, and a subquery.
INSERT INTO BRM_RULES (RULE_ID, RULE_NAME, RULE_SQL, STATUS, VERSION, OWNER_GROUP, CREATED_TIMESTAMP, DECISION_TABLE_ID)
VALUES 
  (10, 'Validate Customer Orders', 
   '/* Validate Customer Orders */
/* Complex SQL with join and subquery */
SELECT CASE WHEN COUNT(o.OrderID) > 0 THEN 1 ELSE 0 END
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.Status = ''Active'' 
  AND o.OrderDate > (SELECT DATEADD(MONTH, -1, GETDATE()))',
   'ACTIVE', 1, 'BG1', GETDATE(), NULL),
-- Rule 11 updates orders based on criteria.
  (11, 'Update Order Status', 
   '/* Update order status based on criteria */
UPDATE Orders 
SET Status = ''Processed''
WHERE OrderID IN (
  SELECT o.OrderID
  FROM Orders o
  JOIN Customers c ON o.CustomerID = c.CustomerID
  WHERE c.Status = ''Active'' 
    AND o.Amount > 100
)',
   'INACTIVE', 1, 'BG1', GETDATE(), NULL),
-- Rule 12 uses a decision table.
  (12, 'Decision: Approve Discount', 
   '/* Decision table execution for discount approvals */
SELECT CASE WHEN EXISTS (
  SELECT 1 FROM Discounts d WHERE d.Requested = 1 AND d.Amount < 50
) THEN 1 ELSE 0 END',
   'ACTIVE', 1, 'BG2', GETDATE(), 101);

-----------------------------------------------------------
-- 7. BRM_RULE_LOCKS: Stores active locks on rules.
-----------------------------------------------------------
INSERT INTO BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES 
  (10, 'user1', DATEADD(MINUTE, -10, GETDATE()), DATEADD(MINUTE, 20, GETDATE()), 0, 1);

-----------------------------------------------------------
-- 8. BRM_RULE_TABLE_DEPENDENCIES: Maps rule SQL dependencies.
-----------------------------------------------------------
INSERT INTO BRM_RULE_TABLE_DEPENDENCIES (DEPENDENCY_ID, RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES 
  (1, 10, 'SalesDB', 'Customers', 'CustomerID', 'READ'),
  (2, 11, 'SalesDB', 'Orders', 'OrderStatus', 'WRITE'),
  (3, 12, 'SalesDB', 'Discounts', 'Amount', 'READ');

-----------------------------------------------------------
-- 9. DATA_VALIDATIONS: Defines validations to check data integrity.
-----------------------------------------------------------
INSERT INTO DATA_VALIDATIONS (VALIDATION_ID, TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS, CREATED_TIMESTAMP)
VALUES 
  (1, 'Customers', 'Email', 'NOT NULL', NULL, GETDATE()),
  (2, 'Orders', 'OrderAmount', 'RANGE', 'min=0;max=10000', GETDATE());

-----------------------------------------------------------
-- 10. DATA_VALIDATION_LOGS: Logs the outcomes of validations.
-----------------------------------------------------------
INSERT INTO DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS, VALIDATION_TIMESTAMP)
VALUES 
  (1, 'PASS', 'All emails are present', GETDATE()),
  (2, 'FAIL', '5 rows have order amounts outside allowed range', GETDATE());

-----------------------------------------------------------
-- 11. DECISION_TABLES: Stores decision table definitions.
-----------------------------------------------------------
INSERT INTO DECISION_TABLES (DECISION_TABLE_ID, TABLE_NAME, DESCRIPTION, DECISION_QUERY, CREATED_TIMESTAMP)
VALUES 
  (101, 'DiscountApproval', 'Decision table for discount approvals', 'SELECT 1', GETDATE());

-----------------------------------------------------------
-- 12. DECISION_TABLE_EXEC_LOGS: Logs execution of decision tables.
-----------------------------------------------------------
INSERT INTO DECISION_TABLE_EXEC_LOGS (DECISION_TABLE_ID, EXEC_TIMESTAMP, PASS_FLAG, MESSAGE, RECORD_COUNT)
VALUES 
  (101, GETDATE(), 1, 'Decision returned PASS', 0);

-----------------------------------------------------------
-- 13. RULE_EXECUTION_LOGS: Records rule execution details.
-----------------------------------------------------------
INSERT INTO RULE_EXECUTION_LOGS (RULE_ID, EXECUTION_TIMESTAMP, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE)
VALUES 
  (10, GETDATE(), 1, 'Executed successfully', 100, 150, 10, 5000);

-----------------------------------------------------------
-- 14. RULE_SCHEDULES: Schedules rule execution.
-----------------------------------------------------------
INSERT INTO RULE_SCHEDULES (SCHEDULE_ID, RULE_ID, SCHEDULE_TIME, STATUS, CREATED_TIMESTAMP, RUN_DATA_VALIDATIONS)
VALUES 
  (201, 10, DATEADD(HOUR, 1, GETDATE()), 'Scheduled', GETDATE(), 1);

-----------------------------------------------------------
-- 15. COLLABORATION_LOGS: Stores collaborative messaging.
-----------------------------------------------------------
INSERT INTO COLLABORATION_LOGS (MESSAGE, SENDER, TIMESTAMP)
VALUES 
  ('Initial setup complete', 'admin', GETDATE());

-----------------------------------------------------------
-- 16. RULE_CONFLICTS: Defines conflicts between rules.
-----------------------------------------------------------
INSERT INTO RULE_CONFLICTS (CONFLICT_ID, RULE_ID1, RULE_ID2, PRIORITY)
VALUES 
  (301, 10, 11, 1);

-----------------------------------------------------------
-- 17. BRM_GLOBAL_CRITICAL_LINKS: Maps global-critical rule links.
-----------------------------------------------------------
INSERT INTO BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES 
  (10, 12);

-----------------------------------------------------------
-- 18. COMPOSITE_RULES: Defines composite (combined) rules.
-----------------------------------------------------------
INSERT INTO COMPOSITE_RULES (COMPOSITE_RULE_ID, CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES 
  (401, 'Composite Discount Rule', 'Rule10 AND Rule12', 'SendEmail');

-----------------------------------------------------------
-- 19. BRM_RULE_LINEAGE: Represents parent-child rule relationships.
-----------------------------------------------------------
INSERT INTO BRM_RULE_LINEAGE (RULE_ID, PARENT_ID)
VALUES 
  (11, 10),
  (12, 10);

-----------------------------------------------------------
-- 20. BRM_CUSTOM_RULE_GROUPS: Defines custom groups for rules.
-----------------------------------------------------------
INSERT INTO BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_ID, CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY, CREATED_TIMESTAMP)
VALUES 
  (501, 'CustomGroup1', 'BG1', 'admin', GETDATE());

-----------------------------------------------------------
-- 21. BRM_CUSTOM_GROUP_MEMBERS: Assigns rules to custom groups.
-----------------------------------------------------------
INSERT INTO BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES 
  (501, 10),
  (501, 11);

-----------------------------------------------------------
-- 22. HELP_CONTENT: Contains help topics and documentation.
-----------------------------------------------------------
INSERT INTO HELP_CONTENT (HELP_ID, CATEGORY, TITLE, CONTENT, LAST_UPDATED)
VALUES 
  (601, 'FAQ', 'How to add a rule?', 'Use the Rule Editor dialog. Duplicate rule names are not allowed within the same group.', GETDATE()),
  (602, 'Guide', 'Scheduling Rules', 'This guide explains how to schedule rules and run validations/dry‑runs.', GETDATE());

-----------------------------------------------------------
-- 23. RULE_PERF_STATS: Stores performance statistics for rules.
-----------------------------------------------------------
INSERT INTO RULE_PERF_STATS (STAT_ID, RULE_ID, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT, ACTION_TIMESTAMP, DATE_KEY)
VALUES 
  (701, 10, 120, 5000, 10, GETDATE(), CONVERT(varchar(8), GETDATE(),112));

-----------------------------------------------------------
-- 24. BRM_RULE_APPROVALS: Stores multi‑step approval records.
-----------------------------------------------------------
INSERT INTO BRM_RULE_APPROVALS (APPROVAL_ID, RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE, APPROVED_TIMESTAMP)
VALUES 
  (801, 10, 'BG1', 'user1', 0, 1, NULL),
  (802, 10, 'GlobalApprovers', 'admin', 0, 2, NULL);

-----------------------------------------------------------
-- 25. GROUP_PERMISSIONS: Defines table-level permissions for groups.
-----------------------------------------------------------
INSERT INTO GROUP_PERMISSIONS (PERMISSION_ID, GROUP_NAME, TARGET_TABLE)
VALUES 
  (901, 'BG1', 'BRM_RULES'),
  (902, 'BG2', 'BRM_RULES');

-----------------------------------------------------------
-- 26. RULE_TAGS: (Optional) Tags assigned to rules.
-----------------------------------------------------------
INSERT INTO RULE_TAGS (TAG_ID, RULE_ID, TAG_NAME)
VALUES 
  (1001, 10, 'Critical'),
  (1002, 11, 'Update');

-----------------------------------------------------------
-- 27. BRM_RULE_SNAPSHOTS: (Optional) Snapshots of rule definitions.
-----------------------------------------------------------
INSERT INTO BRM_RULE_SNAPSHOTS (SNAPSHOT_ID, SNAPSHOT_NAME, CREATED_BY, CREATED_TIMESTAMP, SNAPSHOT_JSON)
VALUES 
  (1101, 'Snapshot1', 'admin', GETDATE(), '{"rules": [{"RULE_ID":10,"RULE_NAME":"Validate Customer Orders"}]}');

-----------------------------------------------------------
-- 28. BRM_RULE_COMMENTS: (Optional) Comments attached to rules.
-----------------------------------------------------------
INSERT INTO BRM_RULE_COMMENTS (COMMENT_ID, RULE_ID, COMMENT_TEXT, COMMENT_BY, COMMENT_TIMESTAMP)
VALUES 
  (1201, 10, 'Initial rule setup completed.', 'admin', GETDATE());

-----------------------------------------------------------
-- 29. BRM_COLUMN_MAPPING: (Optional) Maps source and target columns used in rules.
-----------------------------------------------------------
INSERT INTO BRM_COLUMN_MAPPING (MAPPING_ID, RULE_ID, SOURCE_COLUMN, TARGET_COLUMN)
VALUES 
  (1301, 10, 'CustID', 'CustomerID');

-----------------------------------------------------------
-- 30. BRM_DEFECT_LOGS: (Optional) Logs any defects found during rule execution.
-----------------------------------------------------------
INSERT INTO BRM_DEFECT_LOGS (DEFECT_ID, RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS, TIMESTAMP)
VALUES 
  (1401, 10, 'Minor formatting issue in SQL', 'Low', 'user2', 'Open', GETDATE());