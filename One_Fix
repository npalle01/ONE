import pyodbc
import datetime

def add_rule(conn, rule_data, created_by, user_group):
    """
    Example insertion snippet with exactly 24 columns and 24 parameters.
    Adjust field defaults or references as needed.
    """
    now_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # Example logic to detect final_op, etc.
    final_op = "SELECT"  # or detect_operation_type(...)

    c = conn.cursor()
    c.execute(
        """
        INSERT INTO BRM_RULES(
          GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
          EFFECTIVE_START_DATE, EFFECTIVE_END_DATE,
          STATUS, VERSION,
          CREATED_BY, DESCRIPTION, OPERATION_TYPE,
          BUSINESS_JUSTIFICATION, CREATED_TIMESTAMP, UPDATED_BY, OWNER_GROUP,
          CLUSTER_NAME, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE,
          CRITICAL_SCOPE, CDC_TYPE, LIFECYCLE_STATE, DECISION_TABLE_ID
        )
        OUTPUT inserted.RULE_ID
        VALUES(
          ?,?,?,?,?,
          ?,?,
          ?,?,
          ?,?,?,?,
          ?,?,?,?,
          ?,?,?,?,
          ?,?,?,?
        )
        """,
        (
            rule_data.get("GROUP_ID"),                         # 1
            rule_data.get("PARENT_RULE_ID"),                   # 2
            rule_data["RULE_TYPE_ID"],                         # 3
            rule_data["RULE_NAME"].strip(),                    # 4
            rule_data.get("RULE_SQL", ""),                     # 5

            rule_data.get("EFFECTIVE_START_DATE"),             # 6
            rule_data.get("EFFECTIVE_END_DATE"),               # 7

            rule_data.get("STATUS", "INACTIVE"),               # 8
            1,  # VERSION=1 on insert                            9

            created_by,                                         # 10
            rule_data.get("DESCRIPTION", ""),                   # 11
            final_op,                                           # 12 (OPERATION_TYPE)

            rule_data.get("BUSINESS_JUSTIFICATION", ""),        # 13
            now_str,                                            # 14 (CREATED_TIMESTAMP)
            None,  # updated_by                                  # 15
            rule_data["OWNER_GROUP"],                           # 16

            rule_data.get("CLUSTER_NAME", ""),                  # 17
            "APPROVAL_IN_PROGRESS",                             # 18
            rule_data.get("IS_GLOBAL", 0),                      # 19
            rule_data.get("CRITICAL_RULE", 0),                  # 20

            rule_data.get("CRITICAL_SCOPE", "NONE"),            # 21
            rule_data.get("CDC_TYPE", "NONE"),                  # 22
            rule_data["LIFECYCLE_STATE"],                       # 23
            rule_data.get("DECISION_TABLE_ID")                  # 24
        )
    )
    row = c.fetchone()
    if not row:
        raise ValueError("Insert failed => no RULE_ID returned.")
    new_id = row[0]

    # Example: do more steps or insert dependencies, then commit
    conn.commit()
    return new_id