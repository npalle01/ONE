CREATE TABLE BRM_RULES (
  RULE_ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
  GROUP_ID INT NULL,
  PARENT_RULE_ID INT NULL,
  RULE_TYPE_ID INT NULL,
  RULE_NAME VARCHAR(200) NOT NULL,
  RULE_SQL VARCHAR(MAX) NULL,
  EFFECTIVE_START_DATE DATETIME NULL,
  EFFECTIVE_END_DATE DATETIME NULL,
  STATUS VARCHAR(50) NOT NULL DEFAULT('INACTIVE'),
  VERSION INT NOT NULL DEFAULT(1),
  CREATED_BY VARCHAR(100) NULL,
  DESCRIPTION VARCHAR(1000) NULL,
  OPERATION_TYPE VARCHAR(50) NULL,
  BUSINESS_JUSTIFICATION VARCHAR(1000) NULL,
  CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
  UPDATED_BY VARCHAR(100) NULL,
  OWNER_GROUP VARCHAR(100) NOT NULL,
  CLUSTER_NAME VARCHAR(100) NULL,
  APPROVAL_STATUS VARCHAR(50) NULL,
  IS_GLOBAL BIT NOT NULL DEFAULT(0),
  CRITICAL_RULE BIT NOT NULL DEFAULT(0),
  CRITICAL_SCOPE VARCHAR(50) NULL,
  CDC_TYPE VARCHAR(50) NULL,
  LIFECYCLE_STATE VARCHAR(50) NULL,
  DECISION_TABLE_ID INT NULL,
  PERF_USAGE_COUNTER INT NOT NULL DEFAULT(0)  -- (25th insertable column)
);

import datetime

def add_rule(conn, rule_data, created_by, user_group):
    """
    Final snippet with 25 columns in BRM_RULES (excluding RULE_ID IDENTITY),
    including PERF_USAGE_COUNTER. Adjust if your schema differs.
    """
    now_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # Suppose we detect final_op from the rule SQL or something:
    final_op = rule_data.get("OPERATION_TYPE", "SELECT")

    # Build parameter tuple in the exact order:
    params = (
        rule_data.get("GROUP_ID"),            # 1
        rule_data.get("PARENT_RULE_ID"),      # 2
        rule_data["RULE_TYPE_ID"],            # 3
        rule_data["RULE_NAME"].strip(),       # 4
        rule_data.get("RULE_SQL",""),         # 5

        rule_data.get("EFFECTIVE_START_DATE"),# 6
        rule_data.get("EFFECTIVE_END_DATE"),  # 7

        rule_data.get("STATUS","INACTIVE"),   # 8
        1,  # VERSION=1 initially              # 9

        created_by,                           # 10
        rule_data.get("DESCRIPTION",""),      # 11
        final_op,                             # 12 OPERATION_TYPE

        rule_data.get("BUSINESS_JUSTIFICATION",""),  # 13
        now_str,                              # 14 CREATED_TIMESTAMP
        None,                                 # 15 UPDATED_BY
        rule_data["OWNER_GROUP"],             # 16

        rule_data.get("CLUSTER_NAME",""),     # 17
        rule_data.get("APPROVAL_STATUS","APPROVAL_IN_PROGRESS"), # 18
        rule_data.get("IS_GLOBAL", 0),        # 19
        rule_data.get("CRITICAL_RULE", 0),    # 20

        rule_data.get("CRITICAL_SCOPE","NONE"),# 21
        rule_data.get("CDC_TYPE","NONE"),     # 22
        rule_data["LIFECYCLE_STATE"],         # 23
        rule_data.get("DECISION_TABLE_ID"),   # 24

        rule_data.get("PERF_USAGE_COUNTER",0) # 25
    )

    c = conn.cursor()
    c.execute("""
      INSERT INTO BRM_RULES(
        GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
        EFFECTIVE_START_DATE, EFFECTIVE_END_DATE,
        STATUS, VERSION,
        CREATED_BY, DESCRIPTION, OPERATION_TYPE,
        BUSINESS_JUSTIFICATION, CREATED_TIMESTAMP, UPDATED_BY, OWNER_GROUP,
        CLUSTER_NAME, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE,
        CRITICAL_SCOPE, CDC_TYPE, LIFECYCLE_STATE, DECISION_TABLE_ID,
        PERF_USAGE_COUNTER
      )
      OUTPUT inserted.RULE_ID
      VALUES(
        ?,?,?,?,?,
        ?,?,
        ?,?,
        ?,?,?,?,
        ?,?,?,?,
        ?,?,?,?,
        ?,?,?,
        ?
      )
    """, params)
    row = c.fetchone()
    if not row:
        raise ValueError("Insert failed: no RULE_ID returned.")
    new_id = row[0]

    # commit
    conn.commit()
    return new_id

