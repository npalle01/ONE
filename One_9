#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_defect_management.py

Defect Logging and Management Module for the BRM Tool.
This integrates seamlessly with the other modules to log, track,
and manage defects that occur during rule authoring, BFS execution,
data validations, or user-reported issues.

Features:
  - DefectManagementTab: displays defect logs, auto‑refresh, real‑time notifications.
  - Create, edit, delete defect records (with confirmation).
  - Searching/filtering by rule, description, severity, status, or reporter.
  - Optionally, store simulation impacts or record counts if relevant.
"""

import sys
import json
import logging
from datetime import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QPushButton, QMessageBox, QDialog, QLineEdit, QTextEdit, QComboBox, 
    QInputDialog, QPlainTextEdit, QLabel
)

# Suppose from brm_core_foundation we have:
from brm_core_foundation import (
    logger, fetch_all_dict, fetch_one_dict
)

# ---------------------------------------------------------------------------
# Database helper to add a defect log
# ---------------------------------------------------------------------------
def add_defect_log(conn, rule_id, description, severity, reporter, status="Open", resolution=None):
    """
    Insert a defect log record into BRM_DEFECT_LOGS table.
    Columns might be:
      - DEFECT_ID (PK identity)
      - RULE_ID (int, nullable)
      - DESCRIPTION (text)
      - SEVERITY (varchar: Low, Medium, High, Critical)
      - REPORTER (varchar)
      - STATUS (varchar: Open, In Progress, Resolved, Closed, etc.)
      - RESOLUTION (text, nullable)
      - TIMESTAMP (datetime)
    """
    try:
        c = conn.cursor()
        c.execute("""
            INSERT INTO BRM_DEFECT_LOGS(
                RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS, RESOLUTION, TIMESTAMP
            )
            VALUES(?,?,?,?,?,?,GETDATE())
        """,(rule_id, description, severity, reporter, status, resolution))
        conn.commit()
        logger.info(f"Defect log added for rule {rule_id}, reported by {reporter}.")
    except Exception as ex:
        logger.error(f"Error adding defect log: {ex}")
        raise

# ---------------------------------------------------------------------------
# DefectDialog for add/edit
# ---------------------------------------------------------------------------
class DefectDialog(QDialog):
    """
    A dialog for adding or editing an existing defect record.
    If defect_data is None, we create a new one. Otherwise, we edit.
    """
    def __init__(self, connection, defect_data=None, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.defect_data=defect_data
        self.is_edit=(defect_data is not None)
        self.init_ui()

    def init_ui(self):
        title="Edit Defect" if self.is_edit else "Add Defect"
        self.setWindowTitle(title)
        self.resize(500,400)

        layout=QVBoxLayout(self)

        form_layout=QtWidgets.QFormLayout()
        self.rule_id_edit=QLineEdit()
        self.rule_id_edit.setPlaceholderText("Optional rule ID")
        form_layout.addRow("Rule ID:", self.rule_id_edit)

        self.desc_edit=QTextEdit()
        form_layout.addRow("Description:", self.desc_edit)

        self.severity_combo=QComboBox()
        self.severity_combo.addItems(["Low","Medium","High","Critical"])
        form_layout.addRow("Severity:", self.severity_combo)

        self.reporter_edit=QLineEdit()
        form_layout.addRow("Reporter:", self.reporter_edit)

        self.status_combo=QComboBox()
        self.status_combo.addItems(["Open","In Progress","Resolved","Closed"])
        form_layout.addRow("Status:", self.status_combo)

        self.resolution_edit=QTextEdit()
        form_layout.addRow("Resolution:", self.resolution_edit)

        layout.addLayout(form_layout)

        bh=QHBoxLayout()
        save_btn=QPushButton("Save")
        save_btn.clicked.connect(self.save_defect)
        bh.addWidget(save_btn)
        cancel_btn=QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        bh.addWidget(cancel_btn)
        layout.addLayout(bh)

        if self.is_edit and self.defect_data:
            self.load_existing_data()

        self.setLayout(layout)

    def load_existing_data(self):
        d=self.defect_data
        if d.get("RULE_ID"):
            self.rule_id_edit.setText(str(d["RULE_ID"]))
        self.desc_edit.setPlainText(d.get("DESCRIPTION",""))
        sev=d.get("SEVERITY","Low")
        idx_s=self.severity_combo.findText(sev, Qt.MatchFixedString)
        if idx_s>=0:
            self.severity_combo.setCurrentIndex(idx_s)
        self.reporter_edit.setText(d.get("REPORTER",""))
        st=d.get("STATUS","Open")
        idx_st=self.status_combo.findText(st, Qt.MatchFixedString)
        if idx_st>=0:
            self.status_combo.setCurrentIndex(idx_st)
        self.resolution_edit.setPlainText(d.get("RESOLUTION",""))

    def save_defect(self):
        try:
            rule_id_text=self.rule_id_edit.text().strip()
            rule_id=None
            if rule_id_text:
                rule_id=int(rule_id_text)
        except:
            QMessageBox.warning(self,"Error","Rule ID must be integer or blank.")
            return
        description=self.desc_edit.toPlainText().strip()
        if not description:
            QMessageBox.warning(self,"Error","Description is required.")
            return
        severity=self.severity_combo.currentText()
        reporter=self.reporter_edit.text().strip()
        if not reporter:
            QMessageBox.warning(self,"Error","Reporter is required.")
            return
        status_=self.status_combo.currentText()
        resolution=self.resolution_edit.toPlainText().strip() or None

        c=self.connection.cursor()
        if self.is_edit and self.defect_data:
            defect_id=self.defect_data["DEFECT_ID"]
            try:
                c.execute("""
                    UPDATE BRM_DEFECT_LOGS
                    SET RULE_ID=?, DESCRIPTION=?, SEVERITY=?, REPORTER=?,
                        STATUS=?, RESOLUTION=?, TIMESTAMP=GETDATE()
                    WHERE DEFECT_ID=?
                """,(rule_id, description, severity, reporter, status_, resolution, defect_id))
                self.connection.commit()
                logger.info(f"Defect {defect_id} updated by {reporter}.")
            except Exception as ex:
                logger.error(f"Error updating defect {defect_id}: {ex}")
                QMessageBox.critical(self,"Error",str(ex))
                return
        else:
            # add new
            try:
                add_defect_log(self.connection, rule_id, description, severity, reporter, status_, resolution)
            except Exception as ex:
                QMessageBox.critical(self,"Error",str(ex))
                return

        self.accept()


# ---------------------------------------------------------------------------
# DefectManagementTab UI
# ---------------------------------------------------------------------------
class DefectManagementTab(QWidget):
    """
    Main UI for defect logs:
      - table with columns
      - auto refresh every 30s
      - new defects => real-time notification
      - add, edit, delete
      - search filter
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.last_defect_count=0  # used to detect new defects
        self.init_ui()
        self.load_defects()
        self.start_auto_refresh()

    def init_ui(self):
        layout=QVBoxLayout(self)

        # top row: search
        top_h=QHBoxLayout()
        self.search_edit=QLineEdit()
        self.search_edit.setPlaceholderText("Search by description, severity, reporter, or status...")
        self.search_edit.textChanged.connect(self.search_defects)
        top_h.addWidget(QLabel("Search:"))
        top_h.addWidget(self.search_edit)
        layout.addLayout(top_h)

        self.defect_table=QTableWidget(0,7)
        self.defect_table.setHorizontalHeaderLabels([
            "DefectID","RuleID","Description","Severity","Reporter","Status","Timestamp"
        ])
        self.defect_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.defect_table)

        # bottom row => add/edit/del + refresh
        btn_h=QHBoxLayout()
        add_btn=QPushButton("Add Defect")
        add_btn.clicked.connect(self.add_defect)
        btn_h.addWidget(add_btn)
        edit_btn=QPushButton("Edit Defect")
        edit_btn.clicked.connect(self.edit_defect)
        btn_h.addWidget(edit_btn)
        del_btn=QPushButton("Delete Defect")
        del_btn.clicked.connect(self.delete_defect)
        btn_h.addWidget(del_btn)
        ref_btn=QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_defects)
        btn_h.addWidget(ref_btn)
        btn_h.addStretch()
        layout.addLayout(btn_h)

        # notification label
        self.notification_label=QLabel("")
        self.notification_label.setStyleSheet("color: green; font-weight: bold;")
        layout.addWidget(self.notification_label)

        self.setLayout(layout)

    def load_defects(self):
        self.defect_table.setRowCount(0)
        c=self.connection.cursor()
        c.execute("""
            SELECT DEFECT_ID, RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS, TIMESTAMP
            FROM BRM_DEFECT_LOGS
            ORDER BY TIMESTAMP DESC
        """)
        rows=c.fetchall()
        current_count=len(rows)
        for row in rows:
            r_i=self.defect_table.rowCount()
            self.defect_table.insertRow(r_i)
            for col_i,val in enumerate(row):
                self.defect_table.setItem(r_i,col_i,QTableWidgetItem(str(val) if val else ""))

        # if new defects were added
        if self.last_defect_count and current_count>self.last_defect_count:
            new_ct=current_count-self.last_defect_count
            self.notification_label.setText(f"{new_ct} new defect(s) logged.")
            QtCore.QTimer.singleShot(5000, lambda: self.notification_label.setText(""))
        self.last_defect_count=current_count

        self.defect_table.resizeColumnsToContents()

    def search_defects(self, text):
        txt=text.lower().strip()
        for row in range(self.defect_table.rowCount()):
            row_visible=False
            for col in range(self.defect_table.columnCount()):
                it=self.defect_table.item(row,col)
                if it and txt in it.text().lower():
                    row_visible=True
                    break
            self.defect_table.setRowHidden(row, not row_visible)

    def start_auto_refresh(self):
        self.refresh_timer=QTimer(self)
        self.refresh_timer.timeout.connect(self.load_defects)
        self.refresh_timer.start(30000)  # every 30s

    def get_selected_defect_id(self):
        row=self.defect_table.currentRow()
        if row<0:
            return None
        it=self.defect_table.item(row,0)
        if not it:
            return None
        return int(it.text())

    def add_defect(self):
        dlg=DefectDialog(self.connection, None, self)
        if dlg.exec_()==QDialog.Accepted:
            self.load_defects()

    def edit_defect(self):
        did=self.get_selected_defect_id()
        if not did:
            QMessageBox.warning(self,"None","No defect selected.")
            return
        # fetch
        c=self.connection.cursor()
        c.execute("""
            SELECT DEFECT_ID, RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS, RESOLUTION
            FROM BRM_DEFECT_LOGS
            WHERE DEFECT_ID=?
        """,(did,))
        row=c.fetchone()
        if not row:
            QMessageBox.warning(self,"Not Found",f"No defect ID {did}")
            return
        colnames=[desc[0] for desc in c.description]
        d_data=dict(zip(colnames,row))
        dlg=DefectDialog(self.connection, d_data, self)
        if dlg.exec_()==QDialog.Accepted:
            self.load_defects()

    def delete_defect(self):
        did=self.get_selected_defect_id()
        if not did:
            QMessageBox.warning(self,"None","No defect selected.")
            return
        confirm=QMessageBox.question(self,"Confirm",f"Delete defect {did}?")
        if confirm!=QMessageBox.Yes:
            return
        try:
            c=self.connection.cursor()
            c.execute("DELETE FROM BRM_DEFECT_LOGS WHERE DEFECT_ID=?",(did,))
            self.connection.commit()
            QMessageBox.information(self,"Deleted",f"Defect {did} removed.")
            self.load_defects()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))