# ------------------------------------------------------
# CHECK IF RULE IS LOCKED (Prevents Editing If Locked)
# ------------------------------------------------------
def check_rule_lock(conn, rule_id, user_id):
    """
    Checks if a rule is locked by another user.
    Returns True if the rule is locked by someone else, False if editable.
    """
    c = conn.cursor()
    c.execute("SELECT LOCKED_BY FROM RULE_LOCKS WHERE RULE_ID = ?", (rule_id,))
    row = c.fetchone()
    if row and row[0] and row[0] != user_id:
        return True  # Rule is locked by another user
    return False  # Editable

# ------------------------------------------------------
# ADD AUDIT LOG ENTRY
# ------------------------------------------------------
def add_audit_log(conn, action, table_name, record_id, user, old_data, new_data):
    """
    Logs all actions performed on BRM tables.
    """
    c = conn.cursor()
    c.execute("""
    INSERT INTO BRM_AUDIT_LOG(
      ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA, ACTION_TIMESTAMP
    )
    VALUES (?, ?, ?, ?, ?, ?, GETDATE())
    """, (action, table_name, record_id, user, json.dumps(old_data), json.dumps(new_data)))
    conn.commit()
# ------------------------------------------------------
# CHECK IF USER HAS TABLE-LEVEL PERMISSIONS
# ------------------------------------------------------
def check_table_permissions(conn, user_group, table_list):
    """
    Ensures that the user's group has access to all tables used in a rule.
    """
    c = conn.cursor()
    c.execute("SELECT TARGET_TABLE FROM GROUP_PERMISSIONS WHERE GROUP_NAME=?", (user_group,))
    allowed_tables = {row[0] for row in c.fetchall()}

    for table in table_list:
        if table not in allowed_tables:
            raise PermissionError(f"Access Denied: {user_group} does not have permission for {table}.")
# ------------------------------------------------------
# EXECUTE RULE SQL (Supports Dry-Run & Real Execution)
# ------------------------------------------------------
def execute_rule(conn, rule_id, is_dry_run=False):
    """
    Executes the rule SQL and returns pass/fail.
    If is_dry_run=True, the transaction is rolled back.
    """
    c = conn.cursor()
    c.execute("SELECT RULE_SQL FROM BRM_RULES WHERE RULE_ID=?", (rule_id,))
    row = c.fetchone()
    if not row:
        return False, "Rule not found."

    sql = row[0]
    try:
        c.execute("BEGIN TRANSACTION")
        c.execute(sql)
        rows = c.fetchall()
        result = rows[0][0] if rows else 0
        if is_dry_run:
            c.execute("ROLLBACK")
        else:
            c.execute("COMMIT")
        return result == 1, f"Executed successfully, returned: {result}"
    except Exception as ex:
        c.execute("ROLLBACK")
        return False, str(ex)

# ------------------------------------------------------
# CHAIN SIMULATION DIALOG
# ------------------------------------------------------
class ChainSimulationDialog(QDialog):
    """
    Runs a chain of rules starting from a selected rule.
    Uses BFS to execute all dependent rules in sequence.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Simulate Rule Chain")
        self.resize(500, 300)
        layout = QVBoxLayout(self)

        form = QFormLayout()
        self.parent_rule_combo = QComboBox()
        c = connection.cursor()
        c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        rows = c.fetchall()
        for rid, rname in rows:
            self.parent_rule_combo.addItem(f"{rid} - {rname}", rid)
        form.addRow("Parent Rule:", self.parent_rule_combo)
        layout.addLayout(form)

        self.result_text = QPlainTextEdit()
        self.result_text.setReadOnly(True)
        layout.addWidget(self.result_text)

        bh = QHBoxLayout()
        sim_btn = QPushButton("Simulate Chain")
        sim_btn.clicked.connect(self.sim_chain)
        bh.addWidget(sim_btn)
        cb = QPushButton("Close")
        cb.clicked.connect(self.close)
        bh.addWidget(cb)
        layout.addLayout(bh)
        self.setLayout(layout)

    def sim_chain(self):
        pid = self.parent_rule_combo.currentData()
        ex, sk = self.run_chain_simulation(pid)
        txt = f"Executed: {ex}\nSkipped: {sk}"
        self.result_text.setPlainText(txt)

    def run_chain_simulation(self, start_rule):
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID, PARENT_RULE_ID, RULE_SQL FROM BRM_RULES")
        rows = c.fetchall()
        rule_map = {}
        children_map = {}

        for rid, pid, sql in rows:
            rule_map[rid] = sql
            if pid:
                children_map.setdefault(pid, []).append(rid)

        executed = []
        skipped = set()
        queue = [start_rule]

        while queue:
            rid = queue.pop(0)
            if rid in skipped:
                continue
            if rid not in rule_map:
                skipped.add(rid)
                continue
            sql = rule_map[rid]
            ok, msg = execute_rule(self.connection, rid, is_dry_run=True)
            if ok:
                executed.append(rid)
                if rid in children_map:
                    queue.extend(children_map[rid])
            else:
                skipped.add(rid)

        return executed, skipped
# --- GroupSimulationDialog (Production Ready) ---

class GroupSimulationDialog(QDialog):
    """
    Simulate all rules within a custom group by executing a dry-run on each rule.
    This dialog retrieves all rules assigned to a custom group and then runs a dry-run for each rule,
    collecting the pass/fail results and displaying them in a text area.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Simulate Custom Group")
        self.resize(500, 300)
        layout = QVBoxLayout(self)
        
        # Form to select a custom group
        form = QFormLayout()
        self.group_combo = QComboBox()
        c = self.connection.cursor()
        c.execute("SELECT CUSTOM_GROUP_ID, CUSTOM_GROUP_NAME FROM BRM_CUSTOM_RULE_GROUPS ORDER BY CUSTOM_GROUP_ID")
        rows = c.fetchall()
        for (cg_id, cg_name) in rows:
            self.group_combo.addItem(f"{cg_id} - {cg_name}", cg_id)
        form.addRow("Custom Group:", self.group_combo)
        layout.addLayout(form)
        
        # Read-only text area to display results
        self.result_text = QPlainTextEdit()
        self.result_text.setReadOnly(True)
        layout.addWidget(self.result_text)
        
        # Buttons for simulation and closing
        btn_layout = QHBoxLayout()
        sim_btn = QPushButton("Simulate Group")
        sim_btn.clicked.connect(self.simulate_group)
        btn_layout.addWidget(sim_btn)
        close_btn = QPushButton("Close")
        close_btn.clicked.connect(self.close)
        btn_layout.addWidget(close_btn)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        
        self.setLayout(layout)
    
    def simulate_group(self):
        """
        Retrieve the member rule IDs from the selected custom group,
        then for each rule perform a dry-run execution.
        Results are displayed as executed and failed rule lists.
        """
        group_id = self.group_combo.currentData()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID FROM BRM_CUSTOM_GROUP_MEMBERS WHERE CUSTOM_GROUP_ID=?", (group_id,))
        rule_ids = [row[0] for row in c.fetchall()]
        
        executed = []
        failed = []
        # iterate over each rule ID and perform a dry-run execution using execute_rule helper
        for rid in rule_ids:
            ok, msg = execute_rule(self.connection, rid, is_dry_run=True)
            if ok:
                executed.append(rid)
            else:
                failed.append(rid)
        result = (
            f"Group Simulation for Group {group_id}\n"
            f"Total Rules: {len(rule_ids)}\n"
            f"Executed Successfully: {executed}\n"
            f"Failed: {failed}"
        )
        self.result_text.setPlainText(result)
