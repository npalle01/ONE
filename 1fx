def load_rules(self):
    txt = self.search_edit.text().strip()
    c = self.connection.cursor()
    if txt:
        query = """
            SELECT RULE_ID, RULE_NAME, RULE_SQL, STATUS, OWNER_GROUP, CRITICAL_RULE
            FROM BRM_RULES
            WHERE RULE_NAME LIKE ? OR RULE_SQL LIKE ?
            ORDER BY RULE_ID DESC
        """
        c.execute(query, (f"%{txt}%", f"%{txt}%"))
    else:
        query = """
            SELECT RULE_ID, RULE_NAME, RULE_SQL, STATUS, OWNER_GROUP, CRITICAL_RULE
            FROM BRM_RULES
            ORDER BY RULE_ID DESC
        """
        c.execute(query)
    
    self.table.setRowCount(0)
    for row in c.fetchall():
        idx = self.table.rowCount()
        self.table.insertRow(idx)
        # Populate columns 0 to 4
        for i, rval in enumerate(row):
            if i < 5:
                self.table.setItem(idx, i, QTableWidgetItem(str(rval) if rval else ""))
            elif i == 5:  # Critical flag column
                cr = "Yes" if rval else "No"
                self.table.setItem(idx, i, QTableWidgetItem(cr))
        
        # Create the "Actions" cell with buttons
        action_widget = QWidget()
        a_layout = QHBoxLayout(action_widget)
        a_layout.setContentsMargins(0, 0, 0, 0)
        
        # Capture the current rule id in each lambda's default parameter
        rule_id = row[0]
        
        modify_btn = QPushButton("Modify")
        modify_btn.clicked.connect(lambda _, rule_id=rule_id: self.modify_rule(rule_id))
        a_layout.addWidget(modify_btn)
        
        deactivate_btn = QPushButton("Deactivate")
        deactivate_btn.clicked.connect(lambda _, rule_id=rule_id: self.deactivate_rule(rule_id))
        a_layout.addWidget(deactivate_btn)
        
        delete_btn = QPushButton("Delete")
        delete_btn.clicked.connect(lambda _, rule_id=rule_id: self.delete_rule(rule_id))
        a_layout.addWidget(delete_btn)
        
        a_layout.addStretch()
        self.table.setCellWidget(idx, 6, action_widget)