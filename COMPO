import sys
from PyQt5.QtWidgets import (
    QApplication, QWidget, QDialog, QVBoxLayout, QHBoxLayout, QListWidget,
    QLabel, QLineEdit, QPushButton, QInputDialog, QMessageBox, QTableWidget,
    QTableWidgetItem, QHeaderView, QAbstractItemView, QTabWidget
)
from PyQt5.QtCore import Qt

# ----------------------
# CompositeRuleWizard
# ----------------------
class CompositeRuleWizard(QDialog):
    """
    A dialog that supports both creating and editing composite rules.
    It allows the user to select multiple individual rules, define a logical expression,
    and specify an action to take when the composite rule passes.
    """
    def __init__(self, connection, composite_rule=None, parent=None):
        """
        :param connection: The database connection (or similar backend object)
        :param composite_rule: A dictionary representing the composite rule to edit.
                               If None, the wizard will create a new composite rule.
        """
        super().__init__(parent)
        self.connection = connection
        self.composite_rule = composite_rule  # None if creating new rule
        self.selected_rules = []  # Will hold a list of rule IDs
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Composite Rule Wizard" + (" - Edit" if self.composite_rule else " - Create"))
        self.resize(600, 400)
        layout = QVBoxLayout(self)

        # Rule selection list
        self.rule_list = QListWidget()
        # For demonstration, we load dummy available rules.
        # In production, query your database (using self.connection) to retrieve available rules.
        for rule_id, rule_name in self.load_available_rules():
            self.rule_list.addItem(f"Rule {rule_id}: {rule_name}")
        self.rule_list.setSelectionMode(QListWidget.MultiSelection)
        layout.addWidget(QLabel("Select rules to include in the composite:"))
        layout.addWidget(self.rule_list)

        # Composite expression input
        self.expr_edit = QLineEdit()
        self.expr_edit.setPlaceholderText("Enter composite expression (e.g., 'Rule1 AND Rule2')")
        layout.addWidget(QLabel("Composite Expression:"))
        layout.addWidget(self.expr_edit)

        # Action on pass input
        self.action_edit = QLineEdit()
        self.action_edit.setPlaceholderText("Enter action on pass (e.g., SendEmail)")
        layout.addWidget(QLabel("Action on Pass:"))
        layout.addWidget(self.action_edit)

        # Buttons row
        btn_layout = QHBoxLayout()
        finish_btn = QPushButton("Finish")
        finish_btn.clicked.connect(self.finish_wizard)
        btn_layout.addWidget(finish_btn)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(cancel_btn)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)

        # If editing an existing composite rule, pre-populate fields.
        if self.composite_rule:
            self.expr_edit.setText(self.composite_rule.get("LOGIC_EXPR", ""))
            self.action_edit.setText(self.composite_rule.get("ACTION_ON_PASS", ""))
            rule_ids = self.composite_rule.get("RULE_IDS", [])
            for i in range(self.rule_list.count()):
                item_text = self.rule_list.item(i).text()
                try:
                    current_id = int(item_text.split(":")[0].split()[1])
                    if current_id in rule_ids:
                        self.rule_list.item(i).setSelected(True)
                except Exception:
                    continue

        self.setLayout(layout)

    def load_available_rules(self):
        # Dummy data for demonstration.
        # Replace with an actual query using self.connection.
        return [
            (1, "Customer Insert Rule"),
            (2, "Order Update Rule"),
            (3, "Select Report Rule"),
            (4, "Decision Table Rule"),
            (5, "Critical Delete Rule"),
            (6, "Child Rule of Customer Insert"),
            (7, "Inventory Check Rule"),
            (8, "Child Inventory Rule"),
            (9, "Customer Update Rule")
        ]

    def finish_wizard(self):
        # Collect selected rule IDs.
        selected_items = self.rule_list.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "No Selection", "Please select at least one rule.")
            return
        self.selected_rules = []
        for item in selected_items:
            try:
                rule_id = int(item.text().split(":")[0].split()[1])
                self.selected_rules.append(rule_id)
            except Exception:
                continue

        expr = self.expr_edit.text().strip()
        action = self.action_edit.text().strip()
        if not expr:
            QMessageBox.warning(self, "Missing Expression", "Please enter a composite expression.")
            return

        # Here, in production, you would perform database operations:
        # If self.composite_rule is None, insert a new composite rule.
        # Otherwise, update the existing record.
        # For this demonstration, we simply print the details.
        if self.composite_rule is None:
            print("Creating composite rule with rules:", self.selected_rules)
            print("Expression:", expr)
            print("Action on pass:", action)
        else:
            print("Updating composite rule ID", self.composite_rule.get("COMPOSITE_RULE_ID"))
            print("New rules:", self.selected_rules)
            print("New expression:", expr)
            print("New action on pass:", action)
        # On success, accept the dialog.
        self.accept()

# ----------------------
# CompositeRulesTab with CRUD Operations
# ----------------------
class CompositeRulesTab(QWidget):
    """
    A tab widget that displays composite rules and provides CRUD operations:
      - Create a new composite rule via the CompositeRuleWizard.
      - Read (list) composite rules.
      - Update a composite rule (open wizard pre-populated).
      - Delete a composite rule.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)

        # Action buttons row
        action_layout = QHBoxLayout()
        add_btn = QPushButton("Add Composite Rule")
        add_btn.clicked.connect(self.add_rule)
        action_layout.addWidget(add_btn)
        edit_btn = QPushButton("Edit Selected Rule")
        edit_btn.clicked.connect(self.edit_rule)
        action_layout.addWidget(edit_btn)
        delete_btn = QPushButton("Delete Selected Rule")
        delete_btn.clicked.connect(self.delete_rule)
        action_layout.addWidget(delete_btn)
        refresh_btn = QPushButton("Refresh")
        refresh_btn.clicked.connect(self.load_composite_rules)
        action_layout.addWidget(refresh_btn)
        action_layout.addStretch()
        layout.addLayout(action_layout)

        # Composite rules table
        self.table = QTableWidget(0, 5)
        self.table.setHorizontalHeaderLabels(["CompositeID", "Name", "Expression", "Action", "Last Updated"])
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.table)

        self.setLayout(layout)
        self.load_composite_rules()

    def load_composite_rules(self):
        """Fetch composite rules from the database and populate the table.
           For demonstration, we use dummy data.
        """
        self.table.setRowCount(0)
        # Dummy data representing composite rules.
        dummy_data = [
            {"COMPOSITE_RULE_ID": 1, "CRULE_NAME": "Composite Rule 1", "LOGIC_EXPR": "Rule1 AND Rule2",
             "ACTION_ON_PASS": "SendEmail", "LAST_UPDATED": "2025-03-15 10:00:00", "RULE_IDS": [1, 2]},
            {"COMPOSITE_RULE_ID": 2, "CRULE_NAME": "Composite Rule 2", "LOGIC_EXPR": "Rule3 OR Rule4",
             "ACTION_ON_PASS": "LogEvent", "LAST_UPDATED": "2025-03-16 11:30:00", "RULE_IDS": [3, 4]},
            {"COMPOSITE_RULE_ID": 3, "CRULE_NAME": "Composite Rule 3", "LOGIC_EXPR": "Rule1 AND Rule5",
             "ACTION_ON_PASS": "NotifyAdmin", "LAST_UPDATED": "2025-03-17 09:45:00", "RULE_IDS": [1, 5]}
        ]
        for i, row in enumerate(dummy_data):
            self.table.insertRow(i)
            self.table.setItem(i, 0, QTableWidgetItem(str(row["COMPOSITE_RULE_ID"])))
            self.table.setItem(i, 1, QTableWidgetItem(row["CRULE_NAME"]))
            self.table.setItem(i, 2, QTableWidgetItem(row["LOGIC_EXPR"]))
            self.table.setItem(i, 3, QTableWidgetItem(row["ACTION_ON_PASS"]))
            self.table.setItem(i, 4, QTableWidgetItem(row["LAST_UPDATED"]))
            # Store the full row data in the first column's user data for easy retrieval.
            self.table.item(i, 0).setData(Qt.UserRole, row)

    def add_rule(self):
        wizard = CompositeRuleWizard(self.connection)
        if wizard.exec_() == QDialog.Accepted:
            # In production, insert the composite rule into the database.
            print("New composite rule created:")
            print("Selected rules:", wizard.selected_rules)
            print("Expression:", wizard.expr_edit.text())
            print("Action:", wizard.action_edit.text())
            self.load_composite_rules()

    def edit_rule(self):
        selected_items = self.table.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "No Selection", "Please select a composite rule to edit.")
            return
        composite_data = self.table.item(selected_items[0].row(), 0).data(Qt.UserRole)
        wizard = CompositeRuleWizard(self.connection, composite_rule=composite_data)
        if wizard.exec_() == QDialog.Accepted:
            # In production, update the composite rule in the database.
            print("Composite rule updated:")
            print("New selected rules:", wizard.selected_rules)
            print("New expression:", wizard.expr_edit.text())
            print("New action:", wizard.action_edit.text())
            self.load_composite_rules()

    def delete_rule(self):
        selected_items = self.table.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "No Selection", "Please select a composite rule to delete.")
            return
        composite_data = self.table.item(selected_items[0].row(), 0).data(Qt.UserRole)
        comp_id = composite_data.get("COMPOSITE_RULE_ID")
        confirm = QMessageBox.question(self, "Confirm Delete", f"Are you sure you want to delete composite rule {comp_id}?")
        if confirm != QMessageBox.Yes:
            return
        try:
            # In production, delete the composite rule from the database.
            print("Composite rule deleted:", comp_id)
            self.load_composite_rules()
        except Exception as e:
            QMessageBox.critical(self, "Delete Error", str(e))

# ----------------------
# Main Window for Testing Composite Rules Management
# ----------------------
class MainWindow(QWidget):
    def __init__(self, connection):
        super().__init__()
        self.connection = connection
        self.setWindowTitle("Composite Rule CRUD Demo")
        self.resize(800, 600)
        layout = QVBoxLayout(self)
        self.tabWidget = QTabWidget()
        self.compositeRulesTab = CompositeRulesTab(self.connection)
        self.tabWidget.addTab(self.compositeRulesTab, "Composite Rules")
        layout.addWidget(self.tabWidget)
        self.setLayout(layout)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    # For testing, pass None for connection; replace with your actual connection.
    window = MainWindow(connection=None)
    window.show()
    sys.exit(app.exec_())