#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_tool_main.py (Refined Aggregator)

This is the refined and bug‑fixed final aggregator for the BRM Tool.
It groups functionality into strategic categories with sub‑tabs.
All modules are imported with corrected references.
Ensure all referenced modules exist in the same directory or proper import path.
"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QTabWidget, QAction,
    QComboBox, QPushButton, QMessageBox, QDialog, QLabel
)
from PyQt5.QtCore import QTimer, Qt

# Import core modules and UIs
from brm_core_foundation import (
    DatabaseConnectionDialog, LoginDialog, sync_metadata_improved, logger
)
from brm_rule_engine import BusinessRulesTab
from brm_simulation_scheduler import ScheduleManagementTab, ChainSimulationDialog, GroupSimulationDialog
from brm_advanced_decision_tables import AdvancedDecisionTablesTab
from brm_advanced_approvals_and_lineage import (
    MultiStepApprovalTab, GlobalCriticalAdminTab, HierarchyViewTab, EnhancedLineageGraphWidget
)
from brm_defect_management import DefectManagementTab
from brm_metrics_and_control_management import (
    MetricsDashboardTab, ControlTablesTab, GroupManagementTab, UserManagementTab
)
from brm_audit_activity_tracking import ActivityTrackingTab
from brm_dashboard_cards import DashboardCardsTab
from brm_live_collaboration import CollaborationManager, CollaborationTab
from brm_sql_to_business_converter import SqlToBusinessConverterTab
from brm_contextual_inline_editing import InlineEditingTab
from brm_performance_alerting_and_trends import PerformanceAlertingTab
from brm_data_validations import DataValidationManagerTab
from brm_enhanced_workflow_pipeline import PipelineDesignerTab, apply_modern_theme
from brm_custom_rule_groups_and_alerts import CustomRuleGroupEnhancedTab, AlertsAndDashboardsTab

class BRMTool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BRM Tool Aggregator")
        self.resize(1500, 900)
        self.connection = None
        self.user_id = None
        self.user_group = None
        self.logged_in_username = None
        self.init_db_and_login()
        self.init_ui()

    def init_db_and_login(self):
        db_dialog = DatabaseConnectionDialog()
        if db_dialog.exec_() != QDialog.Accepted:
            sys.exit(0)
        conn = db_dialog.get_connection()
        if not conn:
            sys.exit(1)
        self.connection = conn
        login_dialog = LoginDialog(self.connection)
        if login_dialog.exec_() != QDialog.Accepted:
            sys.exit(0)
        self.user_id = login_dialog.user_id
        self.user_group = login_dialog.user_group
        c = self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (self.user_id,))
        row = c.fetchone()
        self.logged_in_username = row[0] if row else "Unknown"

    def init_ui(self):
        menubar = self.menuBar()
        file_menu = menubar.addMenu("File")
        sync_act = QAction("Sync Metadata", self)
        sync_act.triggered.connect(self.sync_metadata)
        file_menu.addAction(sync_act)
        chain_sim_act = QAction("Chain BFS Simulation", self)
        chain_sim_act.triggered.connect(self.launch_chain_sim)
        file_menu.addAction(chain_sim_act)
        group_sim_act = QAction("Group BFS Simulation", self)
        group_sim_act.triggered.connect(self.launch_group_sim)
        file_menu.addAction(group_sim_act)
        tools_menu = menubar.addMenu("Tools")
        audit_act = QAction("Activity Logs", self)
        audit_act.triggered.connect(self.launch_activity_logs)
        tools_menu.addAction(audit_act)
        search_act = QAction("Search Rules", self)
        search_act.triggered.connect(self.launch_rule_search)
        tools_menu.addAction(search_act)
        help_menu = menubar.addMenu("Help")
        about_act = QAction("About", self)
        about_act.triggered.connect(self.show_about)
        help_menu.addAction(about_act)

        central_widget = QWidget()
        main_layout = QVBoxLayout(central_widget)

        if self.user_group == "Admin":
            top_h = QHBoxLayout()
            self.impersonate_combo = QComboBox()
            self.impersonate_btn = QPushButton("Switch User")
            self.impersonate_btn.clicked.connect(self.switch_user)
            top_h.addWidget(QLabel("Impersonate:"))
            top_h.addWidget(self.impersonate_combo)
            top_h.addStretch()
            main_layout.addLayout(top_h)
            self.load_impersonation_options()

        self.tabs = QTabWidget()
        main_layout.addWidget(self.tabs)

        # Add tabs from various modules
        self.tabs.addTab(DashboardCardsTab(self.connection), "Dashboard")
        self.tabs.addTab(BusinessRulesTab(self.connection, self.user_id, self.user_group), "Business Rules")
        self.tabs.addTab(MultiStepApprovalTab(self.connection, self.logged_in_username, self.user_group), "Approvals")
        if self.user_group == "Admin":
            self.tabs.addTab(GlobalCriticalAdminTab(self, self.connection, self.user_group), "GCR Admin")
        self.tabs.addTab(HierarchyViewTab(self.connection), "Hierarchy")
        lineage_wrapper = QWidget()
        lw_layout = QVBoxLayout(lineage_wrapper)
        lw_layout.addWidget(EnhancedLineageGraphWidget(self.connection))
        lineage_wrapper.setLayout(lw_layout)
        self.tabs.addTab(lineage_wrapper, "Lineage")
        self.tabs.addTab(ScheduleManagementTab(self.connection), "Scheduling")
        self.tabs.addTab(DefectManagementTab(self.connection), "Defects")
        self.tabs.addTab(ControlTablesTab(self.connection, self.user_group), "Control Tables")
        self.tabs.addTab(MetricsDashboardTab(self.connection), "Metrics")
        self.tabs.addTab(GroupManagementTab(self.connection, self.user_id, self.user_group), "Group Management")
        if self.user_group == "Admin":
            self.tabs.addTab(UserManagementTab(self.connection), "User Management")
        self.tabs.addTab(AdvancedDecisionTablesTab(self.connection), "Decision Tables")
        self.tabs.addTab(PerformanceAlertingTab(self.connection), "Perf Trends")
        self.tabs.addTab(ActivityTrackingTab(self.connection), "Activity Logs")
        self.tabs.addTab(DataValidationManagerTab(self.connection), "Data Validations")
        self.tabs.addTab(InlineEditingTab(self.connection, self.user_id, self.user_group), "Inline Editing")
        self.tabs.addTab(SqlToBusinessConverterTab(self.connection), "SQL→Business")
        self.collab_manager = CollaborationManager(self.connection, poll_interval_ms=5000, parent=self)
        self.tabs.addTab(CollaborationTab(self.connection, self.collab_manager), "Collaboration")
        self.tabs.addTab(PipelineDesignerTab(self.connection), "Pipeline Workflow")
        self.tabs.addTab(CustomRuleGroupEnhancedTab(self.connection, self.user_id, self.user_group), "Custom Groups")
        self.tabs.addTab(AlertsAndDashboardsTab(self.connection, self.user_id, self.user_group), "Alerts")

        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # Timers for periodic refreshes
        self.approvals_timer = QTimer(self)
        self.approvals_timer.timeout.connect(lambda: self.tabs.widget(2).load_approvals())
        self.approvals_timer.start(4000)
        self.sched_timer = QTimer(self)
        self.sched_timer.timeout.connect(self.check_due_schedules)
        self.sched_timer.start(60000)
        self.alerts_timer = QTimer(self)
        self.alerts_timer.timeout.connect(lambda: self.tabs.widget(11).check_alerts())
        self.alerts_timer.start(120000)

        apply_modern_theme(QApplication.instance())
        self.show()

    def load_impersonation_options(self):
        c = self.connection.cursor()
        c.execute("SELECT USER_ID, USERNAME, USER_GROUP FROM USERS ORDER BY USER_ID")
        for uid, uname, grp in c.fetchall():
            self.impersonate_combo.addItem(f"{uname} ({grp})", (uid, grp))

    def switch_user(self):
        data = self.impersonate_combo.currentData()
        if not data:
            return
        new_uid, new_grp = data
        if new_uid == self.user_id and new_grp == self.user_group:
            return
        self.user_id, self.user_group = new_uid, new_grp
        c = self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (new_uid,))
        row = c.fetchone()
        self.logged_in_username = row[0] if row else "Unknown"
        QMessageBox.information(self, "Switched", f"Now impersonating {self.logged_in_username} ({new_grp}).")
        self.tabs.widget(2).logged_in_username = self.logged_in_username
        self.tabs.widget(2).user_group = self.user_group
        self.tabs.widget(2).load_approvals()
        self.tabs.widget(1).set_user(self.user_id, self.user_group)
        self.tabs.widget(11).user_id = self.user_id
        self.tabs.widget(11).user_group = self.user_group
        self.tabs.widget(11).check_alerts()
        self.tabs.widget(10).load_data()
        self.tabs.widget(9).load_users()
        if hasattr(self, "user_mgmt_tab") and self.user_group != "Admin":
            pass
        self.tabs.widget(12).user_id = self.user_id
        self.tabs.widget(12).user_group = self.user_group
        self.tabs.widget(13).user_id = self.user_id
        self.tabs.widget(13).user_group = self.user_group
        self.tabs.widget(14).refresh_data()

    def sync_metadata(self):
        try:
            msg = sync_metadata_improved(self.connection)
            QMessageBox.information(self, "Sync Metadata", msg)
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))

    def launch_chain_sim(self):
        dlg = ChainSimulationDialog(self.connection, self)
        dlg.exec_()

    def launch_group_sim(self):
        dlg = GroupSimulationDialog(self.connection, self)
        dlg.exec_()

    def launch_activity_logs(self):
        self.tabs.setCurrentWidget(self.tabs.widget(11))

    def launch_rule_search(self):
        QMessageBox.information(self, "Rule Search", "Open advanced rule search.")

    def show_about(self):
        QMessageBox.information(self, "About", "BRM Tool Aggregator\nIntegrated modules: Business Rules, Approvals, Scheduling, Defects, Metrics, and more.")

    def check_due_schedules(self):
        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c = self.connection.cursor()
        c.execute("SELECT SCHEDULE_ID, RULE_ID, SCHEDULE_TIME FROM RULE_SCHEDULES WHERE STATUS='Scheduled' AND SCHEDULE_TIME<=?", (now_str,))
        for row in c.fetchall():
            pass
        self.tabs.widget(4).load_schedules()

def main():
    app = QApplication(sys.argv)
    tool = BRMTool()
    tool.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
