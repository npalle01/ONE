#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
BRM Tool – Main Aggregator
--------------------------
This final module ties together all advanced modules into a single QMainWindow,
providing a cohesive, user-friendly experience for:
  - DB Connection & Login
  - Dashboard (cards), Approvals, Rule Dashboard, GCR Admin, Scheduling, Collaboration
  - Inline Editing, Performance Alerts, SQL→Business Converter, Defects, etc.
"""

import sys
import logging
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QTabWidget, QAction, QMessageBox, QMenuBar, QLineEdit, QInputDialog
)
from PyQt5.QtCore import QTimer, Qt

# ---------------------------------------------------------------------------
# Example imports from previously developed modules:
# ---------------------------------------------------------------------------
# from brm_core_foundation import DatabaseConnectionDialog, LoginDialog, logger, OnboardingWizard, send_email_notification
# from brm_rule_engine import execute_rules_bfs, lock_rule_for_edit, unlock_rule_for_edit
# from brm_advanced_sql_parser import parse_sql_dependencies
# from brm_defect_management import DefectManagementTab
# from brm_audit_activity_tracking import ActivityTrackingTab, record_activity_event
# from brm_metrics_control_management import MetricsDashboardTab, CtrlTablesTab, GroupManagementTab, UserManagementTab
# from brm_approvals_and_lineage import MultiStepApprovalTab, GlobalCriticalAdminTab, HierarchyViewTab, EnhancedLineageGraphWidget
# from brm_simulation_scheduler import ScheduleManagementTab, SingleRuleSimulationDialog, ChainSimulationDialog, ...
# from brm_custom_rule_groups_and_alerts import CustomRuleGroupEnhancedTab, AlertsAndDashboardsTab
# from brm_contextual_inline_editing import InlineEditingTab
# from brm_live_collaboration import CollaborationManager, CollaborationTab
# from brm_performance_alerting_and_trends import PerformanceAlertingTab
# from brm_sql_to_business_converter import SqlToBusinessConverterTab
# from brm_dashboard_cards import DashboardCardsTab

# If some modules are combined or have slightly different names, adapt accordingly.


class BRMToolMain(QMainWindow):
    """
    The main aggregator for the advanced BRM Tool.
    """
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BRM Tool – Final Production Aggregator")
        self.resize(1400, 900)

        # Step 1: Database Connection via dialog
        dbdlg = DatabaseConnectionDialog()
        if dbdlg.exec_() == dbdlg.Accepted:
            self.connection = dbdlg.get_connection()
            if not self.connection:
                sys.exit("No DB Connection.")
        else:
            sys.exit("DB Connection canceled.")

        # Step 2: User Login
        login_dlg = LoginDialog(self.connection)
        if login_dlg.exec_() != login_dlg.Accepted:
            sys.exit("Login canceled or failed.")
        self.user_id = login_dlg.user_id
        self.user_group = login_dlg.user_group

        # Optional: fetch username
        c = self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (self.user_id,))
        row = c.fetchone()
        self.logged_in_username = row[0] if row else "UnknownUser"

        # (Optionally) Step 3: Onboarding Wizard if needed
        # wizard = OnboardingWizard(self.connection)
        # wizard.exec_()

        # Step 4: Build UI
        self.init_ui()

    def init_ui(self):
        """
        Builds the menu bar, main tab widget, timers, etc.
        """
        # -- Menu Bar Setup --
        menubar = self.menuBar()
        # File menu
        fileMenu = menubar.addMenu("File")

        syncAct = QAction("Sync Metadata", self)
        syncAct.triggered.connect(self.sync_metadata)
        fileMenu.addAction(syncAct)

        runDVAct = QAction("Run Data Validations", self)
        runDVAct.triggered.connect(self.run_all_data_validations)
        fileMenu.addAction(runDVAct)

        perfAct = QAction("Performance Trends", self)
        perfAct.triggered.connect(self.show_performance_trends_dialog)
        fileMenu.addAction(perfAct)

        chainSimAct = QAction("Chain Simulation", self)
        chainSimAct.triggered.connect(self.launch_chain_sim)
        fileMenu.addAction(chainSimAct)

        groupSimAct = QAction("Group Simulation", self)
        groupSimAct.triggered.connect(self.launch_group_sim)
        fileMenu.addAction(groupSimAct)

        # Tools menu
        toolsMenu = menubar.addMenu("Tools")

        auditAct = QAction("View Activity Logs", self)
        auditAct.triggered.connect(self.launch_activity_logs)
        toolsMenu.addAction(auditAct)

        searchAct = QAction("Search Rules", self)
        searchAct.triggered.connect(self.launch_rule_search)
        toolsMenu.addAction(searchAct)

        versionAct = QAction("Version History", self)
        versionAct.triggered.connect(self.launch_version_history)
        toolsMenu.addAction(versionAct)

        # Could add more menu items if needed
        # Help menu
        helpMenu = menubar.addMenu("Help")
        helpAction = QAction("Show Help/Usage", self)
        helpAction.triggered.connect(self.show_help_usage)
        helpMenu.addAction(helpAction)

        # -- Central Widget with TabWidget --
        central_widget = QWidget()
        main_layout = QVBoxLayout(central_widget)

        # If user_group=="Admin", you can add an "impersonation" combo, etc.
        if self.user_group=="Admin":
            top_h = QHBoxLayout()
            self.impersonate_combo = QtWidgets.QComboBox()
            self.impersonate_btn = QtWidgets.QPushButton("Switch User")
            self.impersonate_btn.clicked.connect(self.on_switch_user)
            top_h.addWidget(QtWidgets.QLabel("Impersonate:"))
            top_h.addWidget(self.impersonate_combo)
            top_h.addWidget(self.impersonate_btn)
            top_h.addStretch()
            main_layout.addLayout(top_h)
            self.populate_impersonation_options()

        self.tabs = QTabWidget()
        main_layout.addWidget(self.tabs)

        # ============= Add Each Advanced Module Tab =============
        # 1) Dashboard Cards (landing page)
        try:
            self.dashboard_cards_tab = DashboardCardsTab(self.connection)
            self.tabs.addTab(self.dashboard_cards_tab, "Dashboard (Cards)")
        except Exception as ex:
            logging.error(f"Error creating DashboardCardsTab: {ex}")

        # 2) Inline Editing
        try:
            self.inline_edit_tab = InlineEditingTab(self.connection, self.user_id, self.user_group)
            self.tabs.addTab(self.inline_edit_tab, "Inline Editing")
        except Exception as ex:
            logging.error(f"Error creating InlineEditingTab: {ex}")

        # 3) Performance Alerting
        try:
            self.perf_alert_tab = PerformanceAlertingTab(self.connection)
            self.tabs.addTab(self.perf_alert_tab, "Perf Alerting")
        except:
            pass

        # 4) SQL-to-Business Converter
        try:
            self.sql_biz_tab = SqlToBusinessConverterTab(self.connection)
            self.tabs.addTab(self.sql_biz_tab, "SQL → Business Converter")
        except:
            pass

        # 5) Defect Management
        try:
            from brm_defect_management import DefectManagementTab
            self.defect_tab = DefectManagementTab(self.connection)
            self.tabs.addTab(self.defect_tab, "Defects")
        except:
            pass

        # 6) Activity Tracking (broader than old audit logs)
        try:
            from brm_audit_activity_tracking import ActivityTrackingTab
            self.activity_tab = ActivityTrackingTab(self.connection)
            self.tabs.addTab(self.activity_tab, "Activity Log")
        except:
            pass

        # 7) Collaboration
        try:
            from brm_live_collaboration import CollaborationManager, CollaborationTab
            self.collab_manager = CollaborationManager(self.connection, poll_interval_ms=5000)
            self.collab_tab = CollaborationTab(self.connection, self.collab_manager)
            self.tabs.addTab(self.collab_tab, "Collaboration")
        except:
            pass

        # 8) The older PARTS modules (Approvals, GCR Admin, Hierarchy, etc.)
        try:
            from brm_approvals_and_lineage import MultiStepApprovalTab, GlobalCriticalAdminTab, HierarchyViewTab, EnhancedLineageGraphWidget

            self.approvals_tab = MultiStepApprovalTab(self.connection, self.logged_in_username, self.user_group)
            self.tabs.addTab(self.approvals_tab, "Approvals")

            if self.user_group=="Admin":
                self.gcr_admin_tab = GlobalCriticalAdminTab(self, self.connection, self.user_group)
                self.tabs.addTab(self.gcr_admin_tab, "GCR Admin")

            self.hierarchy_tab = HierarchyViewTab(self.connection)
            self.tabs.addTab(self.hierarchy_tab, "Hierarchy")

            # A lineage tab
            lineage_container = QWidget()
            lineage_layout = QVBoxLayout(lineage_container)
            lineage_label = QtWidgets.QLabel("Advanced Lineage Visualization")
            lineage_label.setStyleSheet("font-weight: bold; font-size:14px;")
            lineage_layout.addWidget(lineage_label)
            self.lineage_view = EnhancedLineageGraphWidget(self.connection)
            lineage_layout.addWidget(self.lineage_view)
            lineage_container.setLayout(lineage_layout)
            self.tabs.addTab(lineage_container,"Lineage")

        except:
            pass

        # 9) Scheduling & Simulations
        try:
            from brm_simulation_scheduler import ScheduleManagementTab
            self.sched_tab = ScheduleManagementTab(self.connection)
            self.tabs.addTab(self.sched_tab, "Scheduling")
        except:
            pass

        # 10) Custom Groups & Alerts
        try:
            from brm_custom_rule_groups_and_alerts import CustomRuleGroupEnhancedTab, AlertsAndDashboardsTab
            self.custom_groups_tab = CustomRuleGroupEnhancedTab(self.connection, self.user_id, self.user_group)
            self.tabs.addTab(self.custom_groups_tab, "Custom Groups")

            self.alerts_tab = AlertsAndDashboardsTab(self.connection, self.user_id, self.user_group)
            self.tabs.addTab(self.alerts_tab, "Alerts & Dashboards")
        except:
            pass

        # 11) Control Tables & Metrics
        try:
            from brm_metrics_control_management import MetricsDashboardTab, CtrlTablesTab, GroupManagementTab, UserManagementTab

            self.ctrl_tables_tab = CtrlTablesTab(self.connection, self.user_group)
            self.tabs.addTab(self.ctrl_tables_tab, "Control Tables")

            self.metrics_tab = MetricsDashboardTab(self.connection)
            self.tabs.addTab(self.metrics_tab, "Metrics Dashboard")

            # Group & User mgmt
            self.group_mgmt_tab = GroupManagementTab(self.connection, self.user_id, self.user_group)
            self.tabs.addTab(self.group_mgmt_tab, "Group Management")

            if self.user_group=="Admin":
                self.user_mgmt_tab = UserManagementTab(self.connection)
                self.tabs.addTab(self.user_mgmt_tab, "User Management")
        except:
            pass

        # 12) Possibly a "Rule Dashboard" or “Business Rules” main tab from older code
        #     or we rely on InlineEditing / Approvals / BFS to manage rules.

        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # Timers for auto refresh on approvals, schedules, alerts, etc.
        self.approvals_timer = QTimer(self)
        self.approvals_timer.timeout.connect(self.refresh_approvals)
        self.approvals_timer.start(5000)

        self.schedules_timer = QTimer(self)
        self.schedules_timer.timeout.connect(self.check_due_schedules)
        self.schedules_timer.start(60000)

        self.alerts_timer = QTimer(self)
        self.alerts_timer.timeout.connect(self.refresh_alerts)
        self.alerts_timer.start(120000)

        # If collaboration is set up, it’s already polling internally.

        self.show()

    # ----------------------------------------------------------------
    # Impersonation (Admin only)
    # ----------------------------------------------------------------
    def populate_impersonation_options(self):
        c=self.connection.cursor()
        c.execute("SELECT USER_ID,USERNAME,USER_GROUP FROM USERS ORDER BY USER_ID")
        for row in c.fetchall():
            uid, uname, grp = row
            disp=f"{uname} ({grp})"
            self.impersonate_combo.addItem(disp,(uid,grp))

    def on_switch_user(self):
        data=self.impersonate_combo.currentData()
        if not data:
            return
        new_uid, new_grp = data
        if new_uid==self.user_id and new_grp==self.user_group:
            return
        # forcibly update self
        self.user_id=new_uid
        self.user_group=new_grp
        c=self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?",(self.user_id,))
        r=c.fetchone()
        self.logged_in_username=r[0] if r else "Unknown"
        QMessageBox.information(self,"Switched",f"Now impersonating {self.logged_in_username} ({self.user_group}).")

        # Refresh relevant tabs, e.g. approvals
        try:
            self.approvals_tab.logged_in_username=self.logged_in_username
            self.approvals_tab.user_group=self.user_group
            self.approvals_tab.load_approvals()
        except:
            pass

        # If we have a rule dashboard, inline editor, custom groups, etc., we can refresh or re-init them as well.

    # ----------------------------------------------------------------
    # Timers / auto checks
    # ----------------------------------------------------------------
    def refresh_approvals(self):
        try:
            self.approvals_tab.load_approvals()
        except:
            pass

    def check_due_schedules(self):
        """
        If scheduling logic includes an auto-run approach, do it here or call `check_due_schedules` from scheduling modules.
        """
        try:
            # from brm_simulation_scheduler import check_due_schedules
            # check_due_schedules(self.connection)
            self.sched_tab.load_schedules()
        except:
            pass

    def refresh_alerts(self):
        """
        Alerts tab auto refresh
        """
        try:
            self.alerts_tab.check_alerts()
        except:
            pass

    # ----------------------------------------------------------------
    # Menu Action Handlers
    # ----------------------------------------------------------------
    def sync_metadata(self):
        """
        Possibly call sync_metadata_improved from your scheduling or part3 modules
        """
        try:
            # from brm_simulation_scheduler import sync_metadata_improved
            # sync_metadata_improved(self.connection)
            QMessageBox.information(self,"Sync","Metadata sync complete.")
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def run_all_data_validations(self):
        """
        Example: from brm_rule_engine or a data_validations module
        """
        try:
            # from brm_rule_engine import run_all_data_validations
            # run_all_data_validations(self.connection)
            QMessageBox.information(self,"Data Validations","All validations done.")
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def show_performance_trends_dialog(self):
        """
        Show a pop-up with performance trends (a smaller version of PerformanceAlertingTab).
        """
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QPushButton
        dlg=QDialog(self)
        dlg.setWindowTitle("Performance Trends")
        dlg.resize(800,600)
        lay=QVBoxLayout(dlg)
        try:
            perf_tab=PerformanceAlertingTab(self.connection)
            lay.addWidget(perf_tab)
        except:
            pass
        close_btn=QPushButton("Close")
        close_btn.clicked.connect(dlg.close)
        lay.addWidget(close_btn)
        dlg.exec_()

    def launch_chain_sim(self):
        """
        Example: pop up the chain BFS simulation
        """
        try:
            # from brm_simulation_scheduler import ChainSimulationDialog
            cdlg = ChainSimulationDialog(self.connection,self)
            cdlg.exec_()
        except Exception as ex:
            QMessageBox.critical(self,"Chain Simulation Error",str(ex))

    def launch_group_sim(self):
        """
        Example: pop up the custom group BFS simulation
        """
        try:
            # from brm_simulation_scheduler import GroupSimulationDialog
            gdlg = GroupSimulationDialog(self.connection,self)
            gdlg.exec_()
        except Exception as ex:
            QMessageBox.critical(self,"Group Simulation Error",str(ex))

    def launch_activity_logs(self):
        """
        If we didn't embed ActivityTrackingTab, we can pop it up in a dialog, or switch to the tab if it exists.
        """
        # If you have self.activity_tab, just set self.tabs.setCurrentWidget(self.activity_tab).
        try:
            idx=self.tabs.indexOf(self.activity_tab)
            if idx>=0:
                self.tabs.setCurrentIndex(idx)
        except:
            QMessageBox.information(self,"Logs","Activity log tab not found or error loading.")

    def launch_rule_search(self):
        """
        Possibly pop up a RuleSearchDialog
        """
        try:
            # from brm_rule_search import RuleSearchDialog
            # sdlg = RuleSearchDialog(self.connection, self.user_group, self)
            # sdlg.exec_()
            QMessageBox.information(self,"Search","(Demo) Searching rules not fully implemented.")
        except:
            pass

    def launch_version_history(self):
        """
        Prompt user for a Rule ID, then open VersionHistoryDialog
        """
        rid, ok=QInputDialog.getInt(self,"Version History","Enter Rule ID:")
        if not ok:
            return
        try:
            # from brm_audit_rule_editors import VersionHistoryDialog
            # vh = VersionHistoryDialog(self.connection, rid, self)
            # vh.exec_()
            QMessageBox.information(self,"Version History",f"(Demo) Would show version history for rule {rid}.")
        except:
            pass

    def show_help_usage(self):
        """
        Show some help text or usage instructions.
        """
        msg=(
            "BRM Tool – Advanced aggregator.\n\n"
            "Use the tabs to manage rules, approvals, scheduling, etc.\n"
            "Inline Editing: Double-click cells.\n"
            "Dashboard: high-level metrics.\n"
            "Approvals: multi-step.\n"
            "Use menu items for BFS simulations, validations, version history.\n"
            "Check official docs for deeper usage."
        )
        QMessageBox.information(self,"Help/Usage",msg)

    # ----------------------------------------------------------------
    # Overriding closeEvent
    # ----------------------------------------------------------------
    def closeEvent(self, event):
        """
        Clean up DB connection if desired
        """
        try:
            if self.connection:
                self.connection.close()
        except:
            pass
        event.accept()


# ---------------------------------------------------------------------------
# Example Main
# ---------------------------------------------------------------------------
if __name__ == '__main__':
    app=QApplication(sys.argv)
    tool=BRMToolMain()
    tool.show()
    sys.exit(app.exec_())