#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_tool_main.py (Super-Final Aggregator)
Description:
  Integrates EVERY advanced module into a single QMainWindow, 
  including all UI features from the prior code, arranged systematically.

  After user logs in, the app shows ~20 tabs for:
    - Cards Dashboard
    - Rule Dashboard
    - Approvals
    - GCR Admin (admin only)
    - Hierarchy
    - Advanced Lineage
    - Custom Groups
    - Scheduling
    - Control Tables
    - Metrics
    - Alerts
    - Group Mgmt (admin)
    - User Mgmt (admin)
    - Defects
    - SQL->Business converter
    - Performance Alerts
    - Activity Tracking
    - Collaboration
    - Inline Editing
    - PLUS optional smaller tabs: DecisionTables, ConflictPriority, CompositeRules,
      SnapshotManager, TagsManager, DataValidation, WhatIfTest
"""

import sys
import logging
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QTabWidget,
    QAction, QMenu, QMenuBar, QMessageBox, QDialog, QLineEdit, QLabel, QPushButton
)
from PyQt5.QtCore import QTimer

# Mocks of your modules, to be replaced with real imports:
# from brm_core_foundation import (
#     DatabaseConnectionDialog, LoginDialog, OnboardingWizard,
#     sync_metadata_improved, logger
# )
# from brm_rule_dashboard import RuleDashboard
# from brm_advanced_approvals_and_lineage import (MultiStepApprovalTab, GlobalCriticalAdminTab, HierarchyViewTab)
# from brm_advanced_lineage_visualization import AdvancedLineageGraphWidget
# from brm_custom_rule_groups_and_alerts import (CustomRuleGroupEnhancedTab, AlertsAndDashboardsTab)
# from brm_simulation_scheduler import (ScheduleManagementTab, SingleRuleSimulationDialog, ChainSimulationDialog, GroupSimulationDialog)
# from brm_metrics_and_control_management import (ControlTablesTab, MetricsDashboardTab, GroupManagementTab, UserManagementTab)
# from brm_defect_management import DefectManagementTab
# from brm_sql_to_business_converter import SqlToBusinessConverterTab
# from brm_performance_alerting_and_trends import PerformanceAlertingTab
# from brm_audit_activity_tracking import ActivityTrackingTab, record_activity_event
# from brm_live_collaboration import CollaborationManager, CollaborationTab
# from brm_contextual_inline_editing import InlineEditingTab
# from brm_dashboard_cards import DashboardCardsTab
# from brm_decision_tables import DecisionTablesTab
# from brm_conflict_priority import ConflictPriorityManagerTab
# from brm_composite_rules import CompositeRulesTab
# from brm_snapshots_manager import SnapshotManagerTab
# from brm_tags_manager import TagsManagerTab
# from brm_data_validations import DataValidationTab
# from brm_what_if_tests import WhatIfTestTab

class BRMTool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BRM Tool – All Modules Integrated")
        self.resize(1600, 1000)

        self.connection = None
        self.user_id = None
        self.user_group = None
        self.logged_in_username = None

        # Step A: Database Connection
        from brm_core_foundation import DatabaseConnectionDialog
        dbdlg=DatabaseConnectionDialog()
        if dbdlg.exec_()==QDialog.Accepted:
            conn=dbdlg.get_connection()
            if not conn:
                sys.exit(1)
            self.connection=conn
        else:
            sys.exit(0)

        # Step B: Login
        from brm_core_foundation import LoginDialog
        logdlg=LoginDialog(self.connection)
        if logdlg.exec_()!=QDialog.Accepted:
            sys.exit(0)
        self.user_id=logdlg.user_id
        self.user_group=logdlg.user_group

        # fetch username
        c=self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?",(self.user_id,))
        row=c.fetchone()
        if row:
            self.logged_in_username=row[0]
        else:
            self.logged_in_username="UnknownUser"

        # OnboardingWizard if desired
        # from brm_core_foundation import OnboardingWizard
        # wizard=OnboardingWizard(self.connection)
        # wizard.exec_()

        self.init_ui()

    def init_ui(self):
        menubar=self.menuBar()
        file_menu=menubar.addMenu("File")

        # Sync
        sync_act=QAction("Sync Metadata", self)
        sync_act.triggered.connect(self.sync_metadata)
        file_menu.addAction(sync_act)

        # Data validations
        dv_act=QAction("Run All Data Validations", self)
        dv_act.triggered.connect(self.run_all_data_validations)
        file_menu.addAction(dv_act)

        # Performance Trends
        perf_act=QAction("Performance Trends", self)
        perf_act.triggered.connect(self.show_performance_trends)
        file_menu.addAction(perf_act)

        # BFS chain sim
        chain_act=QAction("Simulate Chain BFS", self)
        chain_act.triggered.connect(self.launch_chain_sim)
        file_menu.addAction(chain_act)

        # BFS group sim
        group_act=QAction("Simulate Group BFS", self)
        group_act.triggered.connect(self.launch_group_sim)
        file_menu.addAction(group_act)

        help_menu=menubar.addMenu("Help")
        help_action=QAction("Help/Usage", self)
        help_action.triggered.connect(self.show_help)
        help_menu.addAction(help_action)

        # Tools
        tools_menu=menubar.addMenu("Tools")
        audit_action=QAction("Audit Logs", self)
        audit_action.triggered.connect(self.launch_audit_logs)
        tools_menu.addAction(audit_action)

        search_action=QAction("Search Rules", self)
        search_action.triggered.connect(self.launch_rule_search)
        tools_menu.addAction(search_action)

        version_action=QAction("Version History", self)
        version_action.triggered.connect(self.launch_version_history)
        tools_menu.addAction(version_action)

        central_widget=QWidget()
        main_layout=QVBoxLayout(central_widget)

        # Admin impersonation row
        if self.user_group=="Admin":
            imp_h=QHBoxLayout()
            self.impersonate_combo=QtWidgets.QComboBox()
            self.impersonate_btn=QPushButton("Switch User")
            self.impersonate_btn.clicked.connect(self.switch_user)
            imp_h.addWidget(QLabel("Impersonate:"))
            imp_h.addWidget(self.impersonate_combo)
            imp_h.addWidget(self.impersonate_btn)
            imp_h.addStretch()
            main_layout.addLayout(imp_h)
            self.populate_impersonation_options()

        self.main_tabs=QTabWidget()
        main_layout.addWidget(self.main_tabs)

        # 1) Dashboard Cards
        from brm_dashboard_cards import DashboardCardsTab
        self.cards_tab=DashboardCardsTab(self.connection)
        self.main_tabs.addTab(self.cards_tab, "Dashboard (Cards)")

        # 2) “Advanced” or “Detailed” Dashboard => optional or replaced by “MetricsDashboardTab”
        # or “PerformanceAlertingTab.” We can skip if redundant.

        # 3) RuleDashboard
        from brm_core_foundation import RuleDashboard  # or from brm_rule_dashboard
        self.rule_dashboard=RuleDashboard(self.connection, self.user_id, self.user_group)
        br_tab=QWidget()
        br_layout=QVBoxLayout(br_tab)
        # top row
        top_h=QHBoxLayout()
        add_btn=QPushButton("Add Rule")
        add_btn.clicked.connect(self.add_rule)
        top_h.addWidget(add_btn)

        upd_btn=QPushButton("Update Rule")
        upd_btn.clicked.connect(self.update_rule)
        top_h.addWidget(upd_btn)

        fact_btn=QPushButton("Force Activate")
        fact_btn.clicked.connect(self.force_activate_rule)
        top_h.addWidget(fact_btn)

        fde_btn=QPushButton("Force Deactivate")
        fde_btn.clicked.connect(self.force_deactivate_rule)
        top_h.addWidget(fde_btn)

        del_btn=QPushButton("Delete Rule")
        del_btn.clicked.connect(self.delete_rule)
        top_h.addWidget(del_btn)

        bfs_btn=QPushButton("Run ETL BFS")
        bfs_btn.clicked.connect(self.run_etl_bfs)
        top_h.addWidget(bfs_btn)

        sim_btn=QPushButton("Simulate Single Rule")
        sim_btn.clicked.connect(self.simulate_single_rule)
        top_h.addWidget(sim_btn)

        top_h.addStretch()
        br_layout.addLayout(top_h)
        br_layout.addWidget(self.rule_dashboard)
        br_tab.setLayout(br_layout)
        self.main_tabs.addTab(br_tab, "Business Rules")

        # 4) MultiStepApprovals
        from brm_advanced_approvals_and_lineage import MultiStepApprovalTab
        self.approvals_tab=MultiStepApprovalTab(self.connection, self.logged_in_username, self.user_group)
        self.main_tabs.addTab(self.approvals_tab, "Approvals")

        # 5) GCR Admin if admin
        if self.user_group=="Admin":
            from brm_advanced_approvals_and_lineage import GlobalCriticalAdminTab
            self.gcr_tab=GlobalCriticalAdminTab(self, self.connection, self.user_group)
            self.main_tabs.addTab(self.gcr_tab,"GCR Admin")

        # 6) Hierarchy
        from brm_advanced_approvals_and_lineage import HierarchyViewTab
        self.hier_tab=HierarchyViewTab(self.connection)
        self.main_tabs.addTab(self.hier_tab,"Hierarchy")

        # 7) AdvancedLineage
        from brm_advanced_lineage_visualization import AdvancedLineageGraphWidget
        lineage_tab=QWidget()
        lineage_layout=QVBoxLayout(lineage_tab)
        lineage_lbl=QLabel("Advanced Flattened Erwin-like Model")
        lineage_lbl.setStyleSheet("font-weight:bold; font-size:14px;")
        lineage_layout.addWidget(lineage_lbl)
        self.lineage_view=AdvancedLineageGraphWidget(self.connection)
        lineage_layout.addWidget(self.lineage_view)

        # search row
        sr_h=QHBoxLayout()
        self.lineage_search_edit=QLineEdit()
        self.lineage_search_edit.setPlaceholderText("Search lineage..")
        sr_h.addWidget(self.lineage_search_edit)
        sbtn=QPushButton("Search")
        sbtn.clicked.connect(self.do_lineage_search)
        sr_h.addWidget(sbtn)
        reset_btn=QPushButton("Reset")
        reset_btn.clicked.connect(self.lineage_view.reset_dim_highlight)
        sr_h.addWidget(reset_btn)
        sr_h.addStretch()
        lineage_layout.addLayout(sr_h)
        lineage_tab.setLayout(lineage_layout)
        self.main_tabs.addTab(lineage_tab,"Lineage")

        # 8) CustomRuleGroupEnhancedTab
        from brm_custom_rule_groups_and_alerts import CustomRuleGroupEnhancedTab
        self.custom_tab=CustomRuleGroupEnhancedTab(self.connection, self.user_id, self.user_group)
        self.main_tabs.addTab(self.custom_tab,"Custom Groups")

        # 9) Scheduling
        from brm_simulation_scheduler import ScheduleManagementTab
        self.sched_tab=ScheduleManagementTab(self.connection)
        self.main_tabs.addTab(self.sched_tab,"Scheduling")

        # 10) Control Tables
        from brm_metrics_and_control_management import ControlTablesTab
        self.ctrl_tab=ControlTablesTab(self.connection, self.user_group)
        self.main_tabs.addTab(self.ctrl_tab,"Control Tables")

        # 11) Metrics
        from brm_metrics_and_control_management import MetricsDashboardTab
        self.metrics_tab=MetricsDashboardTab(self.connection)
        self.main_tabs.addTab(self.metrics_tab,"Metrics")

        # 12) Alerts
        from brm_custom_rule_groups_and_alerts import AlertsAndDashboardsTab
        self.alerts_tab=AlertsAndDashboardsTab(self.connection, self.user_id, self.user_group)
        self.main_tabs.addTab(self.alerts_tab,"Alerts")

        # 13) Group mgmt
        from brm_metrics_and_control_management import GroupManagementTab
        self.grp_mgmt_tab=GroupManagementTab(self.connection, self.user_id, self.user_group)
        self.main_tabs.addTab(self.grp_mgmt_tab,"Group Mgmt")

        # 14) User mgmt if admin
        if self.user_group=="Admin":
            from brm_metrics_and_control_management import UserManagementTab
            self.usr_mgmt_tab=UserManagementTab(self.connection)
            self.main_tabs.addTab(self.usr_mgmt_tab,"User Mgmt")

        # 15) Defect mgmt
        from brm_defect_management import DefectManagementTab
        self.defects_tab=DefectManagementTab(self.connection)
        self.main_tabs.addTab(self.defects_tab,"Defects")

        # 16) SQL -> Business
        from brm_sql_to_business_converter import SqlToBusinessLanguageConverterTab
        self.sql_biz_tab=SqlToBusinessLanguageConverterTab(self.connection)
        self.main_tabs.addTab(self.sql_biz_tab,"SQL->Business")

        # 17) PerformanceAlerting
        from brm_performance_alerting_and_trends import PerformanceAlertingTab
        self.perf_alert_tab=PerformanceAlertingTab(self.connection)
        self.main_tabs.addTab(self.perf_alert_tab,"Perf Alerts")

        # 18) ActivityTracking
        from brm_audit_activity_tracking import ActivityTrackingTab
        self.activity_tab=ActivityTrackingTab(self.connection)
        self.main_tabs.addTab(self.activity_tab,"Activity Logs")

        # 19) Collaboration
        from brm_live_collaboration import CollaborationManager, CollaborationTab
        self.collab_manager=CollaborationManager(self.connection, poll_interval_ms=5000, parent=self)
        self.collab_tab=CollaborationTab(self.connection, self.collab_manager)
        self.main_tabs.addTab(self.collab_tab,"Collaboration")

        # 20) InlineEditing
        from brm_contextual_inline_editing import InlineEditingTab
        self.inline_tab=InlineEditingTab(self.connection, self.user_id, self.user_group)
        self.main_tabs.addTab(self.inline_tab,"Inline Editing")

        # + Optional smaller tabs:
        # DecisionTablesTab, ConflictPriorityManagerTab, CompositeRulesTab,
        # SnapshotManagerTab, TagsManagerTab, DataValidationTab, WhatIfTestTab:
        from brm_decision_tables import DecisionTableManager
        dt_tab=DecisionTableManager(self.connection)
        self.main_tabs.addTab(dt_tab,"Decision Tables")

        from brm_conflict_priority import ConflictPriorityManagerTab
        conf_tab=ConflictPriorityManagerTab(self.connection)
        self.main_tabs.addTab(conf_tab,"Conflicts")

        from brm_composite_rules import CompositeRulesTab
        cpl_tab=CompositeRulesTab(self.connection)
        self.main_tabs.addTab(cpl_tab,"Composite Rules")

        from brm_snapshots_manager import SnapshotManagerTab
        snap_tab=SnapshotManagerTab(self.connection)
        self.main_tabs.addTab(snap_tab,"Snapshots")

        from brm_tags_manager import TagsManagerTab
        tag_tab=TagsManagerTab(self.connection)
        self.main_tabs.addTab(tag_tab,"Tags")

        from brm_data_validations import DataValidationTab
        dv_tab=DataValidationTab(self.connection)
        self.main_tabs.addTab(dv_tab,"Data Validations")

        from brm_what_if_tests import WhatIfTestTab
        wif_tab=WhatIfTestTab(self.connection)
        self.main_tabs.addTab(wif_tab,"What-If Tests")

        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # Timers for re-checking approvals, schedules, alerts
        self.approvals_timer=QTimer(self)
        self.approvals_timer.timeout.connect(self.approvals_tab.load_approvals)
        self.approvals_timer.start(5000)

        self.schedules_timer=QTimer(self)
        self.schedules_timer.timeout.connect(self.check_due_schedules)
        self.schedules_timer.start(60000)

        self.alerts_timer=QTimer(self)
        self.alerts_timer.timeout.connect(self.alerts_tab.check_alerts)
        self.alerts_timer.start(90000)  # 90s

    # -------------
    # MENU Handlers
    # -------------
    def sync_metadata(self):
        from brm_core_foundation import sync_metadata_improved
        try:
            msg=sync_metadata_improved(self.connection)
            QMessageBox.information(self,"Sync Metadata", msg)
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def run_all_data_validations(self):
        # from brm_advanced_simulation or brm_data_validations
        QMessageBox.information(self,"Data Validations","Running all validations (placeholder).")

    def show_performance_trends(self):
        from brm_metrics_and_control_management import MetricsDashboardTab
        dlg=QDialog(self)
        dlg.setWindowTitle("Performance Trends")
        dlg.resize(800,600)
        lay=QVBoxLayout(dlg)
        chart=MetricsDashboardTab(self.connection)
        lay.addWidget(chart)
        cb=QPushButton("Close")
        cb.clicked.connect(dlg.close)
        lay.addWidget(cb)
        dlg.setLayout(lay)
        dlg.exec_()

    def launch_chain_sim(self):
        from brm_simulation_scheduler import ChainSimulationDialog
        dlg=ChainSimulationDialog(self.connection,self)
        dlg.exec_()

    def launch_group_sim(self):
        from brm_simulation_scheduler import GroupSimulationDialog
        dlg=GroupSimulationDialog(self.connection,self)
        dlg.exec_()

    def show_help(self):
        QMessageBox.information(self,"Help","Full usage instructions...")

    def launch_audit_logs(self):
        # from brm_audit_and_rule_editors import AuditLogViewer
        # or from brm_audit_activity_tracking => we have ActivityTrackingTab
        QMessageBox.information(self,"Audit Logs","Open the ActivityTrackingTab or older AuditLogViewer if needed.")

    def launch_rule_search(self):
        # from brm_audit_and_rule_editors import RuleSearchDialog
        QMessageBox.information(self,"Rule Search","Open rule search dialog here (placeholder).")

    def launch_version_history(self):
        # from brm_audit_and_rule_editors import VersionHistoryDialog
        QMessageBox.information(self,"Version History","Prompt for rule ID => show diffs (placeholder).")

    # -------------
    # BFS / Crud
    # -------------
    def add_rule(self):
        # from brm_audit_and_rule_editors import RuleEditorDialog
        QMessageBox.information(self,"Add Rule","Open RuleEditorDialog...")

    def update_rule(self):
        selected=self.rule_dashboard.get_selected_rule_ids()
        if len(selected)!=1:
            QMessageBox.warning(self,"Error","Select exactly 1 rule.")
            return
        rid=selected[0]
        QMessageBox.information(self,"Update Rule",f"Update rule {rid} (placeholder).")

    def force_activate_rule(self):
        if self.user_group!="Admin":
            QMessageBox.warning(self,"Denied","Only Admin can do force activate.")
            return
        selected=self.rule_dashboard.get_selected_rule_ids()
        if not selected:
            return
        QMessageBox.information(self,"Force Activate",f"Activated {selected} (placeholder).")
        self.rule_dashboard.load_rules()

    def force_deactivate_rule(self):
        if self.user_group!="Admin":
            QMessageBox.warning(self,"Denied","Only Admin can do force deactivate.")
            return
        selected=self.rule_dashboard.get_selected_rule_ids()
        if not selected:
            return
        QMessageBox.information(self,"Force Deactivate",f"Deactivated {selected} (placeholder).")
        self.rule_dashboard.load_rules()

    def delete_rule(self):
        selected=self.rule_dashboard.get_selected_rule_ids()
        if not selected:
            return
        QMessageBox.information(self,"Delete",f"Deleting rules {selected} (placeholder).")
        self.rule_dashboard.load_rules()

    def run_etl_bfs(self):
        QMessageBox.information(self,"ETL BFS","Perform BFS run with advanced logic...")

    def simulate_single_rule(self):
        selected=self.rule_dashboard.get_selected_rule_ids()
        if len(selected)!=1:
            QMessageBox.warning(self,"Error","Select exactly 1 rule.")
            return
        rid=selected[0]
        QMessageBox.information(self,"Simulate Single",f"Simulate rule {rid} BFS or single-run...")

    def check_due_schedules(self):
        # from brm_scheduling_and_simulations => checkDueSchedules
        QMessageBox.information(self,"Schedule Check","Check due schedules => run them if needed.")
        self.sched_tab.load_schedules()

    def do_lineage_search(self):
        text=self.lineage_search_edit.text().strip()
        if not text:
            self.lineage_view.reset_dim_highlight()
        else:
            self.lineage_view.search_by_keyword(text)

    # -------------
    # Admin Impersonation
    # -------------
    def populate_impersonation_options(self):
        c=self.connection.cursor()
        c.execute("SELECT USER_ID, USERNAME, USER_GROUP FROM USERS ORDER BY USER_ID")
        for (uid,uname,ugrp) in c.fetchall():
            disp=f"{uname} ({ugrp})"
            self.impersonate_combo.addItem(disp,(uid,ugrp))

    def switch_user(self):
        data=self.impersonate_combo.currentData()
        if not data:
            return
        new_uid, new_grp=data
        if new_uid==self.user_id and new_grp==self.user_group:
            return
        self.user_id=new_uid
        self.user_group=new_grp
        c=self.connection.cursor()
        c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?",(self.user_id,))
        row=c.fetchone()
        if row:
            self.logged_in_username=row[0]
        else:
            self.logged_in_username="UnknownUser"
        QMessageBox.information(self,"Switched",f"Now impersonating {self.logged_in_username} ({self.user_group}).")
        # Refresh some tabs
        self.approvals_tab.logged_in_username=self.logged_in_username
        self.approvals_tab.user_group=self.user_group
        self.approvals_tab.load_approvals()
        self.rule_dashboard.user_id=self.user_id
        self.rule_dashboard.user_group=self.user_group
        self.rule_dashboard.load_rules()
        # etc.

    def closeEvent(self, event):
        try:
            if self.connection:
                self.connection.close()
        except:
            pass
        event.accept()


if __name__=="__main__":
    app=QApplication(sys.argv)
    tool=BRMTool()
    tool.show()
    sys.exit(app.exec_())