import sqlparse
import re

###############################################################################
# 1) DOMAIN MAP
###############################################################################
# Adjust these mappings to translate raw table/column names into business terms.
DOMAIN_MAP = {
    "tables": {
        "financial_risk_table": "the Financial Risk data store",
        "customer_info": "the Customer Information table"
    },
    "columns": {
        "customer_id": "Customer Identifier",
        "exposure_amount": "Exposure Amount (USD)",
        "rating": "Credit Rating",
        "cusip_id": "CUSIP Identifier",
        "customer_name": "Customer Name",
        "total_exposure": "Total Exposure (USD)"
    }
}

def get_domain_table_name(raw: str) -> str:
    """Return a business-friendly name for a table, if available."""
    return DOMAIN_MAP["tables"].get(raw.lower().strip(), raw)

def get_domain_column_name(raw: str) -> str:
    """Return a business-friendly name for a column, if available."""
    return DOMAIN_MAP["columns"].get(raw.lower().strip(), raw)

###############################################################################
# 2) PARSING LOGIC
###############################################################################
def parse_sql_to_dict(sql_query: str) -> dict:
    """
    Parse a SELECT statement into major clauses:
      - SELECT columns
      - FROM
      - JOIN(s)
      - WHERE
      - GROUP BY
      - ORDER BY
      - LIMIT
    Handles subqueries: (SELECT ...).
    Returns a dict describing the query.
    """
    parsed = sqlparse.parse(sql_query)
    if not parsed:
        return {}

    statement = parsed[0]
    tokens = [t for t in statement.tokens if not t.is_whitespace]

    result = {
        "columns": [],
        "from": None,
        "joins": [],
        "where": None,
        "group_by": [],
        "order_by": [],
        "limit": None
    }

    current_clause = None
    buffer = []

    def flush_clause(clause_name, buf):
        if clause_name == "SELECT":
            result["columns"] = parse_select_list(buf)
        elif clause_name == "FROM":
            result["from"] = parse_from_clause(buf)
        elif clause_name == "JOIN":
            jinfo = parse_join_clause(buf)
            if jinfo:
                result["joins"].append(jinfo)
        elif clause_name == "WHERE":
            result["where"] = parse_condition_clause(buf)
        elif clause_name == "GROUP BY":
            result["group_by"] = parse_comma_list(buf)
        elif clause_name == "ORDER BY":
            result["order_by"] = parse_comma_list(buf)
        elif clause_name == "LIMIT":
            result["limit"] = parse_limit_clause(buf)
        buf.clear()

    i = 0
    while i < len(tokens):
        t = tokens[i]
        val_up = t.value.upper()

        if t.ttype == sqlparse.tokens.DML and val_up == "SELECT":
            if current_clause and buffer:
                flush_clause(current_clause, buffer)
            current_clause = "SELECT"
            buffer.clear()

        elif t.is_keyword:
            if val_up == "FROM":
                if current_clause and buffer:
                    flush_clause(current_clause, buffer)
                current_clause = "FROM"
                buffer.clear()

            elif val_up in ("LEFT", "RIGHT", "FULL", "CROSS", "INNER"):
                buffer.append(t)

            elif val_up == "JOIN":
                if current_clause and buffer:
                    flush_clause(current_clause, buffer)
                current_clause = "JOIN"
                buffer.clear()
                buffer.append(t)

            elif val_up == "WHERE":
                if current_clause and buffer:
                    flush_clause(current_clause, buffer)
                current_clause = "WHERE"
                buffer.clear()

            elif val_up == "GROUP":
                # Next might be BY
                if i+1 < len(tokens) and tokens[i+1].value.upper() == "BY":
                    if current_clause and buffer:
                        flush_clause(current_clause, buffer)
                    current_clause = "GROUP BY"
                    i += 1
                    buffer.clear()
                else:
                    buffer.append(t)

            elif val_up == "ORDER":
                # Next might be BY
                if i+1 < len(tokens) and tokens[i+1].value.upper() == "BY":
                    if current_clause and buffer:
                        flush_clause(current_clause, buffer)
                    current_clause = "ORDER BY"
                    i += 1
                    buffer.clear()
                else:
                    buffer.append(t)

            elif val_up == "LIMIT":
                if current_clause and buffer:
                    flush_clause(current_clause, buffer)
                current_clause = "LIMIT"
                buffer.clear()
            else:
                buffer.append(t)
        else:
            buffer.append(t)

        i += 1

    # flush leftover
    if current_clause and buffer:
        flush_clause(current_clause, buffer)

    return result


###############################################################################
# 2B) CLAUSE-LEVEL PARSERS
###############################################################################
def tokens_to_str(token_list) -> str:
    return "".join(t.value for t in token_list).strip()

def parse_select_list(token_list) -> list:
    raw = tokens_to_str(token_list)
    return split_top_level_csv(raw)

def parse_from_clause(token_list) -> str:
    raw = tokens_to_str(token_list)
    return detect_subquery(raw)

def parse_join_clause(token_list) -> dict:
    raw = tokens_to_str(token_list)
    info = {"type": "JOIN", "table": "", "on": ""}
    parts = re.split(r"\bON\b", raw, flags=re.IGNORECASE)
    left_side = parts[0].strip()
    on_side = parts[1].strip() if len(parts) > 1 else ""

    # join type
    m = re.match(r"^\s*((LEFT|RIGHT|FULL|CROSS|INNER)\s*(OUTER)?\s+JOIN)(.*)$", left_side, re.IGNORECASE)
    if m:
        info["type"] = m.group(1).upper()  # e.g. 'LEFT JOIN'
        remainder = m.group(4).strip()
        info["table"] = detect_subquery(remainder)
    else:
        info["table"] = detect_subquery(left_side)

    info["on"] = detect_subqueries_in_condition(on_side)
    return info

def parse_condition_clause(token_list) -> str:
    raw = tokens_to_str(token_list)
    return detect_subqueries_in_condition(raw)

def parse_comma_list(token_list) -> list:
    raw = tokens_to_str(token_list)
    return split_top_level_csv(raw)

def parse_limit_clause(token_list) -> str:
    return tokens_to_str(token_list)

def split_top_level_csv(text: str) -> list:
    """
    Split by commas not inside parentheses.
    """
    items = []
    buf = []
    level = 0
    for ch in text:
        if ch == '(':
            level += 1
            buf.append(ch)
        elif ch == ')':
            level -= 1
            buf.append(ch)
        elif ch == ',' and level == 0:
            items.append("".join(buf).strip())
            buf.clear()
        else:
            buf.append(ch)
    if buf:
        items.append("".join(buf).strip())
    return items


###############################################################################
# 3) SUBQUERY DETECTION & RECURSION
###############################################################################
SUBQ_REGEX = re.compile(r"\(\s*SELECT\s+([\s\S]*?)\)", re.IGNORECASE)

def detect_subquery(raw: str) -> str:
    match = re.search(SUBQ_REGEX, raw)
    if match:
        sub_sql = match.group(1).strip()
        sub_dict = parse_sql_to_dict(sub_sql)
        sub_expl = build_business_explanation(sub_dict)
        # replace the first (SELECT...) with SUBQUERY{explanation}
        replaced = re.sub(SUBQ_REGEX, f"SUBQUERY{{{sub_expl}}}", raw, 1, flags=re.IGNORECASE)
        return replaced
    return raw

def detect_subqueries_in_condition(cond: str) -> str:
    new_text = cond
    while True:
        match = re.search(SUBQ_REGEX, new_text)
        if not match:
            break
        sub_sql = match.group(1).strip()
        sub_dict = parse_sql_to_dict(sub_sql)
        sub_expl = build_business_explanation(sub_dict)
        new_text = re.sub(SUBQ_REGEX, f"SUBQUERY{{{sub_expl}}}", new_text, 1, flags=re.IGNORECASE)
    return new_text

###############################################################################
# 4) BUSINESS ORIENTED EXPLANATION
###############################################################################
def build_business_explanation(qdict: dict) -> str:
    """
    Produces a short, business-friendly explanation in paragraph form.
    Subqueries => SUBQUERY{...}, explained recursively.
    """
    # If the query is empty or minimal
    if not any(qdict.values()):
        return "a minimal or empty query"

    segments = []

    # FROM
    frm = qdict.get("from")
    if frm:
        from_txt = describe_table_or_subquery(frm)
        segments.append(f"This analysis originates from {from_txt}.")

    # Joins
    joins = qdict.get("joins", [])
    for j in joins:
        jtype = j["type"].title()
        jtable = describe_table_or_subquery(j["table"])
        cond = domain_replace(j["on"])
        if cond.strip():
            segments.append(
                f"It merges with {jtable} using a {jtype}, focusing on ({cond})."
            )
        else:
            segments.append(
                f"It merges with {jtable} using a {jtype}."
            )

    # SELECT columns
    columns = qdict.get("columns", [])
    if columns:
        col_texts = [domain_replace(c) for c in columns]
        joined_cols = ", ".join(col_texts)
        segments.append(f"Key measures or fields selected include: {joined_cols}.")

    # WHERE
    wh = qdict.get("where")
    if wh:
        wh_text = domain_replace(wh)
        segments.append(
            f"Only records meeting ({wh_text}) are included."
        )

    # GROUP BY
    gb = qdict.get("group_by", [])
    if gb:
        mapped = [domain_replace(x) for x in gb]
        segments.append(
            f"For aggregation, data is grouped by {', '.join(mapped)}."
        )

    # ORDER BY
    ob = qdict.get("order_by", [])
    if ob:
        mapped = [domain_replace(x) for x in ob]
        segments.append(
            f"The output is then sorted by {', '.join(mapped)}."
        )

    # LIMIT
    limit_val = qdict.get("limit")
    if limit_val:
        segments.append(
            f"Finally, results are limited to {limit_val} row(s)."
        )

    paragraph = " ".join(segments)
    return paragraph

def describe_table_or_subquery(txt: str) -> str:
    """
    If txt=SUBQUERY{...}, embed that explanation. Otherwise, domain-map table name.
    """
    if txt.startswith("SUBQUERY{") and txt.endswith("}"):
        inside = txt[len("SUBQUERY{"):-1].strip()
        return f"a sub-analysis: ({inside})"
    else:
        splitted = txt.split(None, 1)
        table_name = splitted[0]
        remainder = ""
        if len(splitted) > 1:
            remainder = " " + splitted[1]
        domain_tbl = get_domain_table_name(table_name)
        return f"{domain_tbl}{remainder}"

def domain_replace(text: str) -> str:
    """
    Replace recognized table/column names with domain-friendly terms, skipping SUBQUERY placeholders.
    """
    tokens = re.split(r'(\W+)', text)
    out = []
    for t in tokens:
        if t.startswith("SUBQUERY{"):
            out.append(t)
            continue

        if "." in t:
            parts = t.split(".")
            if len(parts) == 2:
                alias, col = parts
                out.append(f"{alias}.{get_domain_column_name(col)}")
            else:
                out.append(t)
        else:
            # single token => possibly table/column
            out.append(get_domain_column_name(get_domain_table_name(t)))
    return "".join(out)

###############################################################################
# 5) MAIN: MULTI-LINE INPUT
###############################################################################
def main():
    print("Multi-line Business SQL Explanation (sqlparse).")
    print("Paste or type your SELECT query over multiple lines.")
    print("Enter a blank line to finish, or 'exit'/'quit' to stop.\n")

    while True:
        lines = []
        while True:
            line = input("... ")
            if not line.strip():
                # blank line => end of query
                break
            if line.lower().strip() in ("exit", "quit"):
                print("Goodbye!")
                return
            lines.append(line)

        # Combine lines into one SQL string
        sql_query = "\n".join(lines).strip()
        if not sql_query:
            # user didn't type anything
            continue

        # Parse & explain
        qdict = parse_sql_to_dict(sql_query)
        explanation = build_business_explanation(qdict)

        print("\n--- Explanation ---")
        print(explanation)
        print("-------------------\n")


if __name__ == "__main__":
    main()