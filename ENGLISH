import sqlparse
import re

###############################################################################
# 1) DOMAIN MAP
###############################################################################
DOMAIN_MAP = {
    "tables": {
        "financial_risk_table": "the Financial Risk data store",
        "customer_info": "the Customer Information table"
    },
    "columns": {
        "customer_id": "Customer Identifier",
        "exposure_amount": "Exposure Amount (USD)",
        "rating": "Credit Rating",
        "cusip_id": "CUSIP Identifier",
        "customer_name": "Customer Name",
        "total_exposure": "Total Exposure (USD)"
    }
}

def get_domain_table_name(raw: str) -> str:
    return DOMAIN_MAP["tables"].get(raw.lower().strip(), raw)

def get_domain_column_name(raw: str) -> str:
    return DOMAIN_MAP["columns"].get(raw.lower().strip(), raw)

###############################################################################
# 2) TOP-LEVEL PARSE LOGIC
###############################################################################
def parse_sql_to_dict(sql_query: str) -> dict:
    """
    Use sqlparse to identify SELECT, FROM, JOIN, WHERE, GROUP BY, ORDER BY, LIMIT.
    Recursively detect subqueries in parentheses (SELECT...).
    Returns a dictionary describing the query structure.
    """
    parsed = sqlparse.parse(sql_query)
    if not parsed:
        return {}

    stmt = parsed[0]
    result = {
        "columns": [],
        "from": None,
        "joins": [],
        "where": None,
        "group_by": [],
        "order_by": [],
        "limit": None
    }

    tokens = [t for t in stmt.tokens if not t.is_whitespace]
    current_clause = None
    buffer = []

    def flush_clause(clause_name, buf):
        from parser_utils import (
            parse_select_list, parse_from_clause,
            parse_join_clause, parse_condition_clause,
            parse_comma_list, parse_limit_clause
        )
        if clause_name == "SELECT":
            result["columns"] = parse_select_list(buf)
        elif clause_name == "FROM":
            result["from"] = parse_from_clause(buf)
        elif clause_name == "JOIN":
            j = parse_join_clause(buf)
            if j:
                result["joins"].append(j)
        elif clause_name == "WHERE":
            result["where"] = parse_condition_clause(buf)
        elif clause_name == "GROUP BY":
            result["group_by"] = parse_comma_list(buf)
        elif clause_name == "ORDER BY":
            result["order_by"] = parse_comma_list(buf)
        elif clause_name == "LIMIT":
            result["limit"] = parse_limit_clause(buf)
        buf.clear()

    # Inline or external parser_utils. We'll inline for brevity below.

    i = 0
    while i < len(tokens):
        t = tokens[i]
        v_up = t.value.upper()
        if t.ttype == sqlparse.tokens.DML and v_up == "SELECT":
            if current_clause and buffer:
                flush_clause(current_clause, buffer)
            current_clause = "SELECT"
            buffer.clear()
        elif t.is_keyword:
            if v_up == "FROM":
                if current_clause and buffer:
                    flush_clause(current_clause, buffer)
                current_clause = "FROM"
                buffer.clear()
            elif v_up in ("LEFT", "RIGHT", "FULL", "CROSS", "INNER"):
                buffer.append(t)
            elif v_up == "JOIN":
                if current_clause and buffer:
                    flush_clause(current_clause, buffer)
                current_clause = "JOIN"
                buffer.clear()
                buffer.append(t)
            elif v_up == "WHERE":
                if current_clause and buffer:
                    flush_clause(current_clause, buffer)
                current_clause = "WHERE"
                buffer.clear()
            elif v_up == "GROUP":
                # next might be BY
                if i+1 < len(tokens) and tokens[i+1].value.upper() == "BY":
                    if current_clause and buffer:
                        flush_clause(current_clause, buffer)
                    current_clause = "GROUP BY"
                    i += 1
                    buffer.clear()
                else:
                    buffer.append(t)
            elif v_up == "ORDER":
                if i+1 < len(tokens) and tokens[i+1].value.upper() == "BY":
                    if current_clause and buffer:
                        flush_clause(current_clause, buffer)
                    current_clause = "ORDER BY"
                    i += 1
                    buffer.clear()
                else:
                    buffer.append(t)
            elif v_up == "LIMIT":
                if current_clause and buffer:
                    flush_clause(current_clause, buffer)
                current_clause = "LIMIT"
                buffer.clear()
            else:
                buffer.append(t)
        else:
            buffer.append(t)
        i += 1

    if current_clause and buffer:
        flush_clause(current_clause, buffer)

    return result

###############################################################################
# 2B) HELPER PARSERS (Inline 'parser_utils')
###############################################################################
def tokens_to_str(token_list) -> str:
    return "".join(t.value for t in token_list)

def parse_select_list(token_list) -> list:
    raw = tokens_to_str(token_list)
    return split_top_level_csv(raw)

def parse_from_clause(token_list) -> str:
    raw = tokens_to_str(token_list)
    return detect_subquery(raw)

def parse_join_clause(token_list) -> dict:
    raw = tokens_to_str(token_list)
    info = {"type": "JOIN", "table": "", "on": ""}
    # separate "ON"
    parts = re.split(r"\bON\b", raw, flags=re.IGNORECASE)
    left_side = parts[0].strip()
    on_side = parts[1].strip() if len(parts) > 1 else ""

    # find join type
    m = re.match(r"^\s*((LEFT|RIGHT|FULL|CROSS|INNER)\s*(OUTER)?\s+JOIN)(.*)$", left_side, re.IGNORECASE)
    if m:
        info["type"] = m.group(1).upper()
        remainder = m.group(4).strip()
        info["table"] = detect_subquery(remainder)
    else:
        info["table"] = detect_subquery(left_side)

    info["on"] = detect_subqueries_in_condition(on_side)
    return info

def parse_condition_clause(token_list) -> str:
    raw = tokens_to_str(token_list)
    return detect_subqueries_in_condition(raw)

def parse_comma_list(token_list) -> list:
    raw = tokens_to_str(token_list)
    return split_top_level_csv(raw)

def parse_limit_clause(token_list) -> str:
    return tokens_to_str(token_list).strip()

def split_top_level_csv(text: str) -> list:
    items = []
    buf = []
    level = 0
    for ch in text:
        if ch == '(':
            level += 1
            buf.append(ch)
        elif ch == ')':
            level -= 1
            buf.append(ch)
        elif ch == ',' and level == 0:
            items.append("".join(buf).strip())
            buf.clear()
        else:
            buf.append(ch)
    if buf:
        items.append("".join(buf).strip())
    return items

###############################################################################
# 3) Subquery Detection & Recursion
###############################################################################
SUBQ_REGEX = re.compile(r"\(\s*SELECT\s+([\s\S]*?)\)", re.IGNORECASE)

def detect_subquery(raw: str) -> str:
    match = re.search(SUBQ_REGEX, raw)
    if match:
        sub_sql = match.group(1).strip()
        sub_dict = parse_sql_to_dict(sub_sql)
        sub_expl = build_business_explanation(sub_dict)
        replaced = re.sub(SUBQ_REGEX, f"SUBQUERY{{{sub_expl}}}", raw, 1, flags=re.IGNORECASE)
        return replaced
    return raw

def detect_subqueries_in_condition(cond: str) -> str:
    new_text = cond
    while True:
        match = re.search(SUBQ_REGEX, new_text)
        if not match:
            break
        sub_sql = match.group(1).strip()
        sub_dict = parse_sql_to_dict(sub_sql)
        sub_expl = build_business_explanation(sub_dict)
        new_text = re.sub(SUBQ_REGEX, f"SUBQUERY{{{sub_expl}}}", new_text, 1, flags=re.IGNORECASE)
    return new_text

###############################################################################
# 4) BUILD BUSINESS-ORIENTED EXPLANATION
###############################################################################
def build_business_explanation(qdict: dict) -> str:
    """
    Returns a short paragraph describing the query from a business/analyst perspective.
    Subqueries appear as SUBQUERY{...} placeholders, which are themselves explained recursively.
    """
    segments = []

    # FROM:
    from_val = qdict.get("from")
    if from_val:
        from_str = describe_table_or_subquery(from_val)
        segments.append(f"This analysis starts with data from {from_str}.")

    # JOINS:
    joins = qdict.get("joins", [])
    for j in joins:
        jtype = j["type"].title()  # e.g. "Left Join"
        tbl = describe_table_or_subquery(j["table"])
        on_cond = domain_replace(j["on"])
        if on_cond:
            segments.append(
                f"It then merges with {tbl} using a {jtype}, focusing on records where ({on_cond})."
            )
        else:
            segments.append(
                f"It then merges with {tbl} using a {jtype}."
            )

    # SELECT columns
    cols = qdict.get("columns", [])
    if cols:
        replaced_cols = [domain_replace(c) for c in cols]
        col_str = ", ".join(replaced_cols)
        segments.append(
            f"Key fields or metrics gathered include: {col_str}."
        )

    # WHERE
    wh = qdict.get("where")
    if wh:
        wh_str = domain_replace(wh)
        segments.append(
            f"We only consider rows meeting the business condition: ({wh_str})."
        )

    # GROUP BY
    gb = qdict.get("group_by", [])
    if gb:
        gb_mapped = [domain_replace(g) for g in gb]
        segments.append(
            f"To consolidate results, the data is grouped by: {', '.join(gb_mapped)}."
        )

    # ORDER BY
    ob = qdict.get("order_by", [])
    if ob:
        ob_mapped = [domain_replace(o) for o in ob]
        segments.append(
            f"For prioritization, the output is sorted by: {', '.join(ob_mapped)}."
        )

    # LIMIT
    lim = qdict.get("limit")
    if lim:
        segments.append(
            f"Finally, we limit the result set to the top {lim} records."
        )

    if not any(qdict.values()):
        return "an empty or minimal query"

    paragraph = " ".join(segments)
    return paragraph

def describe_table_or_subquery(txt: str) -> str:
    """
    If it's SUBQUERY{...}, return that explanation as 'a sub-analysis' or similar phrase.
    Otherwise, map the table name via domain map.
    """
    if txt.startswith("SUBQUERY{") and txt.endswith("}"):
        inside = txt[len("SUBQUERY{"):-1].strip()
        return f"an internal sub-analysis: ({inside})"
    else:
        splitted = txt.split(None, 1)
        tbl = splitted[0]
        remainder = ""
        if len(splitted) > 1:
            remainder = " " + splitted[1]
        domain_table = get_domain_table_name(tbl)
        return f"{domain_table}{remainder}"

def domain_replace(raw: str) -> str:
    """
    Naive token-based domain mapping for columns/tables in a string,
    skipping SUBQUERY placeholders.
    """
    tokens = re.split(r'(\W+)', raw)
    out = []
    for t in tokens:
        if t.startswith("SUBQUERY{"):
            out.append(t)
            continue

        if "." in t:
            parts = t.split(".")
            if len(parts) == 2:
                alias, col = parts
                out.append(f"{alias}.{get_domain_column_name(col)}")
            else:
                out.append(t)
        else:
            # single token => check table/column
            replaced = get_domain_column_name(get_domain_table_name(t))
            out.append(replaced)
    return "".join(out)

###############################################################################
# 5) MAIN: Standalone Console
###############################################################################
def main():
    print("SQL-to-English (Business-Oriented) with sqlparse + subqueries\n")
    while True:
        user_sql = input("Enter SQL (or 'exit'): ").strip()
        if user_sql.lower() in ("exit", "quit"):
            print("Goodbye.")
            break
        if not user_sql:
            continue

        query_dict = parse_sql_to_dict(user_sql)
        explanation = build_business_explanation(query_dict)
        print("\n--- Explanation ---")
        print(explanation)
        print("-------------------\n")

if __name__ == "__main__":
    main()
