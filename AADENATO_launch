#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Example: A more complete MainWindow with user-group-based tab visibility
and integrated refresh logic, onboarding wizard, impersonation, and collaboration.
"""

import sys
import pyodbc
from PyQt5.QtWidgets import (
    QMainWindow, QTabWidget, QWidget, QMenuBar, QAction, QToolBar,
    QStatusBar, QVBoxLayout, QHBoxLayout, QMessageBox, QApplication,
    QLabel, QPushButton, QComboBox, QTimer, QDockWidget, QLineEdit
)
from PyQt5.QtCore import Qt

# -----------------------------
# Example imports from your code:
# (Replace these with the actual imports from your codebase)
# from brm_tabs import BusinessRulesTab, AdminTab, ApprovalsTab, CollaborationTab, ...
from PyQt5.QtWidgets import QDialog

# If you have these:
# from brm_onboarding import OnboardingWizard
# from brm_collaboration import CollaborationManager
# from brm_data_validation import DataValidationTab
# from brm_decision_tables import DecisionTablesTab
# from brm_conflict_priority import ConflictPriorityManagerTab
# from brm_scheduling import ScheduleManagementTab
# from brm_snapshots import SnapshotManagerTab
# from brm_metrics import MetricsDashboardTab

# Example placeholders:
class OnboardingWizard(QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Onboarding Wizard")
        # Minimal example ...
        # Adjust or use your real OnboardingWizard code
        self.resize(400, 200)

class BusinessRulesTab(QWidget):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)

class AdminTab(QWidget):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)

class ApprovalsTab(QWidget):
    def __init__(self, connection, username, user_group, parent=None):
        super().__init__(parent)

class CollaborationTab(QWidget):
    def __init__(self, connection, collaboration_manager, parent=None):
        super().__init__(parent)

class DataValidationTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)

class DecisionTablesTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)

class ConflictPriorityManagerTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)

class ScheduleManagementTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)

class SnapshotManagerTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)

class MetricsDashboardTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)

class CollaborationManager:
    def __init__(self, connection, poll_ms=5000):
        self.connection = connection
        self.poll_ms = poll_ms
        # Example placeholders, assume you have signals or timers, etc.


def fetch_username_by_id(connection, user_id):
    c = connection.cursor()
    c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (user_id,))
    row = c.fetchone()
    return row[0] if row else f"UnknownUser{user_id}"

def is_user_new(connection, user_id):
    # Placeholder check: e.g. if this user was created < 1 day ago, or
    # if you have a "FIRST_LOGIN" flag in the USERS table, etc.
    return False  # Adjust to your real logic


class MainWindow(QMainWindow):
    """
    A more complete MainWindow that:
      - Adds multiple tabs (Admin, BizRules, Approvals, etc.)
      - Hides Admin tab if user_group != 'Admin'
      - Has an optional impersonation combo for Admin users
      - Provides a refresh timer that calls refresh_all_tabs
      - Optionally runs OnboardingWizard if user is new
      - Integrates a Collaboration Manager (if you use it)
    """
    def __init__(self, connection, user_id, user_group):
        super().__init__()
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group
        self.username = fetch_username_by_id(connection, user_id)

        # Possibly check if user is new, to run the OnboardingWizard
        if is_user_new(self.connection, self.user_id):
            wiz = OnboardingWizard(self.connection, self)
            wiz.exec_()

        self.setWindowTitle("BRM Master – Full MainWindow")
        self.resize(1600, 900)

        # 1) Menubar
        self.menu_bar = self.menuBar()
        self.setup_menus()

        # 2) Toolbar
        self.tool_bar = self.addToolBar("Main Toolbar")
        self.setup_toolbar()

        # 3) Status Bar
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.update_status(f"Connected as {self.username} (Group={self.user_group})")

        # 4) Collaboration Manager (if you want real-time chat/poll)
        self.collab_manager = CollaborationManager(self.connection, poll_ms=5000)
        # Could connect signals if your CollaborationTab listens to them, etc.

        # 5) Build main tabs container
        central_widget = QWidget()
        central_layout = QVBoxLayout(central_widget)

        self.main_tabs = QTabWidget()
        central_layout.addWidget(self.main_tabs)

        # -- Add your various tabs:

        # (A) Business Rules Tab
        self.biz_rules_tab = BusinessRulesTab(self.connection, self.user_id, self.user_group)
        self.main_tabs.addTab(self.biz_rules_tab, "Business Rules")

        # (B) Approvals Tab
        self.approvals_tab = ApprovalsTab(self.connection, self.username, self.user_group)
        self.main_tabs.addTab(self.approvals_tab, "Approvals")

        # (C) Collaboration Tab
        self.collab_tab = CollaborationTab(self.connection, self.collab_manager)
        self.main_tabs.addTab(self.collab_tab, "Collaboration")

        # (D) Scheduling
        self.schedule_tab = ScheduleManagementTab(self.connection)
        self.main_tabs.addTab(self.schedule_tab, "Scheduling")

        # (E) Data Validation
        self.dv_tab = DataValidationTab(self.connection)
        self.main_tabs.addTab(self.dv_tab, "Data Validation")

        # (F) Decision Tables
        self.dt_tab = DecisionTablesTab(self.connection)
        self.main_tabs.addTab(self.dt_tab, "Decision Tables")

        # (G) Conflict Priority Manager
        self.cp_tab = ConflictPriorityManagerTab(self.connection)
        self.main_tabs.addTab(self.cp_tab, "Conflict Priority")

        # (H) Snapshot Manager
        self.snap_tab = SnapshotManagerTab(self.connection)
        self.main_tabs.addTab(self.snap_tab, "Snapshots")

        # (I) Metrics Dashboard
        self.metrics_tab = MetricsDashboardTab(self.connection)
        self.main_tabs.addTab(self.metrics_tab, "Metrics")

        # (J) Admin Tab
        self.admin_tab = AdminTab(self.connection, self.user_id, self.user_group)
        self.admin_tab_index = self.main_tabs.addTab(self.admin_tab, "Admin")

        # Hide Admin tab if user_group != 'Admin'
        if self.user_group.lower() != "admin":
            self.main_tabs.setTabVisible(self.admin_tab_index, False)

        central_widget.setLayout(central_layout)
        self.setCentralWidget(central_widget)

        # 6) Optionally add a Dock for notifications, e.g. real-time alerts
        # Or a “Task/Notification Center”
        # self.notifications_dock = QDockWidget("Notifications", self)
        # self.notifications_widget = SomeAlertsWidget(self.connection)
        # self.notifications_dock.setWidget(self.notifications_widget)
        # self.addDockWidget(Qt.RightDockWidgetArea, self.notifications_dock)

        # 7) If you want an auto-refresh every 30s
        self.refresh_timer = QTimer(self)
        self.refresh_timer.timeout.connect(self.refresh_all_tabs)
        self.refresh_timer.start(30000)

    def setup_menus(self):
        """
        Example: File, Help menus
        """
        file_menu = self.menu_bar.addMenu("File")
        logout_act = QAction("Log Out", self)
        logout_act.triggered.connect(self.logout)
        file_menu.addAction(logout_act)

        exit_act = QAction("Exit", self)
        exit_act.triggered.connect(self.close)
        file_menu.addAction(exit_act)

        help_menu = self.menu_bar.addMenu("Help")
        doc_act = QAction("Documentation", self)
        doc_act.triggered.connect(self.show_docs)
        help_menu.addAction(doc_act)

    def setup_toolbar(self):
        """
        Example: Refresh & Impersonation (for Admin)
        """
        # Refresh button
        refresh_act = QAction("Refresh", self)
        refresh_act.triggered.connect(self.refresh_all_tabs)
        self.tool_bar.addAction(refresh_act)

        # If user is Admin, show an impersonation combo
        if self.user_group.lower() == "admin":
            self.tool_bar.addSeparator()
            self.imp_label = QLabel("Impersonate:")
            self.tool_bar.addWidget(self.imp_label)

            self.imp_combo = QComboBox()
            self.tool_bar.addWidget(self.imp_combo)
            self.populate_impersonation_combo()
            self.imp_combo.currentIndexChanged.connect(self.handle_impersonation_change)

    def populate_impersonation_combo(self):
        """
        Example: query all users, fill combo with (user_id, user_group)
        """
        c = self.connection.cursor()
        try:
            c.execute("SELECT USER_ID, USERNAME, USER_GROUP FROM USERS ORDER BY USER_ID")
            for row in c.fetchall():
                uid, uname, ugrp = row
                disp = f"{uname}({ugrp}) [ID={uid}]"
                self.imp_combo.addItem(disp, (uid, ugrp))
        except Exception as ex:
            print(f"Error populating impersonation combo: {ex}")

    def handle_impersonation_change(self):
        """
        Called when admin picks a different user from the combo.
        """
        data = self.imp_combo.currentData()
        if not data:
            return
        new_uid, new_ugrp = data
        # If same as current user, do nothing
        if new_uid == self.user_id and new_ugrp == self.user_group:
            return

        # Switch user
        self.user_id = new_uid
        self.user_group = new_ugrp
        self.username = fetch_username_by_id(self.connection, new_uid)
        self.update_status(f"Impersonating {self.username} (Group={self.user_group})")

        # Show/hide Admin tab
        if self.user_group.lower() == "admin":
            self.main_tabs.setTabVisible(self.admin_tab_index, True)
        else:
            self.main_tabs.setTabVisible(self.admin_tab_index, False)

        # Possibly refresh data in each tab so they load as the new user
        self.refresh_all_tabs()

    def logout(self):
        """
        Example placeholder for logout.
        You could close this window, return to login dialog, etc.
        """
        self.close()

    def show_docs(self):
        QMessageBox.information(self, "Docs", "Show user guide or open a 'Help' tab...")

    def refresh_all_tabs(self):
        """
        Called every 30s or when user hits refresh.
        Have each tab re-load data as needed.
        """
        self.update_status("Refreshing all tabs ...")
        # For example, if your BizRulesTab has a .load_rules() method:
        # self.biz_rules_tab.load_rules()
        # self.approvals_tab.load_approvals()
        # self.collab_tab.load_messages()
        # ...
        self.update_status("Refreshed.")

    def update_status(self, msg, timeout=3000):
        self.status_bar.showMessage(msg, timeout)


# Standalone test entry point, if you want to run just this script:
if __name__ == "__main__":
    app = QApplication(sys.argv)

    # Example: open DB connection
    # Replace with your actual DSN or connection string
    try:
        conn = pyodbc.connect("DSN=YourDSN;UID=xxx;PWD=xxx")
    except:
        print("Failed to connect to DB.")
        sys.exit(1)

    # Example: Hard-coded user_id=1, user_group="Admin"
    main_win = MainWindow(conn, user_id=1, user_group="Admin")
    main_win.show()

    sys.exit(app.exec_())