#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
ConflictPriorityTab, SchedulingTab, GroupPermissionsTab, and BRDetailsWidget
Advanced implementations for the BRM Tool.
Assumes that helper functions (e.g. insert_audit_log, run_data_validations, etc.) and
other necessary components (e.g., database connection) are defined elsewhere.
"""

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem, QPushButton,
    QMessageBox, QInputDialog, QComboBox, QTreeWidget, QTreeWidgetItem, QListWidget
)


# ---------------------- ConflictPriorityTab ----------------------
class ConflictPriorityTab(QWidget):
    """
    Manages rule conflicts: allows adding conflicts between two rules,
    setting a priority value, and deleting conflicts.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        layout = QVBoxLayout(self)
        self.cf_table = QTableWidget(0, 4)
        self.cf_table.setHorizontalHeaderLabels(["ConflictID", "Rule1", "Rule2", "Priority"])
        self.cf_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.cf_table)
        
        btn_layout = QHBoxLayout()
        add_btn = QPushButton("Add Conflict")
        add_btn.clicked.connect(self.add_conflict)
        btn_layout.addWidget(add_btn)
        set_btn = QPushButton("Set Priority")
        set_btn.clicked.connect(self.set_priority)
        btn_layout.addWidget(set_btn)
        del_btn = QPushButton("Delete Conflict")
        del_btn.clicked.connect(self.delete_conflict)
        btn_layout.addWidget(del_btn)
        refresh_btn = QPushButton("Refresh")
        refresh_btn.clicked.connect(self.load_conflicts)
        btn_layout.addWidget(refresh_btn)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        
        self.setLayout(layout)
        self.load_conflicts()

    def load_conflicts(self):
        """Loads conflict records from the database."""
        self.cf_table.setRowCount(0)
        c = self.connection.cursor()
        try:
            c.execute("SELECT CONFLICT_ID, RULE_ID1, RULE_ID2, PRIORITY FROM RULE_CONFLICTS ORDER BY CONFLICT_ID")
            rows = c.fetchall()
            for row in rows:
                row_index = self.cf_table.rowCount()
                self.cf_table.insertRow(row_index)
                for col, val in enumerate(row):
                    self.cf_table.setItem(row_index, col, QTableWidgetItem(str(val) if val is not None else ""))
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error loading conflicts: {ex}")

    def add_conflict(self):
        """Prompts the user to add a new conflict between two rules."""
        r1, ok1 = QInputDialog.getInt(self, "Add Conflict", "Enter RuleID1:")
        if not ok1:
            return
        r2, ok2 = QInputDialog.getInt(self, "Add Conflict", "Enter RuleID2:")
        if not ok2:
            return
        priority, ok3 = QInputDialog.getInt(self, "Set Priority", "Enter priority:", value=1)
        if not ok3:
            return
        c = self.connection.cursor()
        try:
            c.execute("INSERT INTO RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY) VALUES (?,?,?)", (r1, r2, priority))
            self.connection.commit()
            QMessageBox.information(self, "Added", "Conflict added successfully.")
            self.load_conflicts()
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error adding conflict: {ex}")

    def set_priority(self):
        """Allows the user to update the priority for a selected conflict."""
        row = self.cf_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "No Selection", "Select a conflict to set priority.")
            return
        cf_id = int(self.cf_table.item(row, 0).text())
        new_priority, ok = QInputDialog.getInt(self, "Set Priority", f"Enter new priority for conflict {cf_id}:", value=1)
        if not ok:
            return
        c = self.connection.cursor()
        try:
            c.execute("UPDATE RULE_CONFLICTS SET PRIORITY=? WHERE CONFLICT_ID=?", (new_priority, cf_id))
            self.connection.commit()
            QMessageBox.information(self, "Updated", "Conflict priority updated.")
            self.load_conflicts()
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error setting priority: {ex}")

    def delete_conflict(self):
        """Deletes the selected conflict."""
        row = self.cf_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "No Selection", "Select a conflict to delete.")
            return
        cf_id = int(self.cf_table.item(row, 0).text())
        confirm = QMessageBox.question(self, "Confirm Delete", f"Delete conflict {cf_id}?", QMessageBox.Yes | QMessageBox.No)
        if confirm != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM RULE_CONFLICTS WHERE CONFLICT_ID=?", (cf_id,))
            self.connection.commit()
            QMessageBox.information(self, "Deleted", "Conflict deleted successfully.")
            self.load_conflicts()
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error deleting conflict: {ex}")


# ---------------------- SchedulingTab ----------------------
class SchedulingTab(QWidget):
    """
    Manages scheduling of rules. Provides functionality to add, update, delete,
    and refresh schedule entries.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        layout = QVBoxLayout(self)
        
        top_layout = QHBoxLayout()
        add_btn = QPushButton("Add Schedule")
        add_btn.clicked.connect(self.add_schedule)
        top_layout.addWidget(add_btn)
        update_btn = QPushButton("Update Schedule")
        update_btn.clicked.connect(self.update_schedule)
        top_layout.addWidget(update_btn)
        delete_btn = QPushButton("Delete Schedule")
        delete_btn.clicked.connect(self.delete_schedule)
        top_layout.addWidget(delete_btn)
        refresh_btn = QPushButton("Refresh")
        refresh_btn.clicked.connect(self.load_schedules)
        top_layout.addWidget(refresh_btn)
        top_layout.addStretch()
        layout.addLayout(top_layout)
        
        self.schedule_table = QTableWidget(0, 5)
        self.schedule_table.setHorizontalHeaderLabels(["ScheduleID", "RuleID", "ScheduleTime", "Status", "RunValidations"])
        self.schedule_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.schedule_table)
        
        self.setLayout(layout)
        self.load_schedules()

    def load_schedules(self):
        """Loads schedule entries from the database."""
        self.schedule_table.setRowCount(0)
        c = self.connection.cursor()
        try:
            c.execute("SELECT SCHEDULE_ID, RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS FROM RULE_SCHEDULES ORDER BY SCHEDULE_TIME DESC")
            rows = c.fetchall()
            for i, row in enumerate(rows):
                self.schedule_table.insertRow(i)
                for j in range(5):
                    self.schedule_table.setItem(i, j, QTableWidgetItem(str(row[j])))
        except Exception as e:
            QMessageBox.critical(self, "Load Schedules Error", str(e))

    def add_schedule(self):
        """Invokes an EnhancedScheduleDialog (assumed defined elsewhere) to add a schedule."""
        try:
            from EnhancedScheduleDialog import EnhancedScheduleDialog
        except ImportError:
            QMessageBox.critical(self, "Error", "EnhancedScheduleDialog module not found.")
            return
        dlg = EnhancedScheduleDialog(self.connection)
        if dlg.exec_() == QDialog.Accepted:
            self.load_schedules()

    def update_schedule(self):
        """Updates the schedule time for the selected schedule."""
        selected = self.schedule_table.selectedItems()
        if not selected:
            QMessageBox.warning(self, "No Selection", "Select a schedule to update.")
            return
        sched_id = int(selected[0].text())
        new_time, ok = QInputDialog.getText(self, "Update Schedule", "Enter new schedule time (YYYY-MM-DD HH:MM:SS):")
        if not ok or not new_time.strip():
            return
        c = self.connection.cursor()
        try:
            c.execute("UPDATE RULE_SCHEDULES SET SCHEDULE_TIME=? WHERE SCHEDULE_ID=?", (new_time.strip(), sched_id))
            self.connection.commit()
            QMessageBox.information(self, "Updated", f"Schedule {sched_id} updated.")
            self.load_schedules()
        except Exception as e:
            QMessageBox.critical(self, "Update Schedule Error", str(e))

    def delete_schedule(self):
        """Deletes the selected schedule."""
        selected = self.schedule_table.selectedItems()
        if not selected:
            QMessageBox.warning(self, "No Selection", "Select a schedule to delete.")
            return
        sched_id = int(selected[0].text())
        confirm = QMessageBox.question(self, "Confirm Delete", f"Delete schedule {sched_id}?", QMessageBox.Yes | QMessageBox.No)
        if confirm != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM RULE_SCHEDULES WHERE SCHEDULE_ID=?", (sched_id,))
            self.connection.commit()
            QMessageBox.information(self, "Deleted", f"Schedule {sched_id} deleted.")
            self.load_schedules()
        except Exception as e:
            QMessageBox.critical(self, "Delete Schedule Error", str(e))


# ---------------------- GroupPermissionsTab ----------------------
class GroupPermissionsTab(QWidget):
    """
    Allows admin to manage group permissions.
    Enables adding a new permission, deleting a permission, and refreshing the permissions list.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        layout = QVBoxLayout(self)
        
        top_layout = QHBoxLayout()
        add_btn = QPushButton("Add Permission")
        add_btn.clicked.connect(self.add_permission)
        top_layout.addWidget(add_btn)
        delete_btn = QPushButton("Delete Permission")
        delete_btn.clicked.connect(self.delete_permission)
        top_layout.addWidget(delete_btn)
        refresh_btn = QPushButton("Refresh")
        refresh_btn.clicked.connect(self.load_permissions)
        top_layout.addWidget(refresh_btn)
        top_layout.addStretch()
        layout.addLayout(top_layout)
        
        self.perm_table = QTableWidget(0, 3)
        self.perm_table.setHorizontalHeaderLabels(["PermissionID", "GroupName", "TargetTable"])
        self.perm_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.perm_table)
        
        self.setLayout(layout)
        self.load_permissions()

    def load_permissions(self):
        """Loads permission records from the database."""
        self.perm_table.setRowCount(0)
        c = self.connection.cursor()
        try:
            c.execute("SELECT PERMISSION_ID, GROUP_NAME, TARGET_TABLE FROM GROUP_PERMISSIONS ORDER BY PERMISSION_ID")
            rows = c.fetchall()
            for i, row in enumerate(rows):
                self.perm_table.insertRow(i)
                for j, val in enumerate(row):
                    self.perm_table.setItem(i, j, QTableWidgetItem(str(val) if val is not None else ""))
        except Exception as e:
            QMessageBox.critical(self, "Load Permissions Error", str(e))

    def add_permission(self):
        """Prompts the admin to add a new group permission."""
        group_name, ok = QInputDialog.getText(self, "Add Permission", "Enter group name:")
        if not ok or not group_name.strip():
            return
        target_table, ok = QInputDialog.getText(self, "Add Permission", "Enter target table:")
        if not ok or not target_table.strip():
            return
        c = self.connection.cursor()
        try:
            c.execute("INSERT INTO GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE) VALUES (?, ?)",
                      (group_name.strip(), target_table.strip()))
            self.connection.commit()
            insert_audit_log(self.connection, "INSERT", "GROUP_PERMISSIONS", None, "Admin", None,
                             {"group": group_name, "table": target_table})
            self.load_permissions()
        except Exception as e:
            QMessageBox.critical(self, "Add Permission Error", str(e))

    def delete_permission(self):
        """Deletes the selected group permission."""
        selected = self.perm_table.selectedItems()
        if not selected:
            QMessageBox.warning(self, "No Selection", "Select a permission to delete.")
            return
        row = selected[0].row()
        perm_id = int(self.perm_table.item(row, 0).text())
        confirm = QMessageBox.question(self, "Confirm Delete", f"Delete permission {perm_id}?")
        if confirm != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM GROUP_PERMISSIONS WHERE PERMISSION_ID=?", (perm_id,))
            self.connection.commit()
            insert_audit_log(self.connection, "DELETE", "GROUP_PERMISSIONS", perm_id, "Admin")
            self.load_permissions()
        except Exception as e:
            QMessageBox.critical(self, "Delete Permission Error", str(e))


# ---------------------- BRDetailsWidget ----------------------
class BRDetailsWidget(QWidget):
    """
    Aggregates sub-tabs that display additional business rule details.
    Contains tabs for:
      - Custom Groups
      - What-If Test
      - Conflict Priority
      - Scheduling
      - Composite Rules
      - Hierarchy
    """
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group
        layout = QVBoxLayout(self)
        self.sub_tabs = QtWidgets.QTabWidget()
        
        self.custom_groups_tab = CustomRuleGroupEnhancedTab(self.connection, self.user_id, self.user_group)
        self.sub_tabs.addTab(self.custom_groups_tab, "Custom Groups")
        
        self.whatif_tab = WhatIfTestTab(self.connection)
        self.sub_tabs.addTab(self.whatif_tab, "What-If Test")
        
        self.conflict_tab = ConflictPriorityTab(self.connection)
        self.sub_tabs.addTab(self.conflict_tab, "Conflict Priority")
        
        self.scheduling_tab = SchedulingTab(self.connection)
        self.sub_tabs.addTab(self.scheduling_tab, "Scheduling")
        
        self.composite_tab = CompositeRulesTab(self.connection)
        self.sub_tabs.addTab(self.composite_tab, "Composite Rules")
        
        self.hierarchy_tab = HierarchyViewTab(self.connection)
        self.sub_tabs.addTab(self.hierarchy_tab, "Hierarchy")
        
        layout.addWidget(self.sub_tabs)
        self.setLayout(layout)