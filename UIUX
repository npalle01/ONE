from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QTabWidget, QStatusBar, QDockWidget, QLineEdit, QMessageBox, QInputDialog, QComboBox, QDialog
)

# ----------------------------------------------------------------------
# Assume the following modules (or classes) are available from your codebase:
#   - AdminTab (aggregates UserManagementTab, GroupManagementTab, etc.)
#   - BusinessRulesTab (a tab showing rule list, new rule wizard, hierarchy, etc.)
#   - ApprovalsTab (or VisualApprovalTab) for multi-step approval workflow
#   - CollaborationTab and CollaborationManager (for chat and mentions)
#   - MetricsDashboardTab (for rule metrics and performance trends)
#   - PredictiveAnalyticsTab (placeholder for ML-based forecasting/anomaly detection)
#   - EnhancedAuditLogAnalysisTab (for audit log review, diff, export)
#   - HelpFeedbackTab (for help documentation and onboarding wizard)
#   - AlertsAndDashboardsTab (for real-time notifications)
#   - RuleEditorDialog (for adding/updating a rule)
#
# For example, you might import them as:
#
# from admin_module import AdminTab
# from business_rules_module import BusinessRulesTab
# from approvals_module import ApprovalsTab
# from collaboration_module import CollaborationTab, CollaborationManager
# from metrics_module import MetricsDashboardTab
# from predictive_module import PredictiveAnalyticsTab
# from audit_module import EnhancedAuditLogAnalysisTab
# from help_module import HelpFeedbackTab
# from alerts_module import AlertsAndDashboardsTab
# from rule_editor_module import RuleEditorDialog
#
# In this example code, we use these names directly.

# ----------------------------------------------------------------------
# MainWindow Class – Organizes tabs into logical groups
# ----------------------------------------------------------------------
class MainWindow(QMainWindow):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group

        self.setWindowTitle("BRM MASTER – Fully Integrated System")
        self.resize(1800, 1000)

        self.init_ui()
        self.init_menu()
        self.init_toolbar()
        self.init_statusbar()

        # Auto-refresh timer (every 30 seconds)
        self.refresh_timer = QTimer(self)
        self.refresh_timer.timeout.connect(self.refresh_all)
        self.refresh_timer.start(30000)

    def init_ui(self):
        central_widget = QWidget()
        central_layout = QVBoxLayout(central_widget)

        # --- Impersonation panel (Admin only) ---
        if self.user_group.upper() == "ADMIN":
            imp_layout = QHBoxLayout()
            imp_label = QLabel("Impersonate:")
            imp_layout.addWidget(imp_label)
            self.impersonation_combo = QComboBox()
            self.load_impersonation_options()
            imp_layout.addWidget(self.impersonation_combo)
            switch_btn = QPushButton("Switch User")
            switch_btn.clicked.connect(self.impersonate_user)
            imp_layout.addWidget(switch_btn)
            imp_layout.addStretch()
            central_layout.addLayout(imp_layout)

        # --- Main Tab Widget (Organized by functional group) ---
        self.tabs = QTabWidget()
        central_layout.addWidget(self.tabs)

        # Admin Tab (only visible to Admin users)
        if self.user_group.upper() == "ADMIN":
            try:
                from admin_module import AdminTab
                self.admin_tab = AdminTab(self.connection, self.user_id, self.user_group)
                self.tabs.addTab(self.admin_tab, "Administration")
            except Exception as ex:
                self.tabs.addTab(QLabel("Administration functions not available."), "Administration")

        # Business Rules Tab
        try:
            from business_rules_module import BusinessRulesTab
            self.business_rules_tab = BusinessRulesTab(self.connection, self.user_id, self.user_group)
            self.tabs.addTab(self.business_rules_tab, "Business Rules")
        except Exception as ex:
            self.tabs.addTab(QLabel("Business Rules not available."), "Business Rules")

        # Approvals Tab
        try:
            from approvals_module import ApprovalsTab
            # Fetch username for current user
            username = self.fetch_username(self.user_id)
            self.approvals_tab = ApprovalsTab(self.connection, username, self.user_group)
            self.tabs.addTab(self.approvals_tab, "Approvals")
        except Exception as ex:
            self.tabs.addTab(QLabel("Approvals not available."), "Approvals")

        # Collaboration Tab
        try:
            from collaboration_module import CollaborationTab, CollaborationManager
            self.collab_manager = CollaborationManager(self.connection)
            self.collaboration_tab = CollaborationTab(self.connection, self.collab_manager)
            self.tabs.addTab(self.collaboration_tab, "Collaboration")
        except Exception as ex:
            self.tabs.addTab(QLabel("Collaboration not available."), "Collaboration")

        # Metrics Dashboard Tab
        try:
            from metrics_module import MetricsDashboardTab
            self.metrics_tab = MetricsDashboardTab(self.connection)
            self.tabs.addTab(self.metrics_tab, "Metrics")
        except Exception as ex:
            self.tabs.addTab(QLabel("Metrics not available."), "Metrics")

        # Predictive Analytics Tab
        try:
            from predictive_module import PredictiveAnalyticsTab
            self.predictive_tab = PredictiveAnalyticsTab(self.connection)
            self.tabs.addTab(self.predictive_tab, "Predictive")
        except Exception as ex:
            self.tabs.addTab(QLabel("Predictive Analytics not available."), "Predictive")

        # Audit Log Tab
        try:
            from audit_module import EnhancedAuditLogAnalysisTab
            self.audit_tab = EnhancedAuditLogAnalysisTab(self.connection)
            self.tabs.addTab(self.audit_tab, "Audit Log")
        except Exception as ex:
            self.tabs.addTab(QLabel("Audit Log not available."), "Audit Log")

        # Help & Feedback Tab
        try:
            from help_module import HelpFeedbackTab
            self.help_tab = HelpFeedbackTab(self.connection)
            self.tabs.addTab(self.help_tab, "Help & Feedback")
        except Exception as ex:
            self.tabs.addTab(QLabel("Help & Feedback not available."), "Help & Feedback")

        central_widget.setLayout(central_layout)
        self.setCentralWidget(central_widget)

        # --- Notifications Dock (Real-Time Alerts) ---
        try:
            from alerts_module import AlertsAndDashboardsTab
            self.notifications_dock = QDockWidget("Real-Time Notifications", self)
            self.notifications_widget = AlertsAndDashboardsTab(self.connection)
            self.notifications_dock.setWidget(self.notifications_widget)
            self.addDockWidget(Qt.RightDockWidgetArea, self.notifications_dock)
        except Exception as ex:
            # If not available, simply log
            print("Notifications dock not available:", ex)

    def init_menu(self):
        menubar = self.menuBar()
        file_menu = menubar.addMenu("File")
        logout_action = QtWidgets.QAction("Log Out", self)
        logout_action.triggered.connect(self.logout)
        file_menu.addAction(logout_action)
        exit_action = QtWidgets.QAction("Exit", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        help_menu = menubar.addMenu("Help")
        doc_action = QtWidgets.QAction("Documentation", self)
        doc_action.triggered.connect(self.open_help)
        help_menu.addAction(doc_action)
        about_action = QtWidgets.QAction("About", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)

    def init_toolbar(self):
        toolbar = QtWidgets.QToolBar("Main Toolbar", self)
        toolbar.setMovable(False)
        self.addToolBar(Qt.TopToolBarArea, toolbar)

        refresh_action = QtWidgets.QAction("Refresh", self)
        refresh_action.triggered.connect(self.refresh_all)
        toolbar.addAction(refresh_action)

        self.search_line = QLineEdit(self)
        self.search_line.setPlaceholderText("Global search (rules, tasks, etc.)...")
        self.search_line.returnPressed.connect(self.perform_global_search)
        toolbar.addWidget(self.search_line)

        search_btn = QPushButton("Search", self)
        search_btn.clicked.connect(self.perform_global_search)
        toolbar.addWidget(search_btn)

        new_rule_action = QtWidgets.QAction("New Rule Wizard", self)
        new_rule_action.triggered.connect(self.open_rule_editor)
        toolbar.addAction(new_rule_action)

    def init_statusbar(self):
        statusbar = QStatusBar(self)
        self.setStatusBar(statusbar)
        statusbar.showMessage("Ready")

    def fetch_username(self, user_id):
        c = self.connection.cursor()
        try:
            c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?", (user_id,))
            row = c.fetchone()
            return row[0] if row else "Unknown"
        except Exception as ex:
            return "Unknown"

    def load_impersonation_options(self):
        if not hasattr(self, "impersonation_combo"):
            return
        self.impersonation_combo.clear()
        c = self.connection.cursor()
        try:
            c.execute("SELECT USER_ID, USERNAME, USER_GROUP FROM USERS ORDER BY USER_ID")
            for row in c.fetchall():
                uid, uname, ugrp = row
                self.impersonation_combo.addItem(f"{uname} ({ugrp})", (uid, ugrp))
        except Exception as ex:
            print("Error loading impersonation options:", ex)

    def impersonate_user(self):
        data = self.impersonation_combo.currentData()
        if not data:
            return
        new_uid, new_grp = data
        if new_uid == self.user_id and new_grp == self.user_group:
            return
        self.user_id = new_uid
        self.user_group = new_grp
        new_username = self.fetch_username(new_uid)
        try:
            self.approvals_tab.logged_in_username = new_username
            self.approvals_tab.user_group = new_grp
            self.approvals_tab.load_approvals()
        except Exception as ex:
            print("Error refreshing approvals on impersonation:", ex)
        try:
            self.business_rules_tab.user_id = new_uid
            self.business_rules_tab.user_group = new_grp
            self.business_rules_tab.load_rules()
        except Exception as ex:
            print("Error refreshing business rules on impersonation:", ex)
        QMessageBox.information(self, "Impersonated", f"Now acting as {new_username} ({new_grp}).")

    def open_rule_editor(self):
        try:
            from rule_editor_module import RuleEditorDialog
            editor = RuleEditorDialog(self.connection, self.user_group, self.user_id)
            if editor.exec_() == QDialog.Accepted:
                try:
                    self.business_rules_tab.load_rules()
                except Exception as ex:
                    QMessageBox.warning(self, "Reload Error", "Failed to refresh rules.")
        except Exception as ex:
            QMessageBox.critical(self, "Editor Error", str(ex))

    def logout(self):
        self.close()

    def open_help(self):
        idx = self.tabs.indexOf(self.help_tab)
        if idx >= 0:
            self.tabs.setCurrentIndex(idx)

    def show_about(self):
        QMessageBox.information(self, "About BRM MASTER",
                                "BRM MASTER – Fully Integrated System\nVersion 1.0\nAll rights reserved.")

    def perform_global_search(self):
        query = self.search_line.text().strip()
        if not query:
            return
        # If you have an AdvancedSearchWidget integrated in Help & Feedback or elsewhere,
        # you could switch to that tab and invoke its search.
        QMessageBox.information(self, "Global Search", f"Performing global search for: {query}")

    def refresh_all(self):
        try:
            if hasattr(self, "approvals_tab"):
                self.approvals_tab.load_approvals()
            if hasattr(self, "business_rules_tab"):
                self.business_rules_tab.load_rules()
            if hasattr(self, "notifications_widget"):
                self.notifications_widget.check_alerts()
            if hasattr(self, "metrics_tab"):
                self.metrics_tab.load_metrics()
        except Exception as ex:
            print("Refresh error:", ex)

# ----------------------------------------------------------------------
# Main application entry point
# ----------------------------------------------------------------------
def main():
    import sys
    app = QtWidgets.QApplication(sys.argv)

    # Show database connection dialog
    from connection_module import DatabaseConnectionDialog  # adjust import if needed
    db_dialog = DatabaseConnectionDialog()
    if db_dialog.exec_() != QDialog.Accepted:
        sys.exit(0)
    conn = db_dialog.connection
    if not conn:
        sys.exit(1)

    # Show login dialog
    from login_module import LoginDialog  # adjust import if needed
    login_dialog = LoginDialog(conn)
    if login_dialog.exec_() != QDialog.Accepted:
        sys.exit(0)
    user_id = login_dialog.user_id
    user_group = login_dialog.user_group

    window = MainWindow(conn, user_id, user_group)
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()