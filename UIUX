from PyQt5.QtWidgets import (
    QMainWindow, QTabWidget, QStatusBar, QToolBar, QAction, 
    QVBoxLayout, QWidget, QPushButton, QMessageBox
)
from PyQt5.QtCore import Qt, QTimer
import logging

logger = logging.getLogger("brm_master")

class MainWindow(QMainWindow):
    """
    A single MainWindow that gathers all the advanced features in one place:
      - Dashboard (Metrics + Task Center)
      - Rules & BFS
      - Scheduling
      - Decision Tables
      - Advanced Features (Conflicts, Composite, Hierarchy, Data Validation)
      - Snapshots & Tags
      - Collaboration
      - What-If Testing
      - Advanced Search
      - Multi-Step Approvals
      - Administration (User Mgmt, Group Mgmt, etc.)
      - And more...

    Assumes you already have the relevant Tabs/Dialogs defined:
      • TaskNotificationCenterTab
      • MetricsDashboardTab
      • BusinessRulesTab (or extended BFS version)
      • ScheduleManagementTab
      • DecisionTablesTab
      • ConflictPriorityManagerTab
      • CompositeRulesTab
      • DataValidationTab
      • HierarchyViewTab
      • SnapshotManagerTab
      • TagsManagerTab
      • CollaborationTab (or EnhancedCollaborationTab)
      • WhatIfTestTab
      • AdvancedSearchWidget or RuleSearchDialog
      • MultiStepApprovalTab
      • AdminTab (User Mgmt, Group Mgmt, etc.)
      • Additional classes: ChainSimulationDialog, GroupSimulationDialog, etc.

    Integrates them into one QTabWidget with optional menubar, toolbar, status bar.
    Also demonstrates how to handle refresh actions and BFS simulations.
    """
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group

        self.setWindowTitle("BRM Master – Full MainWindow")
        self.resize(1400, 900)

        # Create the main QTabWidget
        self.main_tabs = QTabWidget()
        self.setCentralWidget(self.main_tabs)

        # Optionally add a toolbar
        self.setup_toolbar()

        # Optionally add a menubar
        self.setup_menubar()

        # Status bar
        self.setStatusBar(QStatusBar(self))
        self.statusBar().showMessage("Ready")

        # Build out the individual tabs
        self.setup_all_feature_tabs()

        # (Optional) Auto-refresh timer
        self.refresh_timer = QTimer(self)
        self.refresh_timer.timeout.connect(self.refresh_all)
        # If you want auto-refresh every 30s, uncomment:
        # self.refresh_timer.start(30000)

    def setup_toolbar(self):
        """
        Creates a basic top toolbar with Refresh, BFS Execution, etc.
        """
        toolbar = QToolBar("Main Toolbar")
        toolbar.setMovable(False)
        self.addToolBar(Qt.TopToolBarArea, toolbar)

        # Example: refresh action
        refresh_act = QAction("Refresh", self)
        refresh_act.triggered.connect(self.refresh_all)
        toolbar.addAction(refresh_act)

        # BFS execution example
        bfs_act = QAction("Execute BFS", self)
        bfs_act.triggered.connect(self.execute_bfs_unified)
        toolbar.addAction(bfs_act)

        # Add any other actions you need
        # ...
        # e.g. new rule wizard
        # wizard_act = QAction("New Rule Wizard", self)
        # wizard_act.triggered.connect(self.some_dialog)
        # toolbar.addAction(wizard_act)

    def setup_menubar(self):
        """
        Create a menubar with File/Help (optional).
        """
        menubar = self.menuBar()
        file_menu = menubar.addMenu("File")
        logout_action = file_menu.addAction("Logout")
        logout_action.triggered.connect(self.logout)

        exit_action = file_menu.addAction("Exit")
        exit_action.triggered.connect(self.close)

        help_menu = menubar.addMenu("Help")
        about_action = help_menu.addAction("About")
        about_action.triggered.connect(self.show_about_dialog)

    def setup_all_feature_tabs(self):
        """
        Instantiates and adds every major tab into the QTabWidget.
        Replace each reference with your actual class name or logic.
        """

        # 1) Dashboard: Metrics + Task Center
        try:
            dash_widget = QWidget()
            dash_layout = QVBoxLayout(dash_widget)

            # Example: a metrics dashboard
            self.metrics_dashboard = MetricsDashboardTab(self.connection)
            dash_layout.addWidget(self.metrics_dashboard)

            # Example: a task center (pending approvals, stale locks, etc.)
            self.task_center = TaskNotificationCenterTab(self.connection, self.user_id)
            dash_layout.addWidget(self.task_center)

            dash_widget.setLayout(dash_layout)
            self.main_tabs.addTab(dash_widget, "Dashboard")
        except Exception as ex:
            logger.error(f"Error building Dashboard tab: {ex}", exc_info=True)

        # 2) Business Rules & BFS
        try:
            rules_tab = QWidget()
            rules_layout = QVBoxLayout(rules_tab)

            # Suppose you have a "BusinessRulesTab" or "BusinessRulesTabExtended" 
            self.rule_dashboard = BusinessRulesTabExtended(self.connection, self.user_id, self.user_group)
            rules_layout.addWidget(self.rule_dashboard)

            # BFS Simulation Buttons
            sim_btn_layout = QHBoxLayout()
            chain_btn = QPushButton("Chain Simulation")
            chain_btn.clicked.connect(self.open_chain_sim)
            sim_btn_layout.addWidget(chain_btn)

            group_btn = QPushButton("Group Simulation")
            group_btn.clicked.connect(self.open_group_sim)
            sim_btn_layout.addWidget(group_btn)

            sim_btn_layout.addStretch()
            rules_layout.addLayout(sim_btn_layout)

            rules_tab.setLayout(rules_layout)
            self.main_tabs.addTab(rules_tab, "Rules & BFS")
        except Exception as ex:
            logger.error(f"Error building Business Rules tab: {ex}", exc_info=True)

        # 3) Scheduling
        try:
            self.schedule_tab = ScheduleManagementTab(self.connection)
            self.main_tabs.addTab(self.schedule_tab, "Scheduling")
        except Exception as ex:
            logger.error(f"Error building Scheduling tab: {ex}")

        # 4) Decision Tables
        try:
            self.decision_tab = DecisionTablesTab(self.connection)
            self.main_tabs.addTab(self.decision_tab, "Decision Tables")
        except Exception as ex:
            logger.error(f"Error building DecisionTables tab: {ex}")

        # 5) Advanced Features (Conflicts, Composite, DataValidation, Hierarchy)
        try:
            adv_tab = QTabWidget()

            # conflict
            conflict_tab = ConflictPriorityManagerTab(self.connection)
            adv_tab.addTab(conflict_tab,"Conflicts")

            # composite
            comp_tab = CompositeRulesTab(self.connection)
            adv_tab.addTab(comp_tab,"Composite")

            # data validations
            dv_tab = DataValidationTab(self.connection)
            adv_tab.addTab(dv_tab,"DataVal")

            # hierarchy
            hierarchy_tab = HierarchyViewTab(self.connection)
            adv_tab.addTab(hierarchy_tab,"Hierarchy")

            self.main_tabs.addTab(adv_tab, "Advanced Features")
        except Exception as ex:
            logger.error(f"Error building Advanced Features tab: {ex}")

        # 6) Snapshots & Tags
        try:
            snap_tag_tab = QTabWidget()

            snap_tab = SnapshotManagerTab(self.connection)
            snap_tag_tab.addTab(snap_tab, "Snapshots")

            tag_tab = TagsManagerTab(self.connection)
            snap_tag_tab.addTab(tag_tab, "Tags")

            self.main_tabs.addTab(snap_tag_tab,"Snapshots & Tags")
        except Exception as ex:
            logger.error(f"Error building Snap/Tags tab: {ex}")

        # 7) Collaboration 
        try:
            # If you have a global CollaborationManager, you might do that outside. 
            # For now, let's instantiate a local manager or re-use it:
            self.collab_manager = CollaborationManager(self.connection)
            # Or EnhancedCollaborationTab / CollaborationTab
            self.collab_tab = EnhancedCollaborationTab(self.connection, self.collab_manager)
            self.main_tabs.addTab(self.collab_tab,"Collaboration")
        except Exception as ex:
            logger.error(f"Error building Collaboration tab: {ex}")

        # 8) What-If Testing
        try:
            self.whatif_tab = WhatIfTestTab(self.connection)
            self.main_tabs.addTab(self.whatif_tab,"What-If Testing")
        except Exception as ex:
            logger.error(f"Error building WhatIf tab: {ex}")

        # 9) Advanced Search
        try:
            # If you have e.g. "AdvancedSearchWidget"
            self.adv_search_tab = AdvancedSearchWidget(self.connection)
            self.main_tabs.addTab(self.adv_search_tab,"Advanced Search")
        except Exception as ex:
            logger.error(f"Error building AdvancedSearch tab: {ex}")

        # 10) Multi-Step Approvals
        try:
            # If your login user is e.g. "my_user_name"
            username = self.fetch_username(self.user_id)
            self.approval_tab = MultiStepApprovalTab(self.connection, username, self.user_group)
            self.main_tabs.addTab(self.approval_tab,"Approvals")
        except Exception as ex:
            logger.error(f"Error building Approvals tab: {ex}")

        # 11) Administration (if user is Admin)
        try:
            if self.user_group.upper()=="ADMIN":
                from PyQt5.QtWidgets import QTabWidget, QLabel
                admin_tab_widget = QTabWidget()

                # Example: user mgmt, group mgmt, etc.
                # or a single AdminAggregateTab you wrote
                admin_agg = AdminAggregateTab(self.connection, self.user_id, self.user_group)
                admin_tab_widget.addTab(admin_agg, "Admin Aggregate")

                self.main_tabs.addTab(admin_tab_widget,"Administration")
        except Exception as ex:
            logger.error(f"Error building Admin tab: {ex}")

        # 12) Audit Log
        try:
            self.audit_tab = EnhancedAuditLogAnalysisTab(self.connection)
            self.main_tabs.addTab(self.audit_tab,"Audit Log")
        except Exception as ex:
            logger.error(f"Error building AuditLog tab: {ex}")

        # 13) (Optional) others ... 
        # e.g. if you had additional specialized features.

        # 14) Done

    def logout(self):
        """
        Called if the user chooses 'Logout' from File menu or somewhere else.
        You can close this window and maybe re-run the login dialog.
        """
        self.close()

    def show_about_dialog(self):
        QMessageBox.information(self,"About",
            "BRM Tool – Single MainWindow with all advanced functionality.\n"
            "Includes BFS, scheduling, conflicts, data validations, etc."
        )

    def fetch_username(self, user_id):
        """
        Helper to get the username from the USERS table.
        """
        c = self.connection.cursor()
        try:
            c.execute("SELECT USERNAME FROM USERS WHERE USER_ID=?",(user_id,))
            row = c.fetchone()
            if row:
                return row[0]
        except Exception:
            pass
        return "UnknownUser"

    def refresh_all(self):
        """
        Called by the toolbar's Refresh or a QTimer.
        Tells each tab to reload as needed.
        """
        logger.info("Global refresh triggered.")
        # Example: 
        try:
            if hasattr(self, "task_center"):
                self.task_center.load_tasks()
            if hasattr(self, "metrics_dashboard"):
                self.metrics_dashboard.load_metrics()
            if hasattr(self, "approval_tab"):
                self.approval_tab.load_approvals()
            # if you have more .load_* 
        except Exception as ex:
            logger.error(f"Refresh error: {ex}")

        self.statusBar().showMessage("Refreshed",3000)

    def open_chain_sim(self):
        """
        Show ChainSimulationDialog for BFS from a chosen rule.
        """
        d = ChainSimulationDialog(self.connection, self)
        d.exec_()

    def open_group_sim(self):
        """
        Show GroupSimulationDialog for BFS or dry-run on a custom group.
        """
        d = GroupSimulationDialog(self.connection, self)
        d.exec_()

    def execute_bfs_unified(self):
        """
        Example: run a BFS-based rule execution across all root rules.
        """
        from PyQt5.QtWidgets import QInputDialog
        dry_run,ok = QInputDialog.getItem(
            self,"Execute BFS","Dry-run or Real?",
            ["dry-run","real"],0,False
        )
        if not ok:
            return
        do_dry = (dry_run=="dry-run")
        # call your BFS
        executed,skipped = execute_rules_unified_bfs(self.connection, dry_run=do_dry, user_id=self.user_id)
        msg = f"Executed: {executed}\nSkipped: {skipped}"
        QMessageBox.information(self,"BFS Execution Result", msg)