from PyQt5 import QtWidgets, QtCore
from PyQt5.QtCore import Qt, QTimer, QPointF
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import (
    QMainWindow, QTabWidget, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel,
    QMessageBox, QStatusBar, QDialog, QLineEdit
)

# Assume these classes are defined in your modules (or import them accordingly):
# MetricsDashboardTab, RuleDashboard, TaskNotificationCenterTab,
# ScheduleManagementTab, DecisionTablesTab, WhatIfTestTab,
# EnhancedCollaborationTab, AdvancedSearchWidget, SnapshotDiffWizard,
# SnapshotManagerTab, TagsManagerTab, MultiStepApprovalTab,
# GroupManagementTab, UserManagementTab, GlobalCriticalAdminTab, TableStageManagerTab,
# VisualConflictMapWidget, VisualApprovalPipelineWidget, FailPassTrendWidget, HeatmapWidget,
# and RuleEditorDialog.

class MainWindow(QMainWindow):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group
        self.setWindowTitle("BRM MASTER – Fully Integrated")
        self.resize(1400, 900)
        self.init_ui()
        self.init_menu()
        self.init_toolbar()
        self.init_statusbar()

    def init_ui(self):
        # Top-level tab widget containing main groups.
        self.mainTabs = QTabWidget()
        self.setCentralWidget(self.mainTabs)

        # --- 1. Dashboard Group ---
        dashboardGroup = QTabWidget()
        # Dashboard overview: metrics and task center.
        dashboardOverview = QWidget()
        ovLayout = QVBoxLayout(dashboardOverview)
        try:
            self.metricsDashboard = MetricsDashboardTab(self.connection)
            ovLayout.addWidget(self.metricsDashboard)
        except Exception as ex:
            ovLayout.addWidget(QLabel("Metrics Dashboard not available."))
        try:
            self.taskCenter = TaskNotificationCenterTab(self.connection, self.user_id)
            ovLayout.addWidget(self.taskCenter)
        except Exception as ex:
            ovLayout.addWidget(QLabel("Task Center not available."))
        dashboardGroup.addTab(dashboardOverview, "Overview")
        # Optionally, include a mini rule summary view:
        try:
            self.ruleDashboard = RuleDashboard(self.connection, self.user_id, self.user_group)
            dashboardGroup.addTab(self.ruleDashboard, "Rule Summary")
        except Exception as ex:
            dashboardGroup.addTab(QLabel("Rule Summary not available."), "Rule Summary")
        self.mainTabs.addTab(dashboardGroup, "Dashboard")

        # --- 2. Business Rules Group ---
        brGroup = QTabWidget()
        # Sub-tab: Rule List – displays all rules with management features.
        try:
            self.ruleDashboard = RuleDashboard(self.connection, self.user_id, self.user_group)
            ruleListTab = QWidget()
            rlLayout = QVBoxLayout(ruleListTab)
            # A button to add a new rule; editor launches as a dialog.
            newRuleBtn = QPushButton("Add New Rule")
            newRuleBtn.setFont(QFont("Arial", 10, QFont.Bold))
            newRuleBtn.clicked.connect(self.open_rule_editor)
            rlLayout.addWidget(newRuleBtn)
            rlLayout.addWidget(self.ruleDashboard)
            brGroup.addTab(ruleListTab, "Rule List")
        except Exception as ex:
            brGroup.addTab(QLabel("Rule List not available."), "Rule List")
        # (Optional: you might add a separate sub-tab for hierarchy if desired)
        try:
            self.hierarchyTab = HierarchyViewTab(self.connection)
            brGroup.addTab(self.hierarchyTab, "Hierarchy")
        except Exception as ex:
            brGroup.addTab(QLabel("Hierarchy not available."), "Hierarchy")
        self.mainTabs.addTab(brGroup, "Business Rules")

        # --- 3. Execution & Scheduling Group ---
        execSchedGroup = QTabWidget()
        try:
            self.scheduleTab = ScheduleManagementTab(self.connection)
            execSchedGroup.addTab(self.scheduleTab, "Scheduling")
        except Exception as ex:
            execSchedGroup.addTab(QLabel("Scheduling not available."), "Scheduling")
        try:
            self.decisionTab = DecisionTablesTab(self.connection)
            execSchedGroup.addTab(self.decisionTab, "Decision Tables")
        except Exception as ex:
            execSchedGroup.addTab(QLabel("Decision Tables not available."), "Decision Tables")
        try:
            self.whatIfTab = WhatIfTestTab(self.connection)
            execSchedGroup.addTab(self.whatIfTab, "What-If Testing")
        except Exception as ex:
            execSchedGroup.addTab(QLabel("What-If Testing not available."), "What-If Testing")
        self.mainTabs.addTab(execSchedGroup, "Execution & Scheduling")

        # --- 4. Collaboration & Search Group ---
        collabSearchGroup = QTabWidget()
        try:
            self.collabTab = EnhancedCollaborationTab(self.connection)
            collabSearchGroup.addTab(self.collabTab, "Collaboration")
        except Exception as ex:
            collabSearchGroup.addTab(QLabel("Collaboration not available."), "Collaboration")
        # Advanced search and snapshot features.
        searchSnapGroup = QTabWidget()
        try:
            self.searchWidget = AdvancedSearchWidget(self.connection)
            searchSnapGroup.addTab(self.searchWidget, "Advanced Search")
        except Exception as ex:
            searchSnapGroup.addTab(QLabel("Advanced Search not available."), "Advanced Search")
        try:
            self.snapshotDiff = SnapshotDiffWizard(self.connection)
            searchSnapGroup.addTab(self.snapshotDiff, "Snapshot Diff")
        except Exception as ex:
            searchSnapGroup.addTab(QLabel("Snapshot Diff not available."), "Snapshot Diff")
        try:
            self.snapshotTab = SnapshotManagerTab(self.connection)
            searchSnapGroup.addTab(self.snapshotTab, "Snapshots")
        except Exception as ex:
            searchSnapGroup.addTab(QLabel("Snapshots not available."), "Snapshots")
        try:
            self.tagsTab = TagsManagerTab(self.connection)
            searchSnapGroup.addTab(self.tagsTab, "Tags")
        except Exception as ex:
            searchSnapGroup.addTab(QLabel("Tags not available."), "Tags")
        collabSearchGroup.addTab(searchSnapGroup, "Search & Snapshots")
        self.mainTabs.addTab(collabSearchGroup, "Collaboration & Search")

        # --- 5. Approvals Group ---
        approvalsGroup = QTabWidget()
        try:
            self.multiStepApproval = MultiStepApprovalTab(self.connection, self.user_id, self.user_group)
            approvalsGroup.addTab(self.multiStepApproval, "Multi-Step Approvals")
        except Exception as ex:
            approvalsGroup.addTab(QLabel("Multi-Step Approvals not available."), "Multi-Step Approvals")
        # Approval Pipeline visualization.
        try:
            # In practice, pipeline data would be dynamically generated.
            pipeline_data = [
                {"stage": 1, "approvers": ["UserA", "UserB"], "current": False},
                {"stage": 2, "approvers": ["UserC"], "current": True},
                {"stage": 3, "approvers": ["UserD", "UserE"], "current": False}
            ]
            self.approvalPipeline = VisualApprovalPipelineWidget(pipeline_data)
            approvalsGroup.addTab(self.approvalPipeline, "Approval Pipeline")
        except Exception as ex:
            approvalsGroup.addTab(QLabel("Approval Pipeline not available."), "Approval Pipeline")
        self.mainTabs.addTab(approvalsGroup, "Approvals")

        # --- 6. Administration Group (Admin only) ---
        if self.user_group == "Admin":
            adminGroup = QTabWidget()
            try:
                self.groupMgmt = GroupManagementTab(self.connection, self.user_id, self.user_group)
                adminGroup.addTab(self.groupMgmt, "Group Management")
            except Exception as ex:
                adminGroup.addTab(QLabel("Group Management not available."), "Group Management")
            try:
                self.userMgmt = UserManagementTab(self.connection)
                adminGroup.addTab(self.userMgmt, "User Management")
            except Exception as ex:
                adminGroup.addTab(QLabel("User Management not available."), "User Management")
            try:
                self.globalCritAdmin = GlobalCriticalAdminTab(self.connection, self.user_group)
                adminGroup.addTab(self.globalCritAdmin, "Global/Critical Admin")
            except Exception as ex:
                adminGroup.addTab(QLabel("Global/Critical Admin not available."), "Global/Critical Admin")
            try:
                self.tableStageMgr = TableStageManagerTab(self.connection, self.user_group)
                adminGroup.addTab(self.tableStageMgr, "Table Stages")
            except Exception as ex:
                adminGroup.addTab(QLabel("Table Stages not available."), "Table Stages")
            self.mainTabs.addTab(adminGroup, "Administration")

        # --- 7. Visualizations Group ---
        vizGroup = QTabWidget()
        try:
            self.conflictMap = VisualConflictMapWidget(self.connection)
            vizGroup.addTab(self.conflictMap, "Conflict Map")
        except Exception as ex:
            vizGroup.addTab(QLabel("Conflict Map not available."), "Conflict Map")
        try:
            self.failPassTrend = FailPassTrendWidget(self.connection)
            vizGroup.addTab(self.failPassTrend, "Fail/Pass Trends")
        except Exception as ex:
            vizGroup.addTab(QLabel("Fail/Pass Trends not available."), "Fail/Pass Trends")
        try:
            self.heatmapWidget = HeatmapWidget(self.connection)
            vizGroup.addTab(self.heatmapWidget, "Heatmap")
        except Exception as ex:
            vizGroup.addTab(QLabel("Heatmap not available."), "Heatmap")
        self.mainTabs.addTab(vizGroup, "Visualizations")

    def init_menu(self):
        menubar = self.menuBar()
        fileMenu = menubar.addMenu("File")
        exitAction = QtWidgets.QAction("Exit", self)
        exitAction.triggered.connect(self.close)
        fileMenu.addAction(exitAction)
        helpMenu = menubar.addMenu("Help")
        aboutAction = QtWidgets.QAction("About", self)
        aboutAction.triggered.connect(self.show_about)
        helpMenu.addAction(aboutAction)

    def init_toolbar(self):
        toolbar = QtWidgets.QToolBar("Main Toolbar")
        toolbar.setMovable(False)
        self.addToolBar(QtCore.Qt.TopToolBarArea, toolbar)

        refreshAction = QtWidgets.QAction("Refresh", self)
        refreshAction.triggered.connect(self.on_refresh_clicked)
        toolbar.addAction(refreshAction)

        self.searchLine = QLineEdit()
        self.searchLine.setPlaceholderText("Global search (rules, tasks, tags, etc.)...")
        self.searchLine.returnPressed.connect(self.perform_global_search)
        toolbar.addWidget(self.searchLine)

        searchBtn = QPushButton("Search")
        searchBtn.clicked.connect(self.perform_global_search)
        toolbar.addWidget(searchBtn)

        # New Rule Wizard action (reusing the rule editor)
        wizardAction = QtWidgets.QAction("New Rule Wizard", self)
        wizardAction.triggered.connect(self.open_rule_editor)
        toolbar.addAction(wizardAction)

    def init_statusbar(self):
        statusbar = QStatusBar(self)
        self.setStatusBar(statusbar)
        statusbar.showMessage("Ready")

    def show_about(self):
        QMessageBox.information(self, "About BRM MASTER",
                                "BRM MASTER – Fully Integrated System\nVersion 1.0\nAll rights reserved.")

    def open_rule_editor(self):
        # Launch the RuleEditorDialog in add mode.
        from your_rule_editor_module import RuleEditorDialog  # Adjust this import as needed.
        editor = RuleEditorDialog(self.connection, self.user_group, self.user_id)
        if editor.exec_() == QDialog.Accepted:
            try:
                self.ruleDashboard.load_rules()
            except Exception as ex:
                QMessageBox.warning(self, "Reload Error", "Failed to reload rules after adding a new rule.")

    def on_refresh_clicked(self):
        try:
            if hasattr(self, "ruleDashboard"):
                self.ruleDashboard.load_rules()
            if hasattr(self, "metricsDashboard"):
                self.metricsDashboard.load_metrics()
            if hasattr(self, "taskCenter"):
                self.taskCenter.load_tasks()
            if hasattr(self, "multiStepApproval"):
                self.multiStepApproval.load_approvals()
            self.statusBar().showMessage("Data refreshed.", 3000)
        except Exception as ex:
            QMessageBox.warning(self, "Refresh Error", str(ex))

    def perform_global_search(self):
        query_text = self.searchLine.text().strip()
        if not query_text:
            return
        # Switch to the Advanced Search sub-tab if available.
        if hasattr(self, "searchWidget"):
            # Find the main tab that contains search (we added it in Collaboration & Search group)
            for i in range(self.mainTabs.count()):
                if self.mainTabs.tabText(i) == "Collaboration & Search":
                    self.mainTabs.setCurrentIndex(i)
                    # If searchWidget has a method to set keywords, call it.
                    if hasattr(self.searchWidget, "set_keywords"):
                        self.searchWidget.set_keywords(query_text)
                    if hasattr(self.searchWidget, "perform_search"):
                        self.searchWidget.perform_search()
                    break
        else:
            QMessageBox.information(self, "No Search Tab", "Advanced search is not available.")

# In your application startup code, you would create a database connection,
# perform a login to obtain user_id and user_group, and then instantiate MainWindow:
#
# def main():
#     app = QtWidgets.QApplication(sys.argv)
#     # ... (connect to DB, show login dialog, etc.)
#     window = MainWindow(connection, user_id, user_group)
#     window.show()
#     sys.exit(app.exec_())
#
# if __name__ == "__main__":
#     main()