Below is an example of an in‑depth, “from‐A to Z” functional reference guide for the tool. This guide explains each module, its inter‑dependencies, the data flow, the database design (including the 20+ tables), the engine’s validation and execution steps, and even the “what‑if” (dry‑run) functionality. You can use (or adapt) the guide below as part of your documentation:

⸻

BRM Tool – Ultimate Production Ready Edition

Comprehensive Functional Reference Guide

	This guide covers all aspects of the Business Rules Management (BRM) tool. It explains core modules, advanced functionalities, database design, data flows, error‐handling mechanisms, the “what‑if” (dry‑run) simulation features, duplicate rule checking, and more. This documentation is intended for developers, administrators, and end‑users seeking an in‑depth understanding of the tool’s inner workings.

⸻

1. Overview and Architecture

The BRM Tool is a full‑featured Business Rules Management system that enables:
	•	Centralized Logging & Notification: Using robust logging configuration and an enhanced email notifier.
	•	Database Connectivity & Helpers: A database connection dialog and helper functions to fetch data as dictionaries.
	•	User Authentication: A login dialog that performs plain‑text password comparisons against the USERS table.
	•	Approval & Lock Management: A unified lock manager that auto‑expires locks and supports forced unlocks; multi‑step approvals for rule changes.
	•	SQL Parsing & Dependency Analysis: An advanced SQL parser that strips comments/whitespace and extracts tables, columns, CTEs, and aliases.
	•	Rule Execution Engine: BFS‑based rule execution that validates rules in a transaction and logs outcomes.
	•	Dry‑Run (What‑If) Simulations: Both for individual rules and custom groups (chain‑based or group‑based), which simulate rule execution without modifying data.
	•	Scheduling & Metadata Sync: Advanced scheduling UI, including a dialog to schedule rule execution and a metadata synchronization routine that marks missing table references.
	•	Extensive UI/UX Components: Several tabs and dialogs covering business rules, approvals, audit logs, predictive analytics, lineage visualization, defect management, collaboration, and administrative tasks.

⸻

2. Core Modules and Functional Components

A. Core Foundation (Part 1)
	•	Logging Configuration:
– Uses a dictionary‑based logging config with both console and file handlers.
– Every module logs events with consistent formatting.
	•	Email Notifier:
– The EmailNotifier class sends emails via SMTP.
– Reads configuration from environment variables and logs errors.
	•	Database Connection Dialog:
– Provides a UI (using PyQt) to choose an ODBC DSN or enter a custom connection string.
– Tests the connection and reports errors via a message box and logs.
	•	Basic DB Helpers:
– Functions like fetch_all_dict() and fetch_one_dict() convert query results to dictionaries.
– The insert_audit_log() function writes audit records into the BRM_AUDIT_LOG table with JSON‑formatted old/new data.
	•	Login Dialog:
– A minimal user login interface that checks credentials (using plain‑text comparison) against the USERS table.
– On success, it stores the user ID and user group.
	•	Onboarding Wizard:
– Guides new users through setup steps (e.g., creating a group, adding a rule, scheduling it).
	•	Sync Metadata Function:
– sync_metadata_improved() compares actual tables (queried from sys.tables) with the table dependencies stored in BRM_RULE_TABLE_DEPENDENCIES.
– It prefixes missing table names with “MISSING_” and logs the results.

B. Advanced Rule Engine & Execution (Part 2)
	•	BFS-Based Rule Execution:
– Uses a breadth‑first search (BFS) approach to traverse rule relationships and execute them in order.
– For each rule, the engine first runs data validations (via run_data_validations()), then executes the rule in a database transaction.
– If a rule fails (or a critical/global rule fails), it marks the rule and its descendants as skipped.
	•	Loading Rule Relationships:
– The function load_rule_relationships() builds an adjacency list for:
	•	Parent–Child relationships (from BRM_RULES.PARENT_RULE_ID)
	•	Conflict links (from RULE_CONFLICTS)
	•	Global‑Critical links (from BRM_GLOBAL_CRITICAL_LINKS)
	•	Composite references (from COMPOSITE_RULES)
	•	Rule Transaction Execution:
– run_single_rule_in_transaction() executes the rule’s SQL (or decision table logic) within a transaction.
– It fetches a result (expecting a “1” for PASS) and either commits (if successful and not a dry‑run) or rolls back on failure.
	•	Decision Table Execution:
– For rules whose OPERATION_TYPE is “DECISION_TABLE”, the function execute_decision_table() fetches the decision query from the DECISION_TABLES table and executes it in a transaction.
– The decision result (first column equals 1) determines a PASS.
	•	Dry‑Run Simulations:
– dry_run_rule_sql() runs the given SQL in a transaction, checks the result, and always rolls back so that no changes are made.
– simulate_chain_bfs() and simulate_custom_group_rules() simulate full rule chains or group‑based rule executions in “what‑if” mode.

C. Lock Management and Approvals
	•	LockManager:
– Provides methods to auto‑unlock expired locks, check current lock owners, lock a rule for editing (with optional force‑lock), and unlock a rule.
	•	Multi‑Step Approvals:
– The function create_multistep_approvals() inserts records into BRM_RULE_APPROVALS for each required stage (e.g., owner group approval then global approval).
– The Approvals UI (e.g., ApprovalsTab) lets users approve or reject rule changes.
	•	Duplicate Rule Checking:
– In the rule‑editor dialog (e.g., in the RuleEditorDialog), when a new rule is being added, the code executes a query against the BRM_RULES table to ensure no rule with the same name already exists within the same owner group.
– For example, before inserting a new rule, the code runs:

c.execute("SELECT RULE_ID FROM BRM_RULES WHERE OWNER_GROUP=? AND RULE_NAME=?", (rule_data["OWNER_GROUP"], rule_data["RULE_NAME"].strip()))
if c.fetchone():
    raise ValueError("Duplicate rule name in that group.")

– This prevents duplicate rule names and avoids potential conflicts.

D. Advanced UI Components (Parts 3–8)
	•	Scheduling & Simulation UI:
– EnhancedScheduleDialog provides a fully functional scheduling dialog (using calendar and time edit widgets).
– ScheduleManagementTab allows viewing, updating, and deleting scheduled rules (stored in RULE_SCHEDULES).
	•	Business Rules & What‑If Test Tab:
– The BusinessRulesTab displays rules with a search box and top‑row action buttons (Add, Edit, Delete, Deactivate, Dry‑Run).
– The WhatIfTestTab lets users select a rule and optionally upload a CSV file to run a dry‑run test (without applying changes). This simulates rule execution to see if it would PASS or FAIL.
	•	Composite Rules & Conflict Management:
– The CompositeRulesTab enables users to create composite rules using logical expressions that reference other rules (e.g., “Rule10 AND Rule20”).
– The ConflictPriorityManagerTab allows users to add, update, or delete conflict links between rules (managed in RULE_CONFLICTS).
	•	Dashboard, Metrics & Predictive Analytics:
– The MetricsDashboardTab uses PyQtGraph to display bar charts (rule counts by status) and line charts (performance trends based on RULE_PERF_STATS).
– The PredictiveAnalyticsTab applies linear regression (using scikit‑learn) to forecast average execution time, flagging anomalies if thresholds are exceeded.
	•	Audit Log & Version History:
– The EnhancedAuditLogAnalysisTab displays detailed audit logs (from BRM_AUDIT_LOG), supports full‑text search, and offers CSV/JSON/Excel export options.
– The VersionHistoryDialog allows users to review past versions of a rule (via audit logs) and view line‑by‑line differences (using difflib), even supporting rollback.
	•	Collaboration & Notifications:
– The CollaborationManager polls the COLLABORATION_LOGS table and emits new message signals, which are then shown in the CollaborationTab.
– The AlertsAndDashboardsTab provides real‑time notifications on stale approvals, upcoming schedules, performance issues, and stale locks.
	•	Administrative Tools:
– Admin users have an AdminTab that aggregates user management, group management (with backup/restore of custom groups), group permissions (stored in GROUP_PERMISSIONS), and control/reference table viewing (CtrlTablesTab).
	•	Enhanced Lineage Analysis:
– The EnhancedLineageGraphWidget displays an interactive, force‑directed graph (similar to MANTA) showing rule lineage, while the EnhancedLineageAnalysisTab also provides an end‑to‑end textual representation of rule relationships.

⸻

3. Database Design & ER Diagram Overview

The tool uses more than 20 tables. Some key tables include:
	•	BRM_RULES: Contains all business rules, with columns such as RULE_ID, RULE_NAME, RULE_SQL, STATUS, VERSION, OWNER_GROUP, PARENT_RULE_ID, CREATED_TIMESTAMP, etc.
	•	BRM_AUDIT_LOG: Stores audit logs for all actions (INSERT, UPDATE, DELETE, APPROVE, etc.) with columns like AUDIT_ID, ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA, and ACTION_TIMESTAMP.
	•	BRM_RULE_LOCKS: Tracks locks on rules with columns such as RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, and ACTIVE_LOCK.
	•	BRM_RULE_TABLE_DEPENDENCIES: Maintains a record of which tables (and even columns) are referenced by each rule.
	•	BRM_CUSTOM_GROUP_MEMBERS: Associates rules with custom groups.
	•	BRM_CUSTOM_RULE_GROUPS: Stores definitions of custom groups.
	•	RULE_CONFLICTS: Defines conflict relationships between rules.
	•	BRM_GLOBAL_CRITICAL_LINKS: Captures global‑critical relationships.
	•	COMPOSITE_RULES: Contains composite rules that reference other rules via logical expressions.
	•	DATA_VALIDATIONS & DATA_VALIDATION_LOGS: Define and log data validations.
	•	RULE_EXECUTION_LOGS: Stores execution outcomes of rules.
	•	DECISION_TABLES & DECISION_TABLE_EXEC_LOGS: Manage decision table rules.
	•	COLLABORATION_LOGS: Used for rule collaboration messages.
	•	RULE_SCHEDULES: Contains scheduling information for rule execution.
	•	RULE_PERF_STATS: Holds performance statistics (execution times, memory usage).
	•	USERS, BUSINESS_GROUPS, GROUP_PERMISSIONS, BRM_RULE_TYPES, BRM_RULE_GROUPS, BRM_COLUMN_MAPPING, BRM_CUSTOM_GROUP_BACKUPS, BRM_DEFECT_LOGS, etc.: Support user management, group management, permissions, defect logging, etc.

ER Diagram Overview:
While an image cannot be embedded here, the relationships are as follows:
	•	BRM_RULES is the central table, linked to BRM_RULE_LOCKS, BRM_AUDIT_LOG, BRM_RULE_TABLE_DEPENDENCIES, RULE_CONFLICTS, BRM_GLOBAL_CRITICAL_LINKS, COMPOSITE_RULES, DATA_VALIDATIONS (indirectly via logs), and RULE_EXECUTION_LOGS.
	•	USERS relate to rule approval and login, while BUSINESS_GROUPS and GROUP_PERMISSIONS determine ownership and access.
	•	BRM_CUSTOM_RULE_GROUPS is linked to BRM_CUSTOM_GROUP_MEMBERS which in turn reference BRM_RULES.
	•	RULE_SCHEDULES and RULE_PERF_STATS provide scheduling and performance data for each rule.

⸻

4. Data Flow and Validation Process

Execution Flow:
	1.	Startup:
– The application launches and first displays the Database Connection Dialog.
– After a successful connection, the Login Dialog authenticates the user using a simple plain‑text comparison.
	2.	Main Window Initialization:
– Once logged in, the MainWindow loads and displays various tabs (Admin, Dashboard, Business Rules, Approvals, etc.) based on the user’s role.
	3.	Rule Creation/Editing:
– In the RuleEditorDialog, users input rule details including the SQL to be executed.
– The editor checks for duplicate rule names in the same owner group by querying the BRM_RULES table.
– It also calls parse_sql_dependencies() to extract dependencies and later updates the BRM_RULE_TABLE_DEPENDENCIES table accordingly.
– Once saved, the system creates a multi‑step approval record via create_multistep_approvals() and logs the action.
	4.	Rule Execution:
– The engine first runs data validations (run_data_validations()) across the specified tables/columns.
– It then uses a BFS‑based approach to traverse and execute rules:
	•	Each rule is executed in a transaction using run_single_rule_in_transaction().
	•	For decision‑table type rules, execute_decision_table() is invoked.
	•	Execution logs are recorded in RULE_EXECUTION_LOGS.
	•	If a rule fails (or if it is critical and its execution fails), its descendants may be skipped using skip_all_descendants().
	5.	Dry‑Run (What‑If) Functionality:
– The WhatIfTestTab allows users to select a rule and run a “dry‑run” using dry_run_rule_sql(), which executes the SQL in a transaction and rolls back immediately.
– For group‑based simulations, simulate_custom_group_rules() is used to test the rule set without applying changes.
	6.	Scheduling:
– The EnhancedScheduleDialog lets users schedule rule execution, writing entries to the RULE_SCHEDULES table.
– The ScheduleManagementTab enables the viewing, updating, and deletion of these schedule entries.

Validation Process:
	•	Data Validations:
– Defined in the DATA_VALIDATIONS table (e.g., “NOT NULL”, “RANGE”, “UNIQUE”).
– When executed, the engine queries each target table and logs the results in DATA_VALIDATION_LOGS.
	•	Rule Execution Validation:
– After executing a rule’s SQL, the tool inspects the first row’s first column to decide whether the rule passed (value equals 1) or failed.
– If a rule is a decision table, the decision query is executed and evaluated in a similar manner.
– Each result is logged with details (message, record count) into RULE_EXECUTION_LOGS.
	•	Duplicate Rule Check:
– Prior to inserting a new rule, a duplicate check is performed against existing rules in the same owner group.
– If a duplicate is found, the rule is not created and the user is prompted with an error message.

⸻

5. What‑If Functionality

The “What‑If” aspect of the tool is implemented through:
	•	Dry‑Run Simulation (Single Rule):
– The dry_run_rule_sql() function executes the given SQL in a transaction, checks for a “PASS” (first column equals 1), and always rolls back the transaction.
	•	Chain and Group Dry‑Run:
– The simulate_chain_bfs() function simulates the execution of a chain of rules using BFS.
– The simulate_custom_group_rules() function performs dry‑runs for all rules assigned to a custom group.
	•	User Interface:
– The WhatIfTestTab lets users select a rule, optionally upload a CSV file, and then run a dry‑run. The results (PASS/FAIL, message, and record count) are displayed in a dialog.
– This simulation helps users understand the impact of rule execution without committing any changes to the database.

⸻

6. Engine Validation and Business Logic
	•	SQL Dependency Extraction:
– The tool uses an advanced SQL parser (using the sqlparse library) to extract dependencies such as referenced tables, columns, and CTEs.
– This information is later used to update the BRM_RULE_TABLE_DEPENDENCIES table and to detect if a rule might be referring to non‑existent tables.
	•	Transaction Management:
– All rule executions are wrapped in transactions.
– If a rule execution does not produce a PASS result, the transaction is rolled back to maintain database integrity.
	•	Logging and Error Reporting:
– Every action—from rule creation to execution—is logged into BRM_AUDIT_LOG.
– Comprehensive error handling ensures that any exceptions are caught, logged, and reported to the user via the UI.
	•	Locking and Concurrency:
– When a rule is being edited or executed, the tool uses the LockManager to prevent concurrent modifications.
– It supports forced unlocks (for admin users) and auto‑expiry of stale locks.

⸻

7. Database Tables (20+ Tables)

Some of the major tables include (but are not limited to):
	1.	USERS: Stores user credentials and groups.
	2.	BUSINESS_GROUPS: Defines business groups.
	3.	GROUP_PERMISSIONS: Specifies table and functional access permissions.
	4.	BRM_RULES: Central repository for business rules.
	5.	BRM_AUDIT_LOG: Records audit logs for all changes.
	6.	BRM_RULE_LOCKS: Manages locks on rule records.
	7.	BRM_RULE_TABLE_DEPENDENCIES: Maps rules to referenced database tables/columns.
	8.	BRM_CUSTOM_RULE_GROUPS: Defines custom rule groups.
	9.	BRM_CUSTOM_GROUP_MEMBERS: Associates rules with custom groups.
	10.	RULE_CONFLICTS: Lists conflicts between rules.
	11.	BRM_GLOBAL_CRITICAL_LINKS: Defines one‑way global‑critical relationships.
	12.	COMPOSITE_RULES: Contains composite rules with logical expressions.
	13.	DATA_VALIDATIONS: Defines data validation rules.
	14.	DATA_VALIDATION_LOGS: Logs results of data validations.
	15.	RULE_EXECUTION_LOGS: Logs rule execution outcomes.
	16.	DECISION_TABLES: Contains decision table queries.
	17.	DECISION_TABLE_EXEC_LOGS: Logs execution of decision table rules.
	18.	COLLABORATION_LOGS: Stores messages for collaboration.
	19.	RULE_SCHEDULES: Holds scheduling information.
	20.	RULE_PERF_STATS: Stores performance statistics (execution time, memory usage).
	21.	BRM_RULE_LINEAGE: Contains information about rule parent–child relationships.
	22.	BRM_DEFECT_LOGS: Logs defects associated with rules.
	23.	BRM_CUSTOM_GROUP_BACKUPS: Archives custom group versions.
	24.	BRM_RULE_TYPES, BRM_RULE_GROUPS, BRM_COLUMN_MAPPING, etc.

Note: The ER diagram (which you should include as an image in your final documentation) illustrates these relationships. In summary, BRM_RULES is the central entity; many tables reference its RULE_ID, ensuring that every change, dependency, and validation is tracked.

⸻

8. Data Flow Diagram & Execution Flow

Data Flow Diagram (High‑Level Description)
	1.	User Input:
– Users interact via a rich PyQt‑based GUI (login, rule editing, scheduling, approvals, etc.).
	2.	Business Logic Layer:
– The UI components call functions (e.g., to validate SQL, execute rules, check duplicates) and use helper modules (LockManager, EmailNotifier).
	3.	Database Interaction:
– All interactions with the database are managed via pyodbc. Queries, updates, and transaction management are executed in helper functions.
	4.	Audit & Notification:
– Every action is logged to BRM_AUDIT_LOG and notifications are sent (or polled) via the CollaborationManager and AlertsAndDashboardsTab.
	5.	Feedback Loop:
– Results (e.g., dry‑run outcomes, validation errors) are shown back to the user immediately, and periodic background refresh (every 30 seconds) keeps the UI up to date.

Execution Flow Diagram (Summary)
	1.	Start Application → Database Connection → Login
	2.	MainWindow Initialization → Load Tabs (Admin, Business Rules, Approvals, etc.)
	3.	User Action (e.g., Add Rule) → RuleEditorDialog Opens
– Duplicate check occurs
– SQL parsing & dependency extraction run
– If valid, rule is inserted and multi‑step approvals are initiated
	4.	Rule Execution (via BFS Engine)
– Data validations run
– Each rule executed in a transaction; result logged
– Dry‑run simulations available
	5.	User Views Results
– Audit logs, performance charts, alerts, and lineage graphs are updated in real‑time

⸻

9. What‑If Functionality
	•	Individual Rule Dry‑Run:
– Users can select a rule and click “Dry‑Run (Single)” which calls dry_run_rule_sql().
– The rule’s SQL is executed in a transaction and rolled back; the result (PASS/FAIL) is displayed.
	•	Group Dry‑Run:
– In the What‑If Test Tab and via a dedicated button, users can simulate execution for all rules assigned to a custom group (using simulate_custom_group_rules()).
– The tool then returns two lists: passed rule IDs and failed rule IDs.
	•	Impact Analysis:
– This functionality helps predict the impact of rule changes before they go live.
– It’s particularly useful when testing composite or chain‑based rules to see how a change in one rule might cascade through its dependencies.

⸻

10. Duplicate Rule Check

During rule creation in the Rule Editor:
	•	Before inserting a new rule into the BRM_RULES table, the tool queries for existing rules with the same name within the same owner group.
	•	If a duplicate is found, an error is raised (e.g., “Duplicate rule name in that group”), and the rule is not added.
	•	This is done via a simple SQL SELECT statement followed by a conditional check, ensuring data integrity.

⸻

11. Conclusion

This guide has provided a detailed explanation of the BRM Tool’s components—from its low‑level database operations and transaction management to its high‑level user interfaces (including “what‑if” simulations and duplicate checks). All modules work together to ensure that business rules are managed, validated, and executed in a robust, auditable, and user‑friendly manner.

By following this guide, developers and administrators should have a clear understanding of the tool’s functionality, the data flows between components, the use of over 20 related tables, and the mechanisms (like duplicate checks and dry‑run simulations) that ensure the engine operates reliably and securely.

⸻

This comprehensive reference can be supplemented with diagrams (ER, data flow, and execution flow) and inline code excerpts to provide a full documentation package for deployment and training purposes.