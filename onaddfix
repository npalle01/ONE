class RuleEditorDialog(QDialog):
    """
    A dialog to Add or Update a rule, with combo boxes for:
      - Rule Group
      - Parent Rule
      - Rule Type
      - CDC Type
    Also has global/critical, scope, status, name, SQL, justification, etc.
    """
    def __init__(self, connection, user_group, rule_data=None, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_group = user_group
        self.rule_data = rule_data  # if None => adding new
        self.is_update = (rule_data is not None)

        # Window Title
        title = "Update Rule" if self.is_update else "Add New Rule"
        self.setWindowTitle(title)
        self.resize(800, 550)

        main_layout = QVBoxLayout(self)

        # We store these combos in instance variables
        self.group_combo = QComboBox()
        self.parent_rule_combo = QComboBox()
        self.rule_type_combo = QComboBox()
        self.cdc_combo = QComboBox()

        # Load combos from DB or fixed sets
        self.populate_group_combo()
        self.populate_parent_rule_combo()
        self.populate_rule_type_combo()
        self.populate_cdc_combo()

        # The rest of the form
        form_layout = QFormLayout()

        # 1) Rule Group
        form_layout.addRow("Rule Group:", self.group_combo)

        # 2) Parent Rule
        # We'll insert a "None" option for parent=Null
        self.parent_rule_combo.insertItem(0, "(No Parent)", None)
        self.parent_rule_combo.setCurrentIndex(0)
        form_layout.addRow("Parent Rule:", self.parent_rule_combo)

        # 3) Rule Name
        self.name_edit = QLineEdit()
        form_layout.addRow("Rule Name:", self.name_edit)

        # 4) Rule Type
        form_layout.addRow("Rule Type:", self.rule_type_combo)

        # 5) Status
        self.status_combo = QComboBox()
        self.status_combo.addItems(["INACTIVE", "ACTIVE"])
        form_layout.addRow("Status:", self.status_combo)

        # 6) Start/End Date
        self.start_dt = QDateTimeEdit(QDateTime.currentDateTime())
        self.start_dt.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        self.start_dt.setCalendarPopup(True)
        form_layout.addRow("Effective Start:", self.start_dt)

        self.end_dt = QDateTimeEdit(QDateTime.currentDateTime().addDays(30))
        self.end_dt.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        self.end_dt.setCalendarPopup(True)
        form_layout.addRow("Effective End:", self.end_dt)

        # 7) CDC Type
        form_layout.addRow("CDC Type:", self.cdc_combo)

        # 8) Rule SQL
        self.sql_edit = QPlainTextEdit()
        self.sql_edit.setPlaceholderText("Enter SQL logic here...")
        form_layout.addRow("Rule SQL:", self.sql_edit)

        # 9) Description
        self.desc_edit = QTextEdit()
        self.desc_edit.setPlaceholderText("Optional description...")
        form_layout.addRow("Description:", self.desc_edit)

        # 10) Justification
        self.just_edit = QTextEdit()
        self.just_edit.setPlaceholderText("Why is this rule needed?")
        form_layout.addRow("Justification:", self.just_edit)

        # 11) Critical / Global
        # If user is admin, show global
        self.global_cb = None
        if self.user_group == "Admin":
            self.global_cb = QCheckBox("Global (admin-only)")
            form_layout.addRow("Global Rule:", self.global_cb)

        self.critical_cb = QCheckBox()
        form_layout.addRow("Critical Rule:", self.critical_cb)

        self.scope_combo = QComboBox()
        self.scope_combo.addItems(["NONE", "GROUP", "CLUSTER", "GLOBAL"])
        form_layout.addRow("Critical Scope:", self.scope_combo)

        main_layout.addLayout(form_layout)

        # Buttons
        bh = QHBoxLayout()
        self.save_btn = QPushButton("Save" if self.is_update else "Add")
        self.save_btn.clicked.connect(self.on_save)
        bh.addWidget(self.save_btn)

        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        bh.addWidget(cancel_btn)
        main_layout.addLayout(bh)

        if self.is_update and self.rule_data:
            self.load_existing_rule_data(self.rule_data)

        self.setLayout(main_layout)

    def populate_group_combo(self):
        """
        Load BRM_RULE_GROUPS from DB: (GROUP_ID, GROUP_NAME)
        Then set as combobox items. 
        """
        self.group_combo.clear()
        c = self.connection.cursor()
        c.execute("SELECT GROUP_ID, GROUP_NAME FROM BRM_RULE_GROUPS ORDER BY GROUP_NAME")
        rows = c.fetchall()
        for r_ in rows:
            gid, gname = r_
            disp = f"{gname} (ID={gid})"
            self.group_combo.addItem(disp, gid)

    def populate_parent_rule_combo(self):
        """
        Load possible parent rules from DB: e.g. (RULE_ID, RULE_NAME)
        We'll fill parent_rule_combo. We also insert a 'None' at index 0.
        """
        self.parent_rule_combo.clear()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        rows = c.fetchall()
        for r_ in rows:
            rid, rname = r_
            disp = f"{rname} (ID={rid})"
            self.parent_rule_combo.addItem(disp, rid)
        # We'll handle "None" by inserting at top in constructor

    def populate_rule_type_combo(self):
        """
        Load from BRM_RULE_TYPES (RULE_TYPE_ID, RULE_TYPE_NAME)
        """
        self.rule_type_combo.clear()
        c = self.connection.cursor()
        c.execute("SELECT RULE_TYPE_ID, RULE_TYPE_NAME FROM BRM_RULE_TYPES ORDER BY RULE_TYPE_ID")
        rows = c.fetchall()
        for r_ in rows:
            rtid, rtname = r_
            self.rule_type_combo.addItem(rtname, rtid)

    def populate_cdc_combo(self):
        """
        If you have them in DB, load from DB. Otherwise, just use fixed items:
        """
        # Example fixed items:
        self.cdc_combo.clear()
        self.cdc_combo.addItems(["NONE","FULL_LOAD","INCREMENTAL","UPSERT","INSERT_ONLY"])

    def load_existing_rule_data(self, rd):
        """
        If updating, pre-fill all combos/edits from the rule_data dictionary.
        The dictionary likely has these keys:
          GROUP_ID
          PARENT_RULE_ID
          RULE_TYPE_ID
          RULE_NAME
          RULE_SQL
          STATUS
          EFFECTIVE_START_DATE
          EFFECTIVE_END_DATE
          DESCRIPTION
          BUSINESS_JUSTIFICATION
          IS_GLOBAL
          CRITICAL_RULE
          CRITICAL_SCOPE
          CDC_TYPE
        etc.
        """
        # 1) Group combo
        g_id = rd.get("GROUP_ID", None)
        if g_id:
            idx = self.group_combo.findData(g_id)
            if idx >= 0:
                self.group_combo.setCurrentIndex(idx)

        # 2) Parent rule combo
        p_id = rd.get("PARENT_RULE_ID", None)
        if p_id:
            idx2 = self.parent_rule_combo.findData(p_id)
            if idx2 >= 0:
                self.parent_rule_combo.setCurrentIndex(idx2)
            else:
                # parent doesn't exist or is inactive
                pass
        else:
            # Means None
            self.parent_rule_combo.setCurrentIndex(0)  # "(No Parent)"

        # 3) Rule name
        self.name_edit.setText(rd.get("RULE_NAME",""))

        # 4) Rule type
        rt_id = rd.get("RULE_TYPE_ID", None)
        if rt_id:
            idx3 = self.rule_type_combo.findData(rt_id)
            if idx3 >= 0:
                self.rule_type_combo.setCurrentIndex(idx3)

        # 5) Status
        st = rd.get("STATUS","INACTIVE")
        ix = self.status_combo.findText(st)
        if ix >= 0:
            self.status_combo.setCurrentIndex(ix)

        # 6) Start/End date
        from datetime import datetime
        fmt = "%Y-%m-%d %H:%M:%S"
        start_str = rd.get("EFFECTIVE_START_DATE","")
        if start_str:
            try:
                dt_ = datetime.strptime(start_str, fmt)
                self.start_dt.setDateTime(QtCore.QDateTime(dt_))
            except:
                pass

        end_str = rd.get("EFFECTIVE_END_DATE","")
        if end_str:
            try:
                dt2_ = datetime.strptime(end_str, fmt)
                self.end_dt.setDateTime(QtCore.QDateTime(dt2_))
            except:
                pass

        # 7) CDC type
        cdc_val = rd.get("CDC_TYPE","NONE").upper()
        cdc_idx = self.cdc_combo.findText(cdc_val)
        if cdc_idx >= 0:
            self.cdc_combo.setCurrentIndex(cdc_idx)

        # 8) SQL
        self.sql_edit.setPlainText(rd.get("RULE_SQL",""))

        # 9) Description
        if rd.get("DESCRIPTION"):
            self.desc_edit.setText(rd["DESCRIPTION"])

        # 10) Justification
        if rd.get("BUSINESS_JUSTIFICATION"):
            self.just_edit.setText(rd["BUSINESS_JUSTIFICATION"])

        # 11) Global / Critical
        if self.user_group == "Admin" and "IS_GLOBAL" in rd:
            if rd["IS_GLOBAL"] == 1:
                self.global_cb.setChecked(True)
            else:
                self.global_cb.setChecked(False)

        if rd.get("CRITICAL_RULE",0) == 1:
            self.critical_cb.setChecked(True)
        else:
            self.critical_cb.setChecked(False)

        sc_ = rd.get("CRITICAL_SCOPE","NONE").upper()
        i_sc = self.scope_combo.findText(sc_)
        if i_sc >= 0:
            self.scope_combo.setCurrentIndex(i_sc)

    def on_save(self):
        """
        Gather user inputs and call add_rule(...) or update_rule(...).
        """
        # Basic checks
        nm = self.name_edit.text().strip()
        sql_ = self.sql_edit.toPlainText().strip()
        if not nm:
            QMessageBox.warning(self, "Error", "Rule name is required.")
            return
        if not sql_:
            QMessageBox.warning(self, "Error", "SQL cannot be empty.")
            return

        # Gather combos
        group_id = self.group_combo.currentData()
        parent_id = self.parent_rule_combo.currentData()
        if parent_id == None:
            parent_id = None  # means no parent
        rule_type_id = self.rule_type_combo.currentData()
        cdc_val = self.cdc_combo.currentText().upper()

        # Status
        st = self.status_combo.currentText()
        start_dt_str = self.start_dt.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        end_dt_str   = self.end_dt.dateTime().toString("yyyy-MM-dd HH:mm:ss")

        # Description, justification
        desc_ = self.desc_edit.toPlainText().strip()
        just_ = self.just_edit.toPlainText().strip()

        # Global, critical
        is_g = 0
        if self.user_group == "Admin" and self.global_cb is not None and self.global_cb.isChecked():
            is_g = 1

        is_c = 1 if self.critical_cb.isChecked() else 0
        scp_ = self.scope_combo.currentText().upper()

        # Build the dictionary
        rule_dict = {
            "GROUP_ID": group_id,
            "PARENT_RULE_ID": parent_id,
            "RULE_TYPE_ID": rule_type_id,
            "RULE_NAME": nm,
            "RULE_SQL": sql_,
            "EFFECTIVE_START_DATE": start_dt_str,
            "EFFECTIVE_END_DATE": end_dt_str,
            "STATUS": st,
            "DESCRIPTION": desc_,
            "BUSINESS_JUSTIFICATION": just_,
            "IS_GLOBAL": is_g,
            "CRITICAL_RULE": is_c,
            "CRITICAL_SCOPE": scp_,
            "CDC_TYPE": cdc_val
        }

        # We'll need to call your add_rule(...) or update_rule(...).
        from your_brm_crud_module import add_rule, update_rule  # or wherever your code is
        # Or if you have them in the same file, just do 'add_rule(...)'.

        if self.is_update:
            # Insert the original RULE_ID, plus keep the original OWNER_GROUP if that was in old data
            rule_dict["RULE_ID"] = self.rule_data["RULE_ID"]
            # If you want to keep the old "OWNER_GROUP" from DB, do so:
            # (Alternatively, you can let user pick from group combo. It's up to your design.)
            # But let's assume the user picks from group combo, so we won't forcibly override it here.
            if "OWNER_GROUP" in self.rule_data:
                old_own = self.rule_data["OWNER_GROUP"]
                # if you want to let them change the group, remove this line:
                # rule_dict["OWNER_GROUP"] = old_own

            # Call update_rule
            try:
                update_rule(self.connection, rule_dict, "CurrentUser", self.user_group)
                QMessageBox.information(self, "Success", f"Rule '{nm}' updated successfully.")
                self.accept()  # close dialog
            except Exception as ex:
                QMessageBox.critical(self, "Update Error", str(ex))
        else:
            # It's a new rule
            # We assume the user picks from combo, so we set the "OWNER_GROUP" from the group combo if you want:
            # Typically, you might store group_id in BRM_RULES, not just the group name. 
            # But if your schema has OWNER_GROUP as text, you might do something else. For demonstration:
            c2 = self.connection.cursor()
            c2.execute("SELECT GROUP_NAME FROM BRM_RULE_GROUPS WHERE GROUP_ID=?", (group_id,))
            rowg = c2.fetchone()
            if rowg:
                gname_ = rowg[0]
                rule_dict["OWNER_GROUP"] = gname_
            else:
                rule_dict["OWNER_GROUP"] = "BG1"  # fallback

            try:
                new_id = add_rule(self.connection, rule_dict, "CurrentUser", self.user_group)
                QMessageBox.information(self, "Success", f"Rule '{nm}' created with ID={new_id}.")
                self.accept()
            except Exception as ex:
                QMessageBox.critical(self, "Add Error", str(ex))

def on_add_rule(self):
    dialog = RuleEditorDialog(
        connection=self.connection,
        user_group=self.user_group,
        rule_data=None,  # new
        parent=self
    )
    if dialog.exec_() == QDialog.Accepted:
        QMessageBox.information(self, "Success", "New rule added.")
        self.brm_dashboard.load_rules()

def on_update_rule(self):
    rids = self.brm_dashboard.get_selected_rule_ids()
    if len(rids) != 1:
        QMessageBox.warning(self, "Error", "Select exactly one rule.")
        return
    rid = rids[0]
    c = self.connection.cursor()
    c.execute("SELECT * FROM BRM_RULES WHERE RULE_ID=?", (rid,))
    old_row = c.fetchone()
    if not old_row:
        QMessageBox.warning(self, "Not Found", "No such rule.")
        return
    colnames = [desc[0] for desc in c.description]
    rule_data = dict(zip(colnames, old_row))

    dialog = RuleEditorDialog(
        connection=self.connection,
        user_group=self.user_group,
        rule_data=rule_data,
        parent=self
    )
    if dialog.exec_() == QDialog.Accepted:
        QMessageBox.information(self, "Updated", f"Rule {rid} updated.")
        self.brm_dashboard.load_rules()