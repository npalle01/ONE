def on_add_rule(self):
    """
    Opens a dialog to create a brand-new rule.
    Calls add_rule(...) if user confirms.
    """
    # Step 1: Create the dialog in "add mode"
    dialog = RuleEditorDialog(
        connection=self.connection,
        user_group=self.user_group,
        parent=self,
        rule_data=None  # means we're creating new
    )

    # Step 2: If user clicks Save (QDialog.Accepted), retrieve the rule_data
    if dialog.exec_() == QtWidgets.QDialog.Accepted:
        # The dialog itself calls add_rule(...) internally or returns new rule_data
        # or it might call a method in MainWindow. Variation depends on your approach.

        QMessageBox.information(self, "Success", "New rule added successfully.")
        self.brm_dashboard.load_rules()  # Refresh the table

def on_update_rule(self):
    """
    Opens a dialog to update an existing rule.
    Calls update_rule(...) if user confirms.
    """
    # Step 1: Get the selected rule ID(s)
    rids = self.brm_dashboard.get_selected_rule_ids()
    if len(rids) != 1:
        QMessageBox.warning(self, "Error", "Select exactly one rule to update.")
        return
    rule_id = rids[0]

    # Step 2: Fetch the existing rule from DB
    c = self.connection.cursor()
    c.execute("SELECT * FROM BRM_RULES WHERE RULE_ID=?", (rule_id,))
    old_row = c.fetchone()
    if not old_row:
        QMessageBox.warning(self, "Not Found", f"No rule found with ID={rule_id}.")
        return

    # Convert that row to a dictionary, so we can pass to RuleEditorDialog
    colnames = [desc[0] for desc in c.description]
    rule_data = dict(zip(colnames, old_row))

    # Step 3: Create the dialog in "update mode," passing the existing data
    dialog = RuleEditorDialog(
        connection=self.connection,
        user_group=self.user_group,
        parent=self,
        rule_data=rule_data  # so the dialog can pre-fill the fields
    )

    # Step 4: If user clicks Save, inside the dialog we call update_rule(...)
    if dialog.exec_() == QtWidgets.QDialog.Accepted:
        QMessageBox.information(self, "Updated", f"Rule ID={rule_id} updated successfully.")
        self.brm_dashboard.load_rules()  # Refresh