class RuleEditorDialog(QDialog):
    """
    Dialog for adding/updating a rule with additional details.
    Fields include:
      - Group
      - Parent Rule
      - Rule Name
      - Rule Type and Status
      - Start Date and End Date
      - CDC Type (None, full_load, incremental, upsert, insert)
      - Global Admin Only checkbox
      - Critical Rule checkbox
      - Critical Scope (None, Group, Cluster, Global)
      - Rule SQL, Description, Business Justification, and Encryption
    """
    def __init__(self, connection, user_group, rule_data=None, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_group = user_group
        self.rule_data = rule_data
        self.is_update = rule_data is not None
        self.rule_locked = False
        self.setWindowTitle("Update Rule" if self.is_update else "Add Rule")
        self.resize(900, 700)
        main_layout = QVBoxLayout(self)

        form_layout = QFormLayout()

        # Group selection
        self.group_combo = QComboBox()
        # Populate group options from database (example code)
        cur = self.connection.cursor()
        cur.execute("SELECT GROUP_ID, GROUP_NAME FROM BRM_RULE_GROUPS ORDER BY GROUP_NAME")
        for gid, gname in cur.fetchall():
            self.group_combo.addItem(f"{gname} (ID={gid})", gid)
        form_layout.addRow("Group:", self.group_combo)

        # Parent Rule selection
        self.parent_combo = QComboBox()
        self.parent_combo.addItem("(No Parent)", None)
        cur.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        for rid, rname in cur.fetchall():
            self.parent_combo.addItem(f"{rname} (ID={rid})", rid)
        form_layout.addRow("Parent Rule:", self.parent_combo)

        # Rule Name
        self.name_edit = QLineEdit()
        form_layout.addRow("Rule Name:", self.name_edit)

        # Rule Type and Status
        self.rule_type_combo = QComboBox()
        self.rule_type_combo.addItems(["Normal", "Data Validation", "Transformation", "Data Movement", "Other"])
        form_layout.addRow("Rule Type:", self.rule_type_combo)

        self.status_combo = QComboBox()
        self.status_combo.addItems(["Draft", "Under Approval", "Active", "Inactive", "Archived"])
        form_layout.addRow("Status:", self.status_combo)

        # Start Date and End Date
        self.start_date_edit = QDateTimeEdit(QDate.currentDate())
        self.start_date_edit.setCalendarPopup(True)
        self.start_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        form_layout.addRow("Start Date:", self.start_date_edit)

        self.end_date_edit = QDateTimeEdit(QDate.currentDate().addDays(30))
        self.end_date_edit.setCalendarPopup(True)
        self.end_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        form_layout.addRow("End Date:", self.end_date_edit)

        # CDC Type selection
        self.cdc_combo = QComboBox()
        self.cdc_combo.addItems(["None", "full_load", "incremental", "upsert", "insert"])
        form_layout.addRow("CDC Type:", self.cdc_combo)

        # Global Admin Only checkbox
        self.global_chk = QCheckBox("Global (Admin Only)")
        form_layout.addRow("", self.global_chk)

        # Critical Rule checkbox
        self.critical_chk = QCheckBox("Critical Rule")
        form_layout.addRow("", self.critical_chk)

        # Critical Scope selection
        self.critical_scope_combo = QComboBox()
        self.critical_scope_combo.addItems(["None", "Group", "Cluster", "Global"])
        form_layout.addRow("Critical Scope:", self.critical_scope_combo)

        # Rule SQL
        self.rule_sql_edit = QPlainTextEdit()
        self.rule_sql_edit.setPlaceholderText("Enter rule SQL (must return 1 for PASS)")
        form_layout.addRow("Rule SQL:", self.rule_sql_edit)

        # Description
        self.description_edit = QTextEdit()
        form_layout.addRow("Description:", self.description_edit)

        # Business Justification
        self.justification_edit = QTextEdit()
        form_layout.addRow("Business Justification:", self.justification_edit)

        # Encryption field with browse button
        enc_layout = QHBoxLayout()
        self.encryption_edit = QLineEdit()
        self.encryption_edit.setPlaceholderText("Enter encryption key or file path")
        browse_btn = QPushButton("Browse")
        browse_btn.clicked.connect(self.browse_encryption_file)
        enc_layout.addWidget(self.encryption_edit)
        enc_layout.addWidget(browse_btn)
        form_layout.addRow("Encryption:", enc_layout)

        main_layout.addLayout(form_layout)

        # Buttons
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("Save" if self.is_update else "Add")
        self.save_btn.clicked.connect(self.on_save)
        btn_layout.addWidget(self.save_btn)
        self.cancel_btn = QPushButton("Cancel")
        self.cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(self.cancel_btn)
        if self.is_update:
            self.lock_btn = QPushButton("Lock Rule")
            self.lock_btn.clicked.connect(self.lock_rule)
            btn_layout.addWidget(self.lock_btn)
            self.unlock_btn = QPushButton("Unlock Rule")
            self.unlock_btn.clicked.connect(self.unlock_rule)
            self.unlock_btn.setEnabled(False)
            btn_layout.addWidget(self.unlock_btn)
        btn_layout.addStretch()
        main_layout.addLayout(btn_layout)
        self.setLayout(main_layout)

        if self.is_update and self.rule_data:
            self.load_existing_rule(self.rule_data)

    def browse_encryption_file(self):
        path, _ = QFileDialog.getOpenFileName(self, "Select Encryption File", "", "All Files (*)")
        if path:
            self.encryption_edit.setText(path)

    def load_existing_rule(self, data):
        self.name_edit.setText(data.get("RULE_NAME", ""))
        self.rule_sql_edit.setPlainText(data.get("RULE_SQL", ""))
        self.description_edit.setPlainText(data.get("DESCRIPTION", ""))
        self.justification_edit.setPlainText(data.get("BUSINESS_JUSTIFICATION", ""))
        # Set group selection
        group = data.get("OWNER_GROUP", "Unknown")
        idx = self.group_combo.findText(group)
        if idx >= 0:
            self.group_combo.setCurrentIndex(idx)
        # Set parent rule
        parent = data.get("PARENT_RULE_ID")
        if parent:
            idx = self.parent_combo.findData(parent)
            if idx >= 0:
                self.parent_combo.setCurrentIndex(idx)
        # Set Rule Type and Status if available
        if "RULE_TYPE" in data:
            idx = self.rule_type_combo.findText(data["RULE_TYPE"], Qt.MatchFixedString)
            if idx >= 0:
                self.rule_type_combo.setCurrentIndex(idx)
        if "STATUS" in data:
            idx = self.status_combo.findText(data["STATUS"], Qt.MatchFixedString)
            if idx >= 0:
                self.status_combo.setCurrentIndex(idx)
        # Set Start and End Date
        if "EFFECTIVE_START_DATE" in data:
            try:
                dt = QDateTime.fromString(data["EFFECTIVE_START_DATE"], "yyyy-MM-dd HH:mm:ss")
                if dt.isValid():
                    self.start_date_edit.setDateTime(dt)
            except Exception:
                pass
        if "EFFECTIVE_END_DATE" in data and data["EFFECTIVE_END_DATE"]:
            try:
                dt = QDateTime.fromString(data["EFFECTIVE_END_DATE"], "yyyy-MM-dd HH:mm:ss")
                if dt.isValid():
                    self.end_date_edit.setDateTime(dt)
            except Exception:
                pass
        # Set CDC type
        if "CDC_TYPE" in data:
            idx = self.cdc_combo.findText(data["CDC_TYPE"], Qt.MatchFixedString)
            if idx >= 0:
                self.cdc_combo.setCurrentIndex(idx)
        # Global and Critical checkboxes
        self.global_chk.setChecked(data.get("IS_GLOBAL", 0) == 1)
        self.critical_chk.setChecked(data.get("CRITICAL_RULE", 0) == 1)
        # Critical scope
        if "CRITICAL_SCOPE" in data:
            idx = self.critical_scope_combo.findText(data["CRITICAL_SCOPE"], Qt.MatchFixedString)
            if idx >= 0:
                self.critical_scope_combo.setCurrentIndex(idx)
        # Encryption field
        self.encryption_edit.setText(data.get("ENCRYPTED_FILE_PATH", ""))

    def on_save(self):
        # If updating, ensure the rule is locked by the current user
        if self.is_update and not self.rule_locked:
            QMessageBox.warning(self, "Error", "Please lock the rule before saving updates.")
            return
        # Build a dictionary of rule data from the fields
        rule_data = {
            "GROUP_ID": self.group_combo.currentData(),
            "PARENT_RULE_ID": self.parent_combo.currentData(),
            "RULE_NAME": self.name_edit.text().strip(),
            "RULE_TYPE": self.rule_type_combo.currentText(),
            "STATUS": self.status_combo.currentText(),
            "EFFECTIVE_START_DATE": self.start_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss"),
            "EFFECTIVE_END_DATE": self.end_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss"),
            "CDC_TYPE": self.cdc_combo.currentText(),
            "IS_GLOBAL": 1 if self.global_chk.isChecked() else 0,
            "CRITICAL_RULE": 1 if self.critical_chk.isChecked() else 0,
            "CRITICAL_SCOPE": self.critical_scope_combo.currentText(),
            "RULE_SQL": self.rule_sql_edit.toPlainText().strip(),
            "DESCRIPTION": self.description_edit.toPlainText().strip(),
            "BUSINESS_JUSTIFICATION": self.justification_edit.toPlainText().strip(),
            "ENCRYPTED_FILE_PATH": self.encryption_edit.text().strip()
        }
        if self.is_update:
            rule_data["RULE_ID"] = self.rule_data["RULE_ID"]
            try:
                # Call your update function here (assumed to exist)
                update_rule_advanced(self.connection, rule_data, "CurrentUser", self.user_group)
                insert_audit_log(self.connection, "UPDATE", "BRM_RULES", rule_data["RULE_ID"], "CurrentUser", self.rule_data, rule_data)
                QMessageBox.information(self, "Updated", "Rule updated successfully.")
                self.unlock_rule()
                self.accept()
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Update failed: {e}")
        else:
            try:
                # Call your add rule function here (assumed to exist)
                new_id = add_rule_advanced(self.connection, rule_data, "CurrentUser", self.user_group)
                QMessageBox.information(self, "Created", f"Rule created successfully with ID {new_id}.")
                self.accept()
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Creation failed: {e}")

    def lock_rule(self):
        if not self.is_update:
            QMessageBox.warning(self, "Error", "Locking is only applicable for existing rules.")
            return
        try:
            rule_id = self.rule_data["RULE_ID"]
            success, msg = lock_rule_for_edit(self.connection, rule_id, "CurrentUser")
            if success:
                self.rule_locked = True
                self.lock_btn.setEnabled(False)
                self.unlock_btn.setEnabled(True)
                QMessageBox.information(self, "Locked", msg)
            else:
                QMessageBox.warning(self, "Lock Failed", msg)
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Lock error: {e}")

    def unlock_rule(self):
        if self.rule_locked:
            try:
                rule_id = self.rule_data["RULE_ID"]
                unlock_rule_for_edit(self.connection, rule_id, "CurrentUser")
                self.rule_locked = False
                self.lock_btn.setEnabled(True)
                self.unlock_btn.setEnabled(False)
                QMessageBox.information(self, "Unlocked", f"Rule {rule_id} unlocked.")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Unlock error: {e}")
                
                
# Inside your main window initialization code:
approval_perm_tab = ApprovalAndGroupPermissionTab(connection, logged_in_username, user_group)
self.tabs.addTab(approval_perm_tab, "Approvals & Permissions")

from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QFormLayout, QHBoxLayout, QLabel, QLineEdit, QComboBox,
    QDateTimeEdit, QPlainTextEdit, QTextEdit, QCheckBox, QPushButton, QFileDialog, QMessageBox
)
from PyQt5.QtCore import QDate, QDateTime
import json

class RuleEditorDialog(QDialog):
    """
    Advanced Rule Editor Dialog for Adding/Updating Rules.
    
    This dialog collects:
      • Group (from BRM_RULE_GROUPS)
      • Parent Rule (from BRM_RULES)
      • Rule Name
      • Rule Type (dropdown) and Status (dropdown)
      • Start Date and End Date (with calendar popups)
      • CDC Type (options: None, full_load, incremental, upsert, insert)
      • Global (Admin Only) checkbox
      • Critical Rule checkbox and Critical Scope (None, Group, Cluster, Global)
      • Rule SQL (must return 1 for PASS)
      • Description and Business Justification
      • Encryption (with browse button)
    
    On Save, if updating, the dialog requires that the rule be locked by the current user.
    It then calls update_rule_advanced; otherwise it calls add_rule_advanced.
    """
    def __init__(self, connection, user_group, rule_data=None, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_group = user_group
        self.rule_data = rule_data  # Existing rule data (dict) if updating
        self.is_update = rule_data is not None
        self.rule_locked = False  # Flag set when the rule is successfully locked
        self.setWindowTitle("Update Rule" if self.is_update else "Add Rule")
        self.resize(900, 700)
        self.setup_ui()
        if self.is_update and self.rule_data:
            self.load_existing_rule(self.rule_data)

    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        form_layout = QFormLayout()

        # Group selection
        self.group_combo = QComboBox()
        try:
            cur = self.connection.cursor()
            cur.execute("SELECT GROUP_ID, GROUP_NAME FROM BRM_RULE_GROUPS ORDER BY GROUP_NAME")
            for gid, gname in cur.fetchall():
                self.group_combo.addItem(f"{gname} (ID={gid})", gid)
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error loading groups: {e}")
        form_layout.addRow("Group:", self.group_combo)

        # Parent Rule selection
        self.parent_combo = QComboBox()
        self.parent_combo.addItem("(No Parent)", None)
        try:
            cur.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
            for rid, rname in cur.fetchall():
                self.parent_combo.addItem(f"{rname} (ID={rid})", rid)
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Error loading parent rules: {e}")
        form_layout.addRow("Parent Rule:", self.parent_combo)

        # Rule Name
        self.name_edit = QLineEdit()
        form_layout.addRow("Rule Name:", self.name_edit)

        # Rule Type and Status
        self.rule_type_combo = QComboBox()
        self.rule_type_combo.addItems(["Normal", "Data Validation", "Transformation", "Data Movement", "Other"])
        form_layout.addRow("Rule Type:", self.rule_type_combo)
        self.status_combo = QComboBox()
        self.status_combo.addItems(["Draft", "Under Approval", "Active", "Inactive", "Archived"])
        form_layout.addRow("Status:", self.status_combo)

        # Start Date and End Date
        self.start_date_edit = QDateTimeEdit(QDateTime.currentDateTime())
        self.start_date_edit.setCalendarPopup(True)
        self.start_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        form_layout.addRow("Start Date:", self.start_date_edit)
        self.end_date_edit = QDateTimeEdit(QDate.currentDate().addDays(30))
        self.end_date_edit.setCalendarPopup(True)
        self.end_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        form_layout.addRow("End Date:", self.end_date_edit)

        # CDC Type selection
        self.cdc_combo = QComboBox()
        self.cdc_combo.addItems(["None", "full_load", "incremental", "upsert", "insert"])
        form_layout.addRow("CDC Type:", self.cdc_combo)

        # Global (Admin Only) checkbox
        self.global_chk = QCheckBox("Global Rule (Admin Only)")
        form_layout.addRow("", self.global_chk)

        # Critical Rule checkbox and Critical Scope
        self.critical_chk = QCheckBox("Critical Rule")
        form_layout.addRow("", self.critical_chk)
        self.critical_scope_combo = QComboBox()
        self.critical_scope_combo.addItems(["None", "Group", "Cluster", "Global"])
        form_layout.addRow("Critical Scope:", self.critical_scope_combo)

        # Rule SQL
        self.rule_sql_edit = QPlainTextEdit()
        self.rule_sql_edit.setPlaceholderText("Enter rule SQL (must return 1 for PASS)")
        form_layout.addRow("Rule SQL:", self.rule_sql_edit)

        # Description
        self.description_edit = QTextEdit()
        form_layout.addRow("Description:", self.description_edit)

        # Business Justification
        self.justification_edit = QTextEdit()
        form_layout.addRow("Business Justification:", self.justification_edit)

        # Encryption (with browse button)
        enc_layout = QHBoxLayout()
        self.encryption_edit = QLineEdit()
        self.encryption_edit.setPlaceholderText("Enter encryption key or file path")
        self.browse_btn = QPushButton("Browse")
        self.browse_btn.clicked.connect(self.browse_encryption_file)
        enc_layout.addWidget(self.encryption_edit)
        enc_layout.addWidget(self.browse_btn)
        form_layout.addRow("Encryption:", enc_layout)

        main_layout.addLayout(form_layout)

        # Buttons for Save, Cancel, and (if updating) Lock/Unlock
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("Update" if self.is_update else "Add")
        self.save_btn.clicked.connect(self.on_save)
        btn_layout.addWidget(self.save_btn)
        self.cancel_btn = QPushButton("Cancel")
        self.cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(self.cancel_btn)
        if self.is_update:
            self.lock_btn = QPushButton("Lock Rule")
            self.lock_btn.clicked.connect(self.lock_rule)
            btn_layout.addWidget(self.lock_btn)
            self.unlock_btn = QPushButton("Unlock Rule")
            self.unlock_btn.clicked.connect(self.unlock_rule)
            self.unlock_btn.setEnabled(False)
            btn_layout.addWidget(self.unlock_btn)
        btn_layout.addStretch()
        main_layout.addLayout(btn_layout)

        self.setLayout(main_layout)

    def browse_encryption_file(self):
        path, _ = QFileDialog.getOpenFileName(self, "Select Encryption File", "", "All Files (*)")
        if path:
            self.encryption_edit.setText(path)

    def load_existing_rule(self, data):
        self.name_edit.setText(data.get("RULE_NAME", ""))
        self.rule_sql_edit.setPlainText(data.get("RULE_SQL", ""))
        self.description_edit.setPlainText(data.get("DESCRIPTION", ""))
        self.justification_edit.setPlainText(data.get("BUSINESS_JUSTIFICATION", ""))
        # Set Group based on OWNER_GROUP field
        group = data.get("OWNER_GROUP", "")
        idx = self.group_combo.findText(group)
        if idx >= 0:
            self.group_combo.setCurrentIndex(idx)
        # Set Parent Rule if available
        parent = data.get("PARENT_RULE_ID")
        if parent:
            idx = self.parent_combo.findData(parent)
            if idx >= 0:
                self.parent_combo.setCurrentIndex(idx)
        # Set Rule Type and Status if available
        if "RULE_TYPE" in data:
            idx = self.rule_type_combo.findText(data["RULE_TYPE"])
            if idx >= 0:
                self.rule_type_combo.setCurrentIndex(idx)
        if "STATUS" in data:
            idx = self.status_combo.findText(data["STATUS"])
            if idx >= 0:
                self.status_combo.setCurrentIndex(idx)
        # Set Start and End Dates if available (assumes they are stored in the correct format)
        if "EFFECTIVE_START_DATE" in data:
            dt = QDateTime.fromString(data["EFFECTIVE_START_DATE"], "yyyy-MM-dd HH:mm:ss")
            if dt.isValid():
                self.start_date_edit.setDateTime(dt)
        if "EFFECTIVE_END_DATE" in data and data["EFFECTIVE_END_DATE"]:
            dt = QDateTime.fromString(data["EFFECTIVE_END_DATE"], "yyyy-MM-dd HH:mm:ss")
            if dt.isValid():
                self.end_date_edit.setDateTime(dt)
        # CDC Type
        if "CDC_TYPE" in data:
            idx = self.cdc_combo.findText(data["CDC_TYPE"])
            if idx >= 0:
                self.cdc_combo.setCurrentIndex(idx)
        # Global and Critical checkboxes
        self.global_chk.setChecked(data.get("IS_GLOBAL", 0) == 1)
        self.critical_chk.setChecked(data.get("CRITICAL_RULE", 0) == 1)
        # Critical Scope
        if "CRITICAL_SCOPE" in data:
            idx = self.critical_scope_combo.findText(data["CRITICAL_SCOPE"])
            if idx >= 0:
                self.critical_scope_combo.setCurrentIndex(idx)
        # Encryption
        self.encryption_edit.setText(data.get("ENCRYPTED_FILE_PATH", ""))

    def on_save(self):
        # For update, ensure the rule is locked before saving
        if self.is_update and not self.rule_locked:
            QMessageBox.warning(self, "Lock Required", "Please lock the rule before saving updates.")
            return

        rule_data = {
            "GROUP_ID": self.group_combo.currentData(),
            "PARENT_RULE_ID": self.parent_combo.currentData(),
            "RULE_TYPE": self.rule_type_combo.currentText(),
            "RULE_NAME": self.name_edit.text().strip(),
            "RULE_SQL": self.rule_sql_edit.toPlainText().strip(),
            "DESCRIPTION": self.description_edit.toPlainText().strip(),
            "BUSINESS_JUSTIFICATION": self.justification_edit.toPlainText().strip(),
            "EFFECTIVE_START_DATE": self.start_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss"),
            "EFFECTIVE_END_DATE": self.end_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss"),
            "CDC_TYPE": self.cdc_combo.currentText(),
            "IS_GLOBAL": 1 if self.global_chk.isChecked() else 0,
            "CRITICAL_RULE": 1 if self.critical_chk.isChecked() else 0,
            "CRITICAL_SCOPE": self.critical_scope_combo.currentText(),
            "ENCRYPTED_FILE_PATH": self.encryption_edit.text().strip()
        }
        if self.is_update:
            rule_data["RULE_ID"] = self.rule_data["RULE_ID"]
            try:
                # Call your update function (assumed to be defined)
                update_rule_advanced(self.connection, rule_data, "CurrentUser", self.user_group)
                insert_audit_log(self.connection, "UPDATE", "BRM_RULES", rule_data["RULE_ID"], "CurrentUser", self.rule_data, rule_data)
                QMessageBox.information(self, "Updated", "Rule updated successfully. Approval process restarted.")
                self.unlock_rule()  # Optionally unlock after update.
                self.accept()
            except Exception as e:
                QMessageBox.critical(self, "Update Error", f"Rule update failed: {e}")
        else:
            try:
                new_rule_id = add_rule_advanced(self.connection, rule_data, "CurrentUser", self.user_group)
                QMessageBox.information(self, "Created", f"Rule created successfully with ID {new_rule_id}.")
                self.accept()
            except Exception as e:
                QMessageBox.critical(self, "Creation Error", f"Rule creation failed: {e}")

    def lock_rule(self):
        if not self.is_update:
            QMessageBox.warning(self, "Error", "Locking is only applicable for existing rules.")
            return
        try:
            rule_id = self.rule_data["RULE_ID"]
            success, msg = lock_rule_for_edit(self.connection, rule_id, "CurrentUser")
            if success:
                self.rule_locked = True
                self.lock_btn.setEnabled(False)
                self.unlock_btn.setEnabled(True)
                QMessageBox.information(self, "Locked", msg)
            else:
                QMessageBox.warning(self, "Lock Failed", msg)
        except Exception as e:
            QMessageBox.critical(self, "Lock Error", f"Error locking rule: {e}")

    def unlock_rule(self):
        if self.rule_locked:
            try:
                rule_id = self.rule_data["RULE_ID"]
                unlock_rule_for_edit(self.connection, rule_id, "CurrentUser")
                self.rule_locked = False
                self.lock_btn.setEnabled(True)
                self.unlock_btn.setEnabled(False)
                QMessageBox.information(self, "Unlocked", f"Rule {rule_id} unlocked.")
            except Exception as e:
                QMessageBox.critical(self, "Unlock Error", f"Error unlocking rule: {e}")

# Example usage:
# In your main window, you might call:
#
# dlg = RuleEditorDialog(connection, user_group, rule_data=None)
# if dlg.exec_() == QDialog.Accepted:
#     # Refresh rule list, etc.
#
# For updates, pass a valid rule_data dictionary.