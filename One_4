#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_advanced_decision_tables.py
Description:
  Provides comprehensive management for advanced decision tables, including:
    • Creating, editing, deleting a decision table (table name, description, optional decision_query).
    • Running/executing the decision table logic in a dry-run transaction to confirm pass/fail.
    • Logging impacted records and storing pass/fail results in an optional log table (e.g., DECISION_TABLE_EXEC_LOGS).
    • UI: 'DecisionTableManager' as a QDialog or QWidget, table listing, plus Add/Edit/Delete/Run buttons.
"""

import sys
import json
import logging
import pyodbc
import sqlparse
from datetime import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QTableWidget,
    QTableWidgetItem, QMessageBox, QInputDialog, QDialog, QPlainTextEdit
)

# Suppose we have references to brm_core_foundation for logger, fetch_all_dict, etc.
from brm_core_foundation import (
    logger, fetch_all_dict, fetch_one_dict, insert_audit_log
)

###############################################################################
# 1) HELPER: simulate_decision_table_execution
###############################################################################
def simulate_decision_table_execution(conn, dt_id:int):
    """
    For demonstration: we look up DECISION_TABLES table => get DECISION_QUERY => run it in a transaction => 
    if the first row’s first col is 1 => pass => record_count = # of rows => else fail => rollback.
    Return (pass_flag, message, record_count).
    """
    c=conn.cursor()
    # fetch the table info
    c.execute("""
        SELECT TABLE_NAME, DESCRIPTION, DECISION_QUERY
        FROM DECISION_TABLES
        WHERE DECISION_TABLE_ID=?
    """,(dt_id,))
    row=c.fetchone()
    if not row:
        raise ValueError(f"Decision table {dt_id} not found.")
    table_name, desc_, query_ = row
    if not query_:
        return (True, "No query => treat as pass", 0)

    # run in a transaction
    c.execute("BEGIN TRANSACTION")
    pass_flag=False
    msg=""
    rec_count=0
    try:
        c.execute(query_)
        rows = c.fetchall()
        rec_count=len(rows)
        if rows:
            # interpret rows[0][0]
            val=rows[0][0]
            pass_flag=(val==1)
            msg=f"Returned: {val}"
        else:
            pass_flag=True
            msg="No rows => pass"
        # always rollback => we are in “dry-run”
        c.execute("ROLLBACK")
    except Exception as ex:
        c.execute("ROLLBACK")
        pass_flag=False
        msg=str(ex)

    return (pass_flag,msg,rec_count)


###############################################################################
# 2) DECISION TABLE MANAGER UI
###############################################################################
class DecisionTableManager(QDialog):
    """
    A QDialog (or could be a QWidget) that lists all decision tables, 
    allows Add/Edit/Delete, and a Run method that calls `simulate_decision_table_execution`.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Decision Table Manager – BRM Tool")
        self.resize(800,450)
        self.init_ui()
        self.load_decision_tables()

    def init_ui(self):
        layout=QVBoxLayout(self)

        self.dt_table=QTableWidget(0,4)
        self.dt_table.setHorizontalHeaderLabels(["DT_ID","Table Name","Description","Query"])
        self.dt_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.dt_table)

        btn_h=QHBoxLayout()
        add_btn=QPushButton("Add Decision Table")
        add_btn.clicked.connect(self.add_decision_table)
        btn_h.addWidget(add_btn)

        edit_btn=QPushButton("Edit Decision Table")
        edit_btn.clicked.connect(self.edit_decision_table)
        btn_h.addWidget(edit_btn)

        del_btn=QPushButton("Delete Decision Table")
        del_btn.clicked.connect(self.delete_decision_table)
        btn_h.addWidget(del_btn)

        run_btn=QPushButton("Run Decision Table")
        run_btn.clicked.connect(self.run_decision_table)
        btn_h.addWidget(run_btn)

        ref_btn=QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_decision_tables)
        btn_h.addWidget(ref_btn)

        btn_h.addStretch()
        layout.addLayout(btn_h)

        self.setLayout(layout)

    def load_decision_tables(self):
        self.dt_table.setRowCount(0)
        c=self.connection.cursor()
        c.execute("""
            SELECT DECISION_TABLE_ID, TABLE_NAME, DESCRIPTION, DECISION_QUERY
            FROM DECISION_TABLES
            ORDER BY DECISION_TABLE_ID
        """)
        rows = c.fetchall()
        for row in rows:
            r_i=self.dt_table.rowCount()
            self.dt_table.insertRow(r_i)
            for col_i,val in enumerate(row):
                self.dt_table.setItem(r_i,col_i,QTableWidgetItem(str(val) if val else ""))

    def add_decision_table(self):
        nm, ok = QInputDialog.getText(self,"Add Decision Table","Enter table name:")
        if not ok or not nm.strip():
            return
        desc, ok2 = QInputDialog.getMultiLineText(self,"Description","Optional description:")
        if not ok2:
            desc=""
        query_,ok3 = QInputDialog.getMultiLineText(self,"Decision Query","SQL that returns 1 => pass:")
        if not ok3:
            query_=""
        try:
            c=self.connection.cursor()
            c.execute("""
                INSERT INTO DECISION_TABLES(TABLE_NAME, DESCRIPTION, DECISION_QUERY)
                VALUES(?,?,?)
            """,(nm.strip(), desc.strip(), query_.strip()))
            self.connection.commit()
            QMessageBox.information(self,"Added","Decision table created.")
            self.load_decision_tables()
        except Exception as ex:
            QMessageBox.critical(self,"Error",f"Error adding table: {ex}")

    def edit_decision_table(self):
        row = self.dt_table.currentRow()
        if row<0:
            QMessageBox.warning(self,"No Selection","No decision table selected.")
            return
        dt_id_item = self.dt_table.item(row,0)
        if not dt_id_item:
            return
        dt_id=int(dt_id_item.text())
        # fetch current details
        c=self.connection.cursor()
        c.execute("""
            SELECT TABLE_NAME, DESCRIPTION, DECISION_QUERY
            FROM DECISION_TABLES
            WHERE DECISION_TABLE_ID=?
        """,(dt_id,))
        row2=c.fetchone()
        if not row2:
            QMessageBox.warning(self,"Not Found","Decision table missing.")
            return
        curr_nm=row2[0] or ""
        curr_desc=row2[1] or ""
        curr_query=row2[2] or ""

        new_nm, ok = QInputDialog.getText(self,"Edit Decision Table","New name:", text=curr_nm)
        if not ok or not new_nm.strip():
            return
        new_desc, ok2 = QInputDialog.getMultiLineText(self,"Description","Edit description:", text=curr_desc)
        if not ok2:
            new_desc=curr_desc
        new_query, ok3 = QInputDialog.getMultiLineText(self,"Decision Query","Edit SQL:", text=curr_query)
        if not ok3:
            new_query=curr_query
        try:
            c.execute("""
                UPDATE DECISION_TABLES
                SET TABLE_NAME=?, DESCRIPTION=?, DECISION_QUERY=?
                WHERE DECISION_TABLE_ID=?
            """,(new_nm.strip(), new_desc.strip(), new_query.strip(), dt_id))
            self.connection.commit()
            QMessageBox.information(self,"Updated","Decision table updated.")
            self.load_decision_tables()
        except Exception as ex:
            QMessageBox.critical(self,"Error",f"Error updating table: {ex}")

    def delete_decision_table(self):
        row=self.dt_table.currentRow()
        if row<0:
            QMessageBox.warning(self,"No Selection","No decision table selected.")
            return
        dt_id_item=self.dt_table.item(row,0)
        if not dt_id_item:
            return
        dt_id=int(dt_id_item.text())
        confirm=QMessageBox.question(self,"Confirm",f"Delete decision table {dt_id}?")
        if confirm!=QMessageBox.Yes:
            return
        try:
            c=self.connection.cursor()
            c.execute("DELETE FROM DECISION_TABLES WHERE DECISION_TABLE_ID=?",(dt_id,))
            self.connection.commit()
            QMessageBox.information(self,"Deleted","Decision table removed.")
            self.load_decision_tables()
        except Exception as ex:
            QMessageBox.critical(self,"Error",f"Error deleting table: {ex}")

    def run_decision_table(self):
        """
        Pick the selected row => run simulate_decision_table_execution => show pass/fail + record count
        """
        row=self.dt_table.currentRow()
        if row<0:
            QMessageBox.warning(self,"None","No decision table selected.")
            return
        it=self.dt_table.item(row,0)
        if not it:
            return
        dt_id=int(it.text())
        try:
            (okflag, msg, rec_count)=simulate_decision_table_execution(self.connection, dt_id)
            status="PASS" if okflag else "FAIL"
            result_str=(
                f"DecisionTable {dt_id} => {status}\n"
                f"Message: {msg}\n"
                f"Rows impacted: {rec_count}"
            )
            QMessageBox.information(self,"Execution Result",result_str)
        except Exception as ex:
            QMessageBox.critical(self,"Execution Error",f"Error: {ex}")