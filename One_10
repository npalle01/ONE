#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_enhanced_workflow_pipeline.py

Description:
  Provides advanced workflow and pipeline features for the BRM Tool:
    • Rule Change Impact Analysis:
       - BFS/DFS to find all children or dependent schedules; display them on rule update.
       - Optionally log or block if critical.
    • Branching / Forking Approvals:
       - If rule fails at stage X, fork into variants (A, B, C), each with separate approvals.
       - Extended data model: BRM_RULE_APPROVALS might store a 'FORK_PARENT' or 'FORK_LABEL'.
    • Automated ETL / Data Pipeline Integrations:
       - A PipelineDesignerTab to create sequences of BFS runs or schedule triggers.
       - Node-based UI that allows user to drag rules, link them, set conditions (like mini-orchestrator).
    • Modern / Flat / Material Theme:
       - A function apply_modern_theme() to set a QSS for a cleaner aesthetic.

This module integrates with:
  - brm_core_foundation for DB, logging, etc.
  - brm_rule_engine BFS adjacency for impact analysis.
  - brm_simulation_scheduler or scheduling logic for pipeline triggers.
  - brm_advanced_approvals_and_lineage for multi-step approvals (we add forking).
"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, json, re, logging, time
from datetime import datetime, timedelta
from collections import deque
import pyodbc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QLineEdit, QMessageBox,
    QDialog, QGraphicsView, QGraphicsScene, QGraphicsItem, QInputDialog
)

logger = logging.getLogger("brm_enhanced_workflow_pipeline")

def find_downstream_impact_on_update(conn, rule_id):
    # Using BFS to find all child rules affected by the update.
    c = conn.cursor()
    c.execute("SELECT RULE_ID, PARENT_RULE_ID FROM BRM_RULES")
    rows = c.fetchall()
    adjacency = {}
    for rid, pid in rows:
        if pid:
            adjacency.setdefault(pid, set()).add(rid)
    visited = set()
    queue = [rule_id]
    while queue:
        current = queue.pop(0)
        if current in visited:
            continue
        visited.add(current)
        if current in adjacency:
            queue.extend(adjacency[current])
    # Exclude the updated rule itself.
    visited.discard(rule_id)
    # Get schedules referencing any of these rules.
    schedules = []
    if visited:
        placeholders = ",".join("?" for _ in visited)
        c.execute(f"SELECT SCHEDULE_ID FROM RULE_SCHEDULES WHERE RULE_ID IN ({placeholders})", tuple(visited))
        schedules = [r[0] for r in c.fetchall()]
    return {"child_rules": list(visited), "schedules": schedules}

def display_impact_warning_if_any(conn, rule_id):
    impact = find_downstream_impact_on_update(conn, rule_id)
    child_count = len(impact["child_rules"])
    sched_count = len(impact["schedules"])
    if child_count == 0 and sched_count == 0:
        return True
    msg = f"Updating rule {rule_id} will impact {child_count} child rule(s) and {sched_count} schedule(s). Continue?"
    return (QMessageBox.question(None, "Impact Analysis", msg, QMessageBox.Yes | QMessageBox.No) == QMessageBox.Yes)

def fork_rule_approvals(conn, rule_id, fork_labels):
    c = conn.cursor()
    for label in fork_labels:
        c.execute("INSERT INTO BRM_RULE_FORKS(RULE_ID, FORK_LABEL, CREATED_TIMESTAMP) VALUES(?, ?, GETDATE())", (rule_id, label))
    conn.commit()

def mark_rule_fork_failed(conn, rule_id, fork_label):
    c = conn.cursor()
    c.execute("UPDATE BRM_RULE_FORKS SET FORK_STATUS='FAILED' WHERE RULE_ID=? AND FORK_LABEL=?", (rule_id, fork_label))
    conn.commit()

class PipelineNodeItem(QtWidgets.QGraphicsItem):
    def __init__(self, node_id, node_type, label):
        super().__init__()
        self.node_id = node_id
        self.node_type = node_type
        self.label = label
        self.rect = QtCore.QRectF(0, 0, 120, 60)
        self.setFlags(QtWidgets.QGraphicsItem.ItemIsMovable | QtWidgets.QGraphicsItem.ItemIsSelectable)
    def boundingRect(self):
        return self.rect.adjusted(-2, -2, 2, 2)
    def paint(self, painter, option, widget=None):
        painter.setPen(QtGui.QPen(Qt.black, 2))
        painter.setBrush(QtGui.QBrush(QtGui.QColor("#E0E0E0")))
        painter.drawRoundedRect(self.rect, 8, 8)
        painter.drawText(self.rect, Qt.AlignCenter, f"{self.node_type}\n{self.label}")

class PipelineEdgeItem(QtWidgets.QGraphicsLineItem):
    def __init__(self, source, target, condition=None):
        super().__init__()
        self.source = source
        self.target = target
        self.condition = condition
        self.setPen(QtGui.QPen(Qt.darkGray, 2))
        self.adjust()
    def adjust(self):
        sp = self.source.sceneBoundingRect().center()
        tp = self.target.sceneBoundingRect().center()
        self.setLine(sp.x(), sp.y(), tp.x(), tp.y())
    def paint(self, painter, option, widget=None):
        self.adjust()
        super().paint(painter, option, widget)
        if self.condition:
            mid_x = (self.line().x1() + self.line().x2()) / 2
            mid_y = (self.line().y1() + self.line().y2()) / 2
            painter.setPen(QtGui.QPen(Qt.darkGray, 1))
            painter.drawText(mid_x, mid_y, self.condition)

class PipelineDesignerTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.pipeline_id = None
        self.init_ui()
        self.load_pipeline_list()
    def init_ui(self):
        layout = QVBoxLayout(self)
        top_h = QHBoxLayout()
        self.pipeline_combo = QComboBox()
        top_h.addWidget(QLabel("Select Pipeline:"))
        top_h.addWidget(self.pipeline_combo)
        load_btn = QPushButton("Load Pipeline")
        load_btn.clicked.connect(self.load_pipeline)
        top_h.addWidget(load_btn)
        new_btn = QPushButton("New Pipeline")
        new_btn.clicked.connect(self.create_pipeline)
        top_h.addWidget(new_btn)
        del_btn = QPushButton("Delete Pipeline")
        del_btn.clicked.connect(self.delete_pipeline)
        top_h.addWidget(del_btn)
        top_h.addStretch()
        layout.addLayout(top_h)
        self.scene = QtWidgets.QGraphicsScene(self)
        self.view = QtWidgets.QGraphicsView(self.scene)
        self.view.setRenderHint(QtGui.QPainter.Antialiasing)
        self.view.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)
        layout.addWidget(self.view)
        bot_h = QHBoxLayout()
        node_btn = QPushButton("Add BFS Node")
        node_btn.clicked.connect(self.add_bfs_node)
        bot_h.addWidget(node_btn)
        run_btn = QPushButton("Run Pipeline")
        run_btn.clicked.connect(self.run_pipeline)
        bot_h.addWidget(run_btn)
        bot_h.addStretch()
        layout.addLayout(bot_h)
        self.setLayout(layout)
    def load_pipeline_list(self):
        self.pipeline_combo.clear()
        c = self.connection.cursor()
        c.execute("SELECT PIPELINE_ID, PIPELINE_NAME FROM BRM_PIPELINES ORDER BY PIPELINE_ID")
        for pid, pnm in c.fetchall():
            self.pipeline_combo.addItem(f"{pnm} (ID={pid})", pid)
    def load_pipeline(self):
        pid = self.pipeline_combo.currentData()
        if not pid:
            return
        self.pipeline_id = pid
        self.scene.clear()
        c = self.connection.cursor()
        c.execute("SELECT NODE_ID, NODE_TYPE, NODE_LABEL, POS_X, POS_Y FROM BRM_PIPELINE_NODES WHERE PIPELINE_ID=?", (pid,))
        node_map = {}
        for nid, ntype, nlabel, px, py in c.fetchall():
            item = PipelineNodeItem(nid, ntype, nlabel)
            item.setPos(px or 50, py or 50)
            self.scene.addItem(item)
            node_map[nid] = item
        c.execute("SELECT EDGE_ID, SOURCE_NODE_ID, TARGET_NODE_ID, CONDITION_LABEL FROM BRM_PIPELINE_EDGES WHERE PIPELINE_ID=?", (pid,))
        for eid, snid, tnid, cond in c.fetchall():
            if snid in node_map and tnid in node_map:
                edge = PipelineEdgeItem(node_map[snid], node_map[tnid], cond)
                self.scene.addItem(edge)
        self.scene.setSceneRect(self.scene.itemsBoundingRect())
        self.view.fitInView(self.scene.itemsBoundingRect(), Qt.KeepAspectRatio)
    def create_pipeline(self):
        name, ok = QInputDialog.getText(self, "New Pipeline", "Pipeline name:")
        if not ok or not name.strip():
            return
        c = self.connection.cursor()
        c.execute("INSERT INTO BRM_PIPELINES(PIPELINE_NAME, CREATED_TIMESTAMP) VALUES(?, GETDATE())", (name.strip(),))
        self.connection.commit()
        QMessageBox.information(self, "Created", f"Pipeline '{name.strip()}' created.")
        self.load_pipeline_list()
    def delete_pipeline(self):
        pid = self.pipeline_combo.currentData()
        if not pid:
            return
        if QMessageBox.question(self, "Confirm", f"Delete pipeline ID={pid}?") != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        c.execute("DELETE FROM BRM_PIPELINE_EDGES WHERE PIPELINE_ID=?", (pid,))
        c.execute("DELETE FROM BRM_PIPELINE_NODES WHERE PIPELINE_ID=?", (pid,))
        c.execute("DELETE FROM BRM_PIPELINES WHERE PIPELINE_ID=?", (pid,))
        self.connection.commit()
        QMessageBox.information(self, "Deleted", f"Pipeline {pid} removed.")
        self.load_pipeline_list()
        self.scene.clear()
        self.pipeline_id = None
    def add_bfs_node(self):
        if not self.pipeline_id:
            QMessageBox.warning(self, "None", "No pipeline loaded.")
            return
        node_type = "BFS"
        node_label, ok = QInputDialog.getText(self, "Node Label", "Enter BFS node label:")
        if not ok or not node_label.strip():
            return
        c = self.connection.cursor()
        c.execute("INSERT INTO BRM_PIPELINE_NODES(PIPELINE_ID, NODE_TYPE, NODE_LABEL, POS_X, POS_Y) OUTPUT INSERTED.NODE_ID VALUES(?,?,?,?,?)",
                  (self.pipeline_id, node_type, node_label, 100, 100))
        nid = c.fetchone()[0]
        self.connection.commit()
        item = PipelineNodeItem(nid, node_type, node_label)
        item.setPos(100, 100)
        self.scene.addItem(item)
    def run_pipeline(self):
        QMessageBox.information(self, "Pipeline", "Pipeline run initiated. (Stub)")

def apply_modern_theme(app):
    qss = """
    QWidget { font-family: "Segoe UI", Arial; font-size: 10pt; background-color: #F0F0F0; }
    QLineEdit, QPlainTextEdit, QTextEdit, QComboBox, QTableWidget, QTreeWidget { background-color: #FFFFFF; border: 1px solid #C8C8C8; border-radius: 4px; }
    QPushButton { background-color: #007ACC; color: white; border: none; padding: 5px 12px; border-radius: 4px; }
    QPushButton:hover { background-color: #005A9E; }
    QTabWidget::pane { border: 1px solid #CCCCCC; }
    QTabBar::tab:selected { background-color: #FFFFFF; font-weight: bold; }
    """
    app.setStyleSheet(qss)
