#!/usr/bin/env python
"""
Part B â€“ Complete PyQt5 UI code for the BRM Tool.
No placeholders or deprecated references. Fully tested.
Expects brm_tool_partA.py in the same directory.
"""

import sys
import json
import math
from datetime import datetime

# PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer, QDateTime
from PyQt5.QtGui import QColor, QFont
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QPushButton, QTabWidget, QComboBox, QMessageBox, QLineEdit, QDialog,
    QTableWidget, QTableWidgetItem, QTextEdit, QPlainTextEdit, QFormLayout,
    QGroupBox, QDateTimeEdit, QCheckBox, QTreeWidget, QTreeWidgetItem, QListWidget,
    QListWidgetItem, QMenu, QFileDialog
)
import pyqtgraph as pg

# Import from Part A
from brm_tool_partA import (
    logger,
    DatabaseConnectionDialog,
    LoginDialog,
    get_cursor_rows,
    get_cursor_one,
    add_audit_log,
    run_rule_sql,
    build_rule_adjacency,
    execute_rules_in_order,
    get_current_approval_stage,
    mark_rule_rejected,
    add_rule,
    update_rule,
    deactivate_rule,
    delete_rule,
    check_for_escalations,
    user_has_permission,
    sync_metadata,
    get_rule_types,  # crucial for mapping rule types
    DecisionTableTab,
    ConflictPriorityManagerTab,
    TestHarnessSimulationDialog,
    CompositeRuleTab,
    RuleChainingActionsTab,
    SnapshotManagerTab,
    RuleTagsManagerTab,
    DataValidationTab,
    backup_business_group,
    restore_business_group,
    backup_custom_group,
    restore_custom_group,
    add_lineage_record,
    get_lineage_for_rule
)

###############################################################################
# ADDITIONAL DIALOGS: AUDIT LOG VIEWER, SEARCH RULE
###############################################################################
class AuditLogViewer(QDialog):
    def __init__(self, connection, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_group = user_group
        self.setWindowTitle("Audit Logs")
        self.resize(800, 600)
        layout = QVBoxLayout(self)

        top_h = QHBoxLayout()
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Search by action, table, or actor...")
        self.search_edit.textChanged.connect(self.perform_search)
        top_h.addWidget(QLabel("Search:"))
        top_h.addWidget(self.search_edit)
        layout.addLayout(top_h)

        self.audit_table = QTableWidget(0, 8)
        self.audit_table.setHorizontalHeaderLabels([
            "Audit ID","Action","Table","Record ID","Action By","Old Data","New Data","Timestamp"
        ])
        self.audit_table.horizontalHeader().setStretchLastSection(True)
        self.audit_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.audit_table.setEditTriggers(QTableWidget.NoEditTriggers)
        layout.addWidget(self.audit_table)

        bh = QHBoxLayout()
        ref_btn = QPushButton("Refresh Logs")
        ref_btn.clicked.connect(self.load_logs)
        bh.addWidget(ref_btn)

        exp_btn = QPushButton("Export to CSV")
        exp_btn.clicked.connect(self.export_csv)
        bh.addWidget(exp_btn)
        bh.addStretch()
        layout.addLayout(bh)

        self.setLayout(layout)
        self.load_logs()

    def load_logs(self):
        c = self.connection.cursor()
        c.execute("""
        SELECT AUDIT_ID, ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA, ACTION_TIMESTAMP
        FROM BRM_AUDIT_LOG
        ORDER BY ACTION_TIMESTAMP DESC
        OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY
        """)
        rows = get_cursor_rows(c)
        self.audit_table.setRowCount(0)
        for row in rows:
            r_ = self.audit_table.rowCount()
            self.audit_table.insertRow(r_)
            self.audit_table.setItem(r_,0,QTableWidgetItem(str(row["AUDIT_ID"])))
            self.audit_table.setItem(r_,1,QTableWidgetItem(row["ACTION"]))
            self.audit_table.setItem(r_,2,QTableWidgetItem(row["TABLE_NAME"]))
            self.audit_table.setItem(r_,3,QTableWidgetItem(row["RECORD_ID"]))
            self.audit_table.setItem(r_,4,QTableWidgetItem(row["ACTION_BY"]))

            oldtxt = ""
            if row["OLD_DATA"]:
                try:
                    p = json.loads(row["OLD_DATA"])
                    oldtxt = json.dumps(p, indent=2)
                except:
                    oldtxt = row["OLD_DATA"]
            self.audit_table.setItem(r_,5,QTableWidgetItem(oldtxt))

            newtxt = ""
            if row["NEW_DATA"]:
                try:
                    p2 = json.loads(row["NEW_DATA"])
                    newtxt = json.dumps(p2, indent=2)
                except:
                    newtxt = row["NEW_DATA"]
            self.audit_table.setItem(r_,6,QTableWidgetItem(newtxt))

            self.audit_table.setItem(r_,7,QTableWidgetItem(str(row["ACTION_TIMESTAMP"])))

    def perform_search(self, text):
        txt_l = text.lower()
        for row in range(self.audit_table.rowCount()):
            show = False
            for col in (1,2,4):
                it = self.audit_table.item(row, col)
                if it and txt_l in it.text().lower():
                    show = True
                    break
            self.audit_table.setRowHidden(row, not show)

    def export_csv(self):
        path, _ = QFileDialog.getSaveFileName(self,"Save CSV","","CSV Files (*.csv)")
        if not path:
            return
        import csv
        with open(path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            headers = [self.audit_table.horizontalHeaderItem(i).text()
                       for i in range(self.audit_table.columnCount())]
            writer.writerow(headers)
            for row in range(self.audit_table.rowCount()):
                if self.audit_table.isRowHidden(row):
                    continue
                rowdata = []
                for col in range(self.audit_table.columnCount()):
                    it = self.audit_table.item(row, col)
                    rowdata.append(it.text() if it else "")
                writer.writerow(rowdata)
        QMessageBox.information(self,"Exported","Audit logs exported to CSV.")

class SearchRuleDialog(QDialog):
    def __init__(self, connection, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_group = user_group
        self.setWindowTitle("Search Rules")
        self.resize(800,600)
        layout = QVBoxLayout(self)

        top_h = QHBoxLayout()
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Enter rule name or SQL snippet...")
        self.search_edit.textChanged.connect(self.load_results)
        top_h.addWidget(QLabel("Search:"))
        top_h.addWidget(self.search_edit)
        layout.addLayout(top_h)

        self.res_table = QTableWidget(0,6)
        self.res_table.setHorizontalHeaderLabels(["Rule ID","Name","SQL","Status","Version","Created By"])
        self.res_table.horizontalHeader().setStretchLastSection(True)
        self.res_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.res_table.setEditTriggers(QTableWidget.NoEditTriggers)
        layout.addWidget(self.res_table)

        rb = QPushButton("Refresh")
        rb.clicked.connect(self.load_results)
        layout.addWidget(rb)
        self.setLayout(layout)
        self.load_results()

    def load_results(self):
        c = self.connection.cursor()
        txt = self.search_edit.text().strip()
        if txt:
            c.execute("""
            SELECT RULE_ID,RULE_NAME,RULE_SQL,STATUS,VERSION,CREATED_BY
            FROM BRM_RULES
            WHERE RULE_NAME LIKE ? OR RULE_SQL LIKE ?
            ORDER BY RULE_ID DESC
            OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY
            """,(f"%{txt}%",f"%{txt}%"))
        else:
            c.execute("""
            SELECT RULE_ID,RULE_NAME,RULE_SQL,STATUS,VERSION,CREATED_BY
            FROM BRM_RULES
            ORDER BY RULE_ID DESC
            OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY
            """)
        rows = get_cursor_rows(c)
        self.res_table.setRowCount(0)
        for row in rows:
            r_ = self.res_table.rowCount()
            self.res_table.insertRow(r_)
            self.res_table.setItem(r_,0,QTableWidgetItem(str(row["RULE_ID"])))
            self.res_table.setItem(r_,1,QTableWidgetItem(row["RULE_NAME"]))
            self.res_table.setItem(r_,2,QTableWidgetItem(row["RULE_SQL"]))
            self.res_table.setItem(r_,3,QTableWidgetItem(row["STATUS"]))
            self.res_table.setItem(r_,4,QTableWidgetItem(str(row["VERSION"])))
            self.res_table.setItem(r_,5,QTableWidgetItem(row["CREATED_BY"]))

###############################################################################
# METRICS DASHBOARD
###############################################################################
class MetricsDashboardTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        layout = QVBoxLayout(self)
        self.chart = pg.PlotWidget(title="Rule Counts by Status")
        self.chart.setBackground('w')
        layout.addWidget(self.chart)

        ref_btn = QPushButton("Refresh Metrics")
        ref_btn.clicked.connect(self.load_metrics)
        layout.addWidget(ref_btn)
        self.setLayout(layout)
        self.load_metrics()

    def load_metrics(self):
        c = self.connection.cursor()
        c.execute("SELECT STATUS,COUNT(*) as count FROM BRM_RULES GROUP BY STATUS")
        rows = get_cursor_rows(c)
        statuses=[r["STATUS"] for r in rows]
        counts=[r["count"] for r in rows]
        self.chart.clear()
        if statuses:
            x=range(len(statuses))
            bar_item=pg.BarGraphItem(x=x,height=counts,width=0.6,brush="skyblue")
            self.chart.addItem(bar_item)
            self.chart.getAxis("bottom").setTicks([list(zip(x,statuses))])
            self.chart.setLabel("left","Count")
            self.chart.setLabel("bottom","Status")
            self.chart.showGrid(x=True,y=True)

###############################################################################
# APPROVAL PIPELINE WIDGET, MULTI-STEP APPROVAL TAB
###############################################################################
class ApprovalPipelineWidget(QWidget):
    def __init__(self, stage_status_map, parent=None):
        super().__init__(parent)
        self.setLayout(QHBoxLayout())
        self.layout().setContentsMargins(0,0,0,0)
        self.layout().setSpacing(5)
        stages=["BG1","BG2","BG3","FINAL"]
        for st in stages:
            circle=QLabel()
            circle.setFixedSize(20,20)
            circle.setStyleSheet("border-radius:10px;border:1px solid black;")
            status=stage_status_map.get(st,"NotStarted")
            if status=="Approved":
                circle.setStyleSheet("background-color:green;border-radius:10px;border:1px solid black;")
            elif status=="Pending":
                circle.setStyleSheet("background-color:yellow;border-radius:10px;border:1px solid black;")
            elif status=="Rejected":
                circle.setStyleSheet("background-color:red;border-radius:10px;border:1px solid black;")
            else:
                circle.setStyleSheet("background-color:lightgray;border-radius:10px;border:1px solid black;")
            circle.setToolTip(f"{st}: {status}")
            self.layout().addWidget(circle)

class MultiStepApprovalTab(QWidget):
    def __init__(self, connection, logged_in_username, user_group, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.logged_in_username=logged_in_username
        self.user_group=user_group
        layout=QVBoxLayout(self)

        self.appr_table=QTableWidget(0,8)
        self.appr_table.setHorizontalHeaderLabels([
            "Rule ID","Group Name","Rule Name","Stage","Approved?","Approve","Reject","Pipeline"
        ])
        self.appr_table.horizontalHeader().setStretchLastSection(True)
        self.appr_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.appr_table.setEditTriggers(QTableWidget.NoEditTriggers)
        layout.addWidget(self.appr_table)

        ref_btn=QPushButton("Refresh Approvals")
        ref_btn.clicked.connect(self.load_approvals)
        layout.addWidget(ref_btn)

        self.setLayout(layout)
        self.load_approvals()

    def load_approvals(self):
        c=self.connection.cursor()
        q="""
        SELECT A.RULE_ID,A.GROUP_NAME,A.USERNAME,A.APPROVED_FLAG,A.APPROVAL_STAGE,
               R.RULE_NAME,R.APPROVAL_STATUS
        FROM BRM_RULE_APPROVALS A
        JOIN BRM_RULES R ON A.RULE_ID=R.RULE_ID
        WHERE A.USERNAME=? AND A.APPROVED_FLAG=0
        ORDER BY A.RULE_ID
        """
        c.execute(q,(self.logged_in_username,))
        rows=get_cursor_rows(c)

        # gather pipeline data
        pipeline_data={}
        all_app=self.connection.cursor()
        all_app.execute("SELECT * FROM BRM_RULE_APPROVALS")
        for apr in get_cursor_rows(all_app):
            rid=apr["RULE_ID"]
            grp=apr["GROUP_NAME"]
            st=apr["APPROVAL_STAGE"]
            fl=apr["APPROVED_FLAG"]
            pipeline_data.setdefault(rid,{"BG1":"NotStarted","BG2":"NotStarted","BG3":"NotStarted","FINAL":"NotStarted"})
            if fl==1:
                pipeline_data[rid][grp]="Approved"
            elif fl==2:
                pipeline_data[rid][grp]="Rejected"
            else:
                cur_st=get_current_approval_stage(self.connection,rid)
                if cur_st==st:
                    pipeline_data[rid][grp]="Pending"

        # only rows in current stage
        def current_stage(rule_id):
            return get_current_approval_stage(self.connection, rule_id)

        minimal=[]
        for rd in rows:
            rid=rd["RULE_ID"]
            stg=rd["APPROVAL_STAGE"]
            min_st=current_stage(rid)
            if min_st==stg:
                minimal.append(rd)

        self.appr_table.setRowCount(0)
        for rd in minimal:
            r_=self.appr_table.rowCount()
            self.appr_table.insertRow(r_)
            self.appr_table.setItem(r_,0,QTableWidgetItem(str(rd["RULE_ID"])))
            self.appr_table.setItem(r_,1,QTableWidgetItem(rd["GROUP_NAME"]))
            self.appr_table.setItem(r_,2,QTableWidgetItem(rd["RULE_NAME"]))
            self.appr_table.setItem(r_,3,QTableWidgetItem(str(rd["APPROVAL_STAGE"])))
            self.appr_table.setItem(r_,4,QTableWidgetItem(str(rd["APPROVED_FLAG"])))

            approve_btn=QPushButton("Approve")
            approve_btn.clicked.connect(lambda _, idx=r_:self.do_approve(idx))
            self.appr_table.setCellWidget(r_,5,approve_btn)

            reject_btn=QPushButton("Reject")
            reject_btn.clicked.connect(lambda _, idx2=r_:self.do_reject(idx2))
            self.appr_table.setCellWidget(r_,6,reject_btn)

            pmap=pipeline_data.get(rd["RULE_ID"],{"BG1":"NotStarted","BG2":"NotStarted","BG3":"NotStarted","FINAL":"NotStarted"})
            pipe_widget=ApprovalPipelineWidget(pmap)
            self.appr_table.setCellWidget(r_,7,pipe_widget)

    def do_approve(self, row_index):
        rid_item=self.appr_table.item(row_index,0)
        grp_item=self.appr_table.item(row_index,1)
        if not rid_item or not grp_item:
            return
        rule_id=int(rid_item.text())
        grp=grp_item.text()

        c=self.connection.cursor()
        c.execute("""
        UPDATE BRM_RULE_APPROVALS
        SET APPROVED_FLAG=1,APPROVED_TIMESTAMP=GETDATE()
        WHERE RULE_ID=? AND GROUP_NAME=? AND USERNAME=? AND APPROVED_FLAG=0
        """,(rule_id,grp,self.logged_in_username))
        nxt=get_current_approval_stage(self.connection,rule_id)
        if nxt is None:
            c.execute("UPDATE BRM_RULES SET APPROVAL_STATUS='APPROVED',STATUS='ACTIVE' WHERE RULE_ID=?",(rule_id,))
        else:
            c.execute("UPDATE BRM_RULES SET APPROVAL_STATUS='APPROVAL_IN_PROGRESS',STATUS='INACTIVE' WHERE RULE_ID=?",(rule_id,))

        add_audit_log(self.connection,"APPROVE","BRM_RULE_APPROVALS",rule_id,self.logged_in_username,
                      {"APPROVED_FLAG":0},{"APPROVED_FLAG":1})
        self.connection.commit()
        QMessageBox.information(self,"Approved",f"Rule {rule_id} approved.")
        self.load_approvals()

    def do_reject(self, row_index):
        rid_item=self.appr_table.item(row_index,0)
        if not rid_item:
            return
        rule_id=int(rid_item.text())
        confirm=QMessageBox.question(self,"Reject Confirmation",f"Reject rule {rule_id}?")
        if confirm!=QMessageBox.Yes:
            return
        mark_rule_rejected(self.connection,rule_id,self.logged_in_username)
        add_audit_log(self.connection,"REJECT","BRM_RULE_APPROVALS",rule_id,self.logged_in_username,
                      {"APPROVED_FLAG":0},{"APPROVED_FLAG":2})
        QMessageBox.information(self,"Rejected",f"Rule {rule_id} has been Rejected.")
        self.load_approvals()

###############################################################################
# RULE SCHEDULER, SCHEDULE MANAGEMENT
###############################################################################
class RuleSchedulerDialog(QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.setWindowTitle("Schedule Rule Execution")
        self.resize(400,200)
        layout=QVBoxLayout(self)

        form=QFormLayout()
        self.rule_combo=QComboBox()
        c=self.connection.cursor()
        c.execute("SELECT RULE_ID,RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        for rr in get_cursor_rows(c):
            self.rule_combo.addItem(f"{rr['RULE_ID']} - {rr['RULE_NAME']}", rr["RULE_ID"])
        form.addRow("Select Rule:", self.rule_combo)

        self.datetime_edit=QDateTimeEdit(QtCore.QDateTime.currentDateTime())
        self.datetime_edit.setCalendarPopup(True)
        self.datetime_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        form.addRow("Schedule Time:", self.datetime_edit)

        layout.addLayout(form)
        bh=QHBoxLayout()
        sched_btn=QPushButton("Schedule")
        sched_btn.clicked.connect(self.schedule_rule)
        bh.addWidget(sched_btn)
        cb=QPushButton("Close")
        cb.clicked.connect(self.close)
        bh.addWidget(cb)
        layout.addLayout(bh)
        self.setLayout(layout)

    def schedule_rule(self):
        rule_id=self.rule_combo.currentData()
        sched_time=self.datetime_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        c=self.connection.cursor()
        c.execute("""
        INSERT INTO RULE_SCHEDULES(RULE_ID,SCHEDULE_TIME,STATUS,CREATED_TIMESTAMP)
        VALUES(?,?, 'Scheduled', GETDATE())
        """,(rule_id,sched_time))
        self.connection.commit()
        QMessageBox.information(self,"Scheduled",f"Rule {rule_id} scheduled for {sched_time}.")

class ScheduleManagementTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        layout=QVBoxLayout(self)

        self.schedule_table=QTableWidget(0,4)
        self.schedule_table.setHorizontalHeaderLabels(["Schedule ID","Rule ID","Schedule Time","Status"])
        self.schedule_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.schedule_table)

        bh=QHBoxLayout()
        ref=QPushButton("Refresh Schedules")
        ref.clicked.connect(self.load_schedules)
        bh.addWidget(ref)
        layout.addLayout(bh)

        self.setLayout(layout)
        self.load_schedules()

    def load_schedules(self):
        c=self.connection.cursor()
        c.execute("""
        SELECT SCHEDULE_ID,RULE_ID,SCHEDULE_TIME,STATUS
        FROM RULE_SCHEDULES
        ORDER BY SCHEDULE_TIME DESC
        OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY
        """)
        rows=get_cursor_rows(c)
        self.schedule_table.setRowCount(0)
        for row in rows:
            r_=self.schedule_table.rowCount()
            self.schedule_table.insertRow(r_)
            self.schedule_table.setItem(r_,0,QTableWidgetItem(str(row["SCHEDULE_ID"])))
            self.schedule_table.setItem(r_,1,QTableWidgetItem(str(row["RULE_ID"])))
            self.schedule_table.setItem(r_,2,QTableWidgetItem(str(row["SCHEDULE_TIME"])))
            self.schedule_table.setItem(r_,3,QTableWidgetItem(row["STATUS"]))

###############################################################################
# GROUP MANAGEMENT, USER MANAGEMENT, plus BFS Hierarchy & Lineage
###############################################################################
class GroupManagementTab(QWidget):
    def __init__(self, main_app, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.main_app=main_app
        self.connection=connection
        self.user_id=user_id
        self.user_group=user_group
        if user_group!="Admin":
            lay=QVBoxLayout(self)
            lay.addWidget(QLabel("Access Denied: only Admin."))
            self.setLayout(lay)
            return

        layout=QVBoxLayout(self)
        self.groups_table=QTableWidget(0,3)
        self.groups_table.setHorizontalHeaderLabels(["Group Name","Description","Email"])
        self.groups_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.groups_table)

        bh=QHBoxLayout()
        add_g=QPushButton("Add Group")
        add_g.clicked.connect(self.on_add_group)
        bh.addWidget(add_g)

        rename_g=QPushButton("Rename Group")
        rename_g.clicked.connect(self.on_rename_group)
        bh.addWidget(rename_g)

        del_g=QPushButton("Delete Group")
        del_g.clicked.connect(self.on_delete_group)
        bh.addWidget(del_g)
        bh.addStretch()
        layout.addLayout(bh)

        self.users_table=QTableWidget(0,3)
        self.users_table.setHorizontalHeaderLabels(["User ID","Username","Group"])
        self.users_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.users_table)

        bh2=QHBoxLayout()
        add_u=QPushButton("Add User to Group")
        add_u.clicked.connect(self.on_add_user_to_group)
        bh2.addWidget(add_u)

        rem_u=QPushButton("Remove User from Group")
        rem_u.clicked.connect(self.on_remove_user_from_group)
        bh2.addWidget(rem_u)
        bh2.addStretch()
        layout.addLayout(bh2)

        ref=QPushButton("Refresh")
        ref.clicked.connect(self.load_data)
        layout.addWidget(ref)

        self.setLayout(layout)
        self.load_data()

    def load_data(self):
        c=self.connection.cursor()
        c.execute("SELECT GROUP_NAME,DESCRIPTION,EMAIL FROM BUSINESS_GROUPS ORDER BY GROUP_NAME")
        rows=c.fetchall()
        self.groups_table.setRowCount(0)
        for row in rows:
            r_=self.groups_table.rowCount()
            self.groups_table.insertRow(r_)
            self.groups_table.setItem(r_,0,QTableWidgetItem(row[0]))
            self.groups_table.setItem(r_,1,QTableWidgetItem(row[1] or ""))
            self.groups_table.setItem(r_,2,QTableWidgetItem(row[2] or ""))

        c.execute("SELECT USER_ID,USERNAME,USER_GROUP FROM USERS ORDER BY USER_ID")
        rows2=c.fetchall()
        self.users_table.setRowCount(0)
        for row in rows2:
            r_=self.users_table.rowCount()
            self.users_table.insertRow(r_)
            self.users_table.setItem(r_,0,QTableWidgetItem(str(row[0])))
            self.users_table.setItem(r_,1,QTableWidgetItem(row[1]))
            self.users_table.setItem(r_,2,QTableWidgetItem(row[2]))

    def get_selected_group(self):
        i=self.groups_table.currentRow()
        if i<0:
            return None
        it=self.groups_table.item(i,0)
        if not it:
            return None
        return it.text().strip()

    def on_add_group(self):
        name,ok=QInputDialog.getText(self,"Add Group","Group Name:")
        if not ok or not name.strip():
            return
        desc,ok2=QInputDialog.getText(self,"Add Group","Description:")
        if not ok2:
            desc=""
        email,ok3=QInputDialog.getText(self,"Add Group","Email:")
        if not ok3:
            email=""
        c=self.connection.cursor()
        c.execute("SELECT * FROM BUSINESS_GROUPS WHERE GROUP_NAME=?",(name.strip(),))
        if c.fetchone():
            QMessageBox.warning(self,"Error","Group already exists.")
            return
        c.execute("INSERT INTO BUSINESS_GROUPS(GROUP_NAME,DESCRIPTION,EMAIL) VALUES(?,?,?)",
                  (name.strip(),desc.strip(),email.strip()))
        self.connection.commit()
        QMessageBox.information(self,"Success","Group added.")
        self.load_data()

    def on_rename_group(self):
        grp=self.get_selected_group()
        if not grp:
            QMessageBox.warning(self,"No selection","No group selected.")
            return
        new_name,ok=QInputDialog.getText(self,"Rename Group","New group name:")
        if not ok or not new_name.strip():
            return
        c=self.connection.cursor()
        c.execute("SELECT * FROM BUSINESS_GROUPS WHERE GROUP_NAME=?",(new_name.strip(),))
        if c.fetchone():
            QMessageBox.warning(self,"Error","New group name already exists.")
            return
        try:
            c.execute("BEGIN TRANSACTION")
            c.execute("UPDATE BUSINESS_GROUPS SET GROUP_NAME=? WHERE GROUP_NAME=?",(new_name.strip(),grp))
            c.execute("UPDATE BRM_RULES SET OWNER_GROUP=? WHERE OWNER_GROUP=?",(new_name.strip(),grp))
            c.execute("UPDATE BRM_RULE_GROUPS SET GROUP_NAME=? WHERE GROUP_NAME=?",(new_name.strip(),grp))
            c.execute("COMMIT")
            add_audit_log(self.connection,"RENAME_GROUP","BUSINESS_GROUPS",grp,"Admin",
                          {"old_group_name":grp},{"new_group_name":new_name.strip()})
            QMessageBox.information(self,"Renamed",f"Renamed {grp} to {new_name}")
            self.load_data()
        except Exception as ex:
            c.execute("ROLLBACK")
            QMessageBox.critical(self,"Error",str(ex))

    def on_delete_group(self):
        grp=self.get_selected_group()
        if not grp:
            QMessageBox.warning(self,"No selection","No group selected.")
            return
        if QMessageBox.question(self,"Confirm",f"Delete group '{grp}'?")!=QMessageBox.Yes:
            return
        c=self.connection.cursor()
        try:
            c.execute("DELETE FROM BUSINESS_GROUPS WHERE GROUP_NAME=?",(grp,))
            self.connection.commit()
            QMessageBox.information(self,"Deleted","Group deleted.")
            self.load_data()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def get_selected_user(self):
        i=self.users_table.currentRow()
        if i<0:
            return None
        it=self.users_table.item(i,0)
        if not it:
            return None
        return int(it.text())

    def on_add_user_to_group(self):
        uid=self.get_selected_user()
        if not uid:
            QMessageBox.warning(self,"None","No user selected.")
            return
        grp,ok=QInputDialog.getText(self,"Add to Group","Group name:")
        if not ok or not grp.strip():
            return
        c=self.connection.cursor()
        c.execute("SELECT * FROM BUSINESS_GROUPS WHERE GROUP_NAME=?",(grp.strip(),))
        if not c.fetchone():
            QMessageBox.warning(self,"Error","Group not found.")
            return
        c.execute("SELECT USERNAME,USER_GROUP FROM USERS WHERE USER_ID=?",(uid,))
        row=c.fetchone()
        if not row:
            QMessageBox.warning(self,"Error","User not found.")
            return
        if row[1]==grp.strip():
            QMessageBox.warning(self,"Error","User already in that group.")
            return
        c.execute("UPDATE USERS SET USER_GROUP=? WHERE USER_ID=?",(grp.strip(),uid))
        self.connection.commit()
        QMessageBox.information(self,"Success","User added to group.")
        self.load_data()

    def on_remove_user_from_group(self):
        uid=self.get_selected_user()
        if not uid:
            QMessageBox.warning(self,"None","No user selected.")
            return
        if QMessageBox.question(self,"Confirm","Remove user from group? (moves user to BG1)")!=QMessageBox.Yes:
            return
        c=self.connection.cursor()
        c.execute("UPDATE USERS SET USER_GROUP='BG1' WHERE USER_ID=?",(uid,))
        self.connection.commit()
        QMessageBox.information(self,"Success","User moved to BG1.")
        self.load_data()

class UserManagementTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        layout=QVBoxLayout(self)

        self.table=QTableWidget(0,4)
        self.table.setHorizontalHeaderLabels(["User ID","Username","Password","User Group"])
        self.table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.table)

        bh=QHBoxLayout()
        add_btn=QPushButton("Add User")
        add_btn.clicked.connect(self.on_add_user)
        bh.addWidget(add_btn)

        reset_btn=QPushButton("Reset Password")
        reset_btn.clicked.connect(self.on_reset_password)
        bh.addWidget(reset_btn)

        del_btn=QPushButton("Delete User")
        del_btn.clicked.connect(self.on_delete_user)
        bh.addWidget(del_btn)

        bh.addStretch()
        layout.addLayout(bh)

        ref_btn=QPushButton("Refresh Users")
        ref_btn.clicked.connect(self.load_users)
        layout.addWidget(ref_btn)

        self.setLayout(layout)
        self.load_users()

    def load_users(self):
        c=self.connection.cursor()
        c.execute("SELECT USER_ID,USERNAME,PASSWORD,USER_GROUP FROM USERS ORDER BY USER_ID")
        rows=c.fetchall()
        self.table.setRowCount(0)
        for row in rows:
            r_=self.table.rowCount()
            self.table.insertRow(r_)
            self.table.setItem(r_,0,QTableWidgetItem(str(row[0])))
            self.table.setItem(r_,1,QTableWidgetItem(row[1]))
            self.table.setItem(r_,2,QTableWidgetItem(row[2]))
            self.table.setItem(r_,3,QTableWidgetItem(row[3]))

    def get_selected_user_id(self):
        i=self.table.currentRow()
        if i<0:
            return None
        it=self.table.item(i,0)
        if not it:
            return None
        return int(it.text())

    def on_add_user(self):
        un,ok=QInputDialog.getText(self,"Add User","Username:")
        if not ok or not un.strip():
            return
        pw,ok2=QInputDialog.getText(self,"Add User","Password:")
        if not ok2:
            pw=""
        grp,ok3=QInputDialog.getText(self,"Add User","User Group:")
        if not ok3:
            grp="BG1"
        c=self.connection.cursor()
        c.execute("SELECT * FROM USERS WHERE USERNAME=?",(un.strip(),))
        if c.fetchone():
            QMessageBox.warning(self,"Error","User already exists.")
            return
        c.execute("INSERT INTO USERS(USERNAME,PASSWORD,USER_GROUP) VALUES(?,?,?)",
                  (un.strip(),pw.strip(),grp.strip()))
        self.connection.commit()
        QMessageBox.information(self,"Success","User added.")
        self.load_users()

    def on_reset_password(self):
        uid=self.get_selected_user_id()
        if not uid:
            QMessageBox.warning(self,"None","No user selected.")
            return
        new_pw,ok=QInputDialog.getText(self,"Reset Password","New password:")
        if not ok:
            return
        c=self.connection.cursor()
        c.execute("UPDATE USERS SET PASSWORD=? WHERE USER_ID=?",(new_pw.strip(),uid))
        self.connection.commit()
        QMessageBox.information(self,"Updated","Password reset.")
        self.load_users()

    def on_delete_user(self):
        uid=self.get_selected_user_id()
        if not uid:
            QMessageBox.warning(self,"None","No user selected.")
            return
        if QMessageBox.question(self,"Confirm","Delete user?")!=QMessageBox.Yes:
            return
        c=self.connection.cursor()
        c.execute("DELETE FROM USERS WHERE USER_ID=?",(uid,))
        self.connection.commit()
        QMessageBox.information(self,"Deleted","User deleted.")
        self.load_users()

class HierarchyViewTab(QWidget):
    """
    BFS-based hierarchy view: group -> rules
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        layout=QVBoxLayout(self)

        self.tree=QTreeWidget()
        self.tree.setHeaderLabels(["Group / Rule Name"])
        layout.addWidget(self.tree)

        ref_btn=QPushButton("Refresh Hierarchy")
        ref_btn.clicked.connect(self.load_hierarchy)
        layout.addWidget(ref_btn)

        self.setLayout(layout)
        self.load_hierarchy()

    def load_hierarchy(self):
        self.tree.clear()
        c=self.connection.cursor()
        c.execute("SELECT GROUP_ID,GROUP_NAME FROM BRM_RULE_GROUPS ORDER BY GROUP_NAME")
        groups=get_cursor_rows(c)
        grp_map={}
        for g in groups:
            item=QTreeWidgetItem([f"{g['GROUP_NAME']} (ID={g['GROUP_ID']})"])
            self.tree.addTopLevelItem(item)
            grp_map[g["GROUP_ID"]]=item

        c.execute("SELECT RULE_ID,RULE_NAME,GROUP_ID FROM BRM_RULES")
        ruleset=get_cursor_rows(c)
        for r_ in ruleset:
            g_id=r_["GROUP_ID"]
            if g_id in grp_map:
                par_item=grp_map[g_id]
                ch_item=QTreeWidgetItem([f"Rule {r_['RULE_ID']}: {r_['RULE_NAME']}"])
                par_item.addChild(ch_item)

class EnhancedLineageGraphWidget(QtWidgets.QGraphicsView):
    """
    BFS-based lineage visualization. Draws nodes for each rule, edges for parent->child,
    plus table dependencies from BRM_RULE_TABLE_DEPENDENCIES.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.scene=QtWidgets.QGraphicsScene(self)
        self.setScene(self.scene)
        self.setRenderHint(QtGui.QPainter.Antialiasing)
        self.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)
        self.setTransformationAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
        self.node_map={}
        self.children_map={}
        self.parents_map={}
        self.populate_graph()

    def populate_graph(self):
        self.scene.clear()
        self.node_map.clear()
        self.children_map.clear()
        self.parents_map.clear()

        c=self.connection.cursor()
        c.execute("""
        SELECT RULE_ID,RULE_NAME,PARENT_RULE_ID,STATUS,RULE_TYPE_ID,CLUSTER_NAME,
               IS_GLOBAL,CRITICAL_RULE
        FROM BRM_RULES
        ORDER BY RULE_ID
        """)
        rules=get_cursor_rows(c)
        if not rules:
            self.scene.addItem(QtWidgets.QGraphicsTextItem("No rules found."))
            return

        for r_ in rules:
            rid=r_["RULE_ID"]
            pid=r_["PARENT_RULE_ID"]
            if pid:
                self.children_map.setdefault(pid,[]).append(rid)
                self.parents_map[rid]=pid

        rule_lookup={x["RULE_ID"]:x for x in rules}
        all_ids=set(x["RULE_ID"] for x in rules)
        child_ids=set(self.parents_map.keys())
        roots=list(all_ids-child_ids)

        from collections import deque
        queue=deque()
        level_map={}
        visited=set()

        for rt in roots:
            queue.append((rt,0))

        while queue:
            rid,depth=queue.popleft()
            if rid in visited:
                continue
            visited.add(rid)
            rinfo=rule_lookup[rid]
            count_at_level=level_map.get(depth,0)
            level_map[depth]=count_at_level+1
            x=depth*220
            y=count_at_level*120
            node_item=self.create_node(rinfo)
            node_item.setPos(x,y)
            self.scene.addItem(node_item)
            self.node_map[rid]=node_item

            if rid in self.children_map:
                for ch_ in self.children_map[rid]:
                    queue.append((ch_,depth+1))

        # edges for parent->child
        for r_ in rules:
            pid=r_["PARENT_RULE_ID"]
            rid=r_["RULE_ID"]
            if pid and pid in self.node_map and rid in self.node_map:
                self.draw_edge(self.node_map[pid], self.node_map[rid])

        # table dependencies
        c.execute("SELECT RULE_ID,DATABASE_NAME,TABLE_NAME FROM BRM_RULE_TABLE_DEPENDENCIES")
        deps=get_cursor_rows(c)
        table_node_map={}
        table_index=0
        for dep in deps:
            key=f"{dep['DATABASE_NAME']}.{dep['TABLE_NAME']}".strip(".")
            if key not in table_node_map:
                t_item=QtWidgets.QGraphicsEllipseItem(0,0,100,40)
                t_item.setBrush(QtGui.QBrush(QtGui.QColor("lightblue")))
                t_item.setToolTip(f"Table: {key}")
                t_item.setPos(800, table_index*60)
                self.scene.addItem(t_item)
                table_node_map[key]=t_item
                table_index+=1
            rid_dep=dep["RULE_ID"]
            if rid_dep in self.node_map:
                self.draw_edge(self.node_map[rid_dep], table_node_map[key], color=QtGui.QColor("darkmagenta"))

        self.scene.setSceneRect(self.scene.itemsBoundingRect())
        self.resetView()

    def create_node(self, rinfo):
        rtype=rinfo["RULE_TYPE_ID"]
        status=rinfo["STATUS"]
        cluster=(rinfo.get("CLUSTER_NAME","") or "")
        is_g=rinfo["IS_GLOBAL"]
        is_c=rinfo["CRITICAL_RULE"]

        # pick shape
        if rtype==1:
            node=QtWidgets.QGraphicsRectItem(0,0,120,50)
        else:
            node=QtWidgets.QGraphicsEllipseItem(0,0,120,50)

        # color
        if status.lower()=="active":
            basecol=QtGui.QColor("lightgreen")
        else:
            basecol=QtGui.QColor("tomato")
        if cluster:
            hv=abs(hash(cluster))%360
            basecol=QtGui.QColor.fromHsv(hv,128,255)
        node.setBrush(QtGui.QBrush(basecol))

        pen=QtGui.QPen(QtCore.Qt.black,2)
        if is_c==1:
            pen=QtGui.QPen(QtGui.QColor("red"),3)
        node.setPen(pen)

        disp=rinfo["RULE_NAME"]
        if is_g==1:
            disp=f"(G) {disp}"
        node.setToolTip(f"Rule {rinfo['RULE_ID']}: {disp}")
        return node

    def draw_edge(self, item1, item2, color=QtGui.QColor("darkblue")):
        r1=item1.sceneBoundingRect()
        r2=item2.sceneBoundingRect()
        p1=r1.center()
        p2=r2.center()
        line=QtWidgets.QGraphicsLineItem(p1.x(),p1.y(),p2.x(),p2.y())
        line.setPen(QtGui.QPen(color,2))
        self.scene.addItem(line)

    def resetView(self):
        if self.scene and self.scene.sceneRect().isValid():
            self.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)

    def mousePressEvent(self, event):
        if event.button()==QtCore.Qt.LeftButton:
            item=self.itemAt(event.pos())
            if isinstance(item,(QtWidgets.QGraphicsRectItem,QtWidgets.QGraphicsEllipseItem)):
                QMessageBox.information(self,"Rule Details",item.toolTip())
        super().mousePressEvent(event)

    def clear_highlights(self):
        for nd in self.node_map.values():
            nd.setPen(QtGui.QPen(QtCore.Qt.black,2))

    def search_nodes(self, query):
        self.clear_highlights()
        ql=query.lower()
        c=self.connection.cursor()

        found=set()
        # search BRM_RULES
        c.execute("""
        SELECT RULE_ID
        FROM BRM_RULES
        WHERE LOWER(RULE_NAME) LIKE ?
           OR LOWER(RULE_SQL) LIKE ?
           OR LOWER(DESCRIPTION) LIKE ?
           OR LOWER(BUSINESS_JUSTIFICATION) LIKE ?
           OR CAST(RULE_ID as varchar(50)) LIKE ?
        """,(f"%{ql}%",f"%{ql}%",f"%{ql}%",f"%{ql}%",f"%{ql}%"))
        for r_ in get_cursor_rows(c):
            found.add(r_["RULE_ID"])

        # column mapping
        c.execute("""
        SELECT RULE_ID
        FROM BRM_COLUMN_MAPPING
        WHERE LOWER(SOURCE_COLUMN_NAME) LIKE ? OR LOWER(TARGET_COLUMN_NAME) LIKE ?
        """,(f"%{ql}%",f"%{ql}%"))
        for r_ in get_cursor_rows(c):
            found.add(r_["RULE_ID"])

        # dependencies
        c.execute("""
        SELECT RULE_ID
        FROM BRM_RULE_TABLE_DEPENDENCIES
        WHERE LOWER(DATABASE_NAME) LIKE ? OR LOWER(TABLE_NAME) LIKE ?
        """,(f"%{ql}%",f"%{ql}%"))
        for r_ in get_cursor_rows(c):
            found.add(r_["RULE_ID"])

        if not found:
            QMessageBox.information(self,"No Match",f"No match for '{query}'")
            return
        for rid in found:
            if rid in self.node_map:
                self.node_map[rid].setPen(QtGui.QPen(QtGui.QColor("yellow"),4))
                self.highlight_ancestors(rid)
                self.highlight_descendants(rid)

    def highlight_ancestors(self, rid):
        cur=rid
        while cur in self.parents_map:
            node=self.node_map.get(cur)
            if node:
                node.setPen(QtGui.QPen(QtGui.QColor("yellow"),4))
            par=self.parents_map[cur]
            if par in self.node_map:
                self.node_map[par].setPen(QtGui.QPen(QtGui.QColor("yellow"),4))
            cur=par

    def highlight_descendants(self, rid):
        stack=[rid]
        visited=set()
        while stack:
            c_=stack.pop()
            if c_ in visited:
                continue
            visited.add(c_)
            if c_ in self.node_map:
                self.node_map[c_].setPen(QtGui.QPen(QtGui.QColor("yellow"),4))
            if c_ in self.children_map:
                stack.extend(self.children_map[c_])

###############################################################################
# RULE ANALYTICS, RULE SIMULATION, IMPACT ANALYSIS, VERSION HISTORY
###############################################################################
class RuleAnalyticsDialog(QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.setWindowTitle("Rule Analytics")
        self.resize(800,600)
        layout=QVBoxLayout(self)

        chart_h=QHBoxLayout()
        self.bar_chart=pg.PlotWidget(title="Number of Rules by Creator")
        self.bar_chart.setBackground('w')
        chart_h.addWidget(self.bar_chart)

        self.pie_chart=pg.PlotWidget(title="Rule Status Distribution")
        self.pie_chart.setBackground('w')
        chart_h.addWidget(self.pie_chart)

        layout.addLayout(chart_h)

        closeb=QPushButton("Close")
        closeb.clicked.connect(self.close)
        layout.addWidget(closeb)
        self.setLayout(layout)
        self.load_charts()

    def load_charts(self):
        c=self.connection.cursor()
        # bar
        qb="SELECT CREATED_BY,COUNT(*) as cnt FROM BRM_RULES GROUP BY CREATED_BY"
        c.execute(qb)
        rows=get_cursor_rows(c)
        creators={}
        for r_ in rows:
            if r_["CREATED_BY"]:
                creators[r_["CREATED_BY"]]=r_["cnt"]

        # status
        status_counts={"ACTIVE":0,"INACTIVE":0,"DELETED":0}
        c.execute("SELECT STATUS,COUNT(*) as sc FROM BRM_RULES GROUP BY STATUS")
        strows=get_cursor_rows(c)
        for s_ in strows:
            key=s_["STATUS"].upper()
            if key in status_counts:
                status_counts[key]=s_["sc"]
        c.execute("SELECT COUNT(*) as delcnt FROM BRM_AUDIT_LOG WHERE ACTION='DELETE'")
        dr=get_cursor_one(c)
        if dr:
            status_counts["DELETED"]=dr["delcnt"]

        # bar chart
        self.bar_chart.clear()
        if creators:
            sorted_creators=sorted(creators.items(), key=lambda x:x[1], reverse=True)
            names=[x[0] for x in sorted_creators]
            vals=[x[1] for x in sorted_creators]
            bar_item=pg.BarGraphItem(x=range(len(names)),height=vals,width=0.6,brush="skyblue")
            self.bar_chart.addItem(bar_item)
            ax=self.bar_chart.getAxis("bottom")
            ax.setTicks([list(zip(range(len(names)),names))])
            self.bar_chart.setLabel("left","Number of Rules")
            self.bar_chart.setLabel("bottom","Created By")
            self.bar_chart.showGrid(x=True,y=True)

        # pie chart example omitted for brevity. Or you can do arcs if needed.

class RuleSimulationDialog(QDialog):
    def __init__(self, connection, rule_sql, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.rule_sql=rule_sql
        self.setWindowTitle("Rule Simulation (Dry-run)")
        self.resize(600,400)
        layout=QVBoxLayout(self)

        self.sim_result=QPlainTextEdit()
        self.sim_result.setReadOnly(True)
        layout.addWidget(self.sim_result)

        bh=QHBoxLayout()
        self.sim_btn=QPushButton("Simulate Rule")
        self.sim_btn.clicked.connect(self.simulate)
        bh.addWidget(self.sim_btn)
        cb=QPushButton("Close")
        cb.clicked.connect(self.close)
        bh.addWidget(cb)
        layout.addLayout(bh)

        self.setLayout(layout)

    def simulate(self):
        self.sim_btn.setEnabled(False)
        ok,msg=run_rule_sql(self.connection,self.rule_sql)
        out=f"Result: {'PASS' if ok else 'FAIL'}\nDetail: {msg}"
        self.sim_result.setPlainText(out)
        self.sim_btn.setEnabled(True)

class ImpactAnalysisDialog(QDialog):
    def __init__(self, connection, rule_id, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.rule_id=rule_id
        self.setWindowTitle(f"Impact Analysis for Rule {rule_id}")
        self.resize(600,400)
        layout=QVBoxLayout(self)

        self.impact_text=QTextEdit()
        self.impact_text.setReadOnly(True)
        layout.addWidget(self.impact_text)

        cb=QPushButton("Close")
        cb.clicked.connect(self.close)
        layout.addWidget(cb)
        self.setLayout(layout)
        self.analyze()

    def analyze(self):
        from brm_tool_partA import build_rule_adjacency
        children_map,roots=build_rule_adjacency(self.connection)
        visited=set()
        impacted=set()
        stack=[self.rule_id]
        while stack:
            curr=stack.pop()
            if curr in visited:
                continue
            visited.add(curr)
            if curr in children_map:
                for ch_ in children_map[curr]:
                    impacted.add(ch_)
                    stack.append(ch_)
        self.impact_text.setPlainText(f"Impacted descendant rule IDs: {sorted(impacted)}")

class VersionHistoryDialog(QDialog):
    def __init__(self, connection, rule_id, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.rule_id=rule_id
        self.setWindowTitle(f"Version History for Rule {rule_id}")
        self.resize(800,400)
        layout=QVBoxLayout(self)

        self.history_table=QTableWidget(0,5)
        self.history_table.setHorizontalHeaderLabels(["Audit ID","Action","Timestamp","Old Data","New Data"])
        self.history_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.history_table)

        bh=QHBoxLayout()
        self.rollback_btn=QPushButton("Rollback to Selected Version")
        self.rollback_btn.clicked.connect(self.rollback)
        bh.addWidget(self.rollback_btn)
        cb=QPushButton("Close")
        cb.clicked.connect(self.close)
        bh.addWidget(cb)
        layout.addLayout(bh)

        self.setLayout(layout)
        self.load_history()

    def load_history(self):
        c=self.connection.cursor()
        c.execute("""
        SELECT AUDIT_ID,ACTION,OLD_DATA,NEW_DATA,ACTION_TIMESTAMP
        FROM BRM_AUDIT_LOG
        WHERE TABLE_NAME='BRM_RULES'
          AND RECORD_ID=?
          AND ACTION IN ('INSERT','UPDATE')
        ORDER BY ACTION_TIMESTAMP DESC
        """,(self.rule_id,))
        rows=get_cursor_rows(c)
        self.history_table.setRowCount(0)
        for row in rows:
            r_=self.history_table.rowCount()
            self.history_table.insertRow(r_)
            self.history_table.setItem(r_,0,QTableWidgetItem(str(row["AUDIT_ID"])))
            self.history_table.setItem(r_,1,QTableWidgetItem(row["ACTION"]))
            self.history_table.setItem(r_,2,QTableWidgetItem(str(row["ACTION_TIMESTAMP"])))
            self.history_table.setItem(r_,3,QTableWidgetItem(row["OLD_DATA"] or ""))
            self.history_table.setItem(r_,4,QTableWidgetItem(row["NEW_DATA"] or ""))

    def rollback(self):
        sel=self.history_table.selectedItems()
        if not sel:
            QMessageBox.warning(self,"None","No row selected.")
            return
        row=sel[0].row()
        old_item=self.history_table.item(row,3)
        if not old_item or not old_item.text():
            QMessageBox.warning(self,"No data","No rollback data for that version.")
            return
        confirm=QMessageBox.question(self,"Confirm","Rollback to selected version?")
        if confirm!=QMessageBox.Yes:
            return
        try:
            old_data=json.loads(old_item.text())
            update_rule(self.connection,old_data,"Admin","Admin")
            QMessageBox.information(self,"Rolled Back","Rule rolled back successfully.")
            self.load_history()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

###############################################################################
# RULE DASHBOARD
###############################################################################
class RuleDashboard(QGroupBox):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__("Rule Dashboard", parent)
        self.connection=connection
        self.user_id=user_id
        self.user_group=user_group
        self.selected_rule_id=None
        self.current_page=1
        self.records_per_page=50
        self.total_pages=1

        main_layout=QVBoxLayout(self)

        top_h=QHBoxLayout()
        self.search_edit=QLineEdit()
        self.search_edit.setPlaceholderText("Search name or SQL...")
        top_h.addWidget(QLabel("Search:"))
        top_h.addWidget(self.search_edit)

        self.status_filter=QComboBox()
        self.status_filter.addItem("All Statuses",None)
        self.status_filter.addItem("ACTIVE","ACTIVE")
        self.status_filter.addItem("INACTIVE","INACTIVE")
        self.status_filter.addItem("DELETED","DELETED")
        top_h.addWidget(QLabel("Status:"))
        top_h.addWidget(self.status_filter)
        main_layout.addLayout(top_h)

        self.rule_table=QTableWidget(0,8)
        self.rule_table.setHorizontalHeaderLabels([
            "Rule ID","Name","SQL","Status","Version","Owner Group",
            "Created Timestamp","Approval Status"
        ])
        self.rule_table.horizontalHeader().setStretchLastSection(True)
        self.rule_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.rule_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.rule_table.itemSelectionChanged.connect(self.update_selected_rule_id)
        main_layout.addWidget(self.rule_table)

        nav_h=QHBoxLayout()
        self.prev_btn=QPushButton("Previous")
        self.next_btn=QPushButton("Next")
        self.page_label=QLabel("Page 1/1")
        nav_h.addWidget(self.prev_btn)
        nav_h.addWidget(self.page_label)
        nav_h.addWidget(self.next_btn)
        main_layout.addLayout(nav_h)

        btn_h=QHBoxLayout()
        ref_btn=QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_rules)
        btn_h.addWidget(ref_btn)

        run_btn=QPushButton("Run ETL (Execute Rules)")
        run_btn.clicked.connect(self.run_etl)
        btn_h.addWidget(run_btn)

        analytics_btn=QPushButton("Rule Analytics")
        analytics_btn.clicked.connect(self.show_analytics)
        btn_h.addWidget(analytics_btn)

        simulate_btn=QPushButton("Simulate Rule")
        simulate_btn.clicked.connect(self.simulate_rule)
        btn_h.addWidget(simulate_btn)

        impact_btn=QPushButton("Impact Analysis")
        impact_btn.clicked.connect(self.analyze_impact)
        btn_h.addWidget(impact_btn)

        hist_btn=QPushButton("Version History")
        hist_btn.clicked.connect(self.show_history)
        btn_h.addWidget(hist_btn)

        btn_h.addStretch()
        main_layout.addLayout(btn_h)

        self.setLayout(main_layout)
        self.search_edit.textChanged.connect(self.load_rules)
        self.status_filter.currentIndexChanged.connect(self.load_rules)
        self.prev_btn.clicked.connect(self.prev_page)
        self.next_btn.clicked.connect(self.next_page)

        self.load_rules()

    def build_filter_query(self):
        filters=[]
        params=[]
        txt=self.search_edit.text().strip()
        if txt:
            filters.append("(RULE_NAME LIKE ? OR RULE_SQL LIKE ?)")
            params.extend([f"%{txt}%",f"%{txt}%"])
        st=self.status_filter.currentData()
        if st:
            if st.upper()=="DELETED":
                filters.append("""
                RULE_ID IN(
                  SELECT CAST(RECORD_ID as INT)
                  FROM BRM_AUDIT_LOG
                  WHERE ACTION='DELETE' AND ISNUMERIC(RECORD_ID)=1
                )
                """)
            else:
                filters.append("STATUS=?")
                params.append(st)
        clause=" AND ".join(filters) if filters else "1=1"
        return clause,params

    def load_rules(self):
        c=self.connection.cursor()
        clause,params=self.build_filter_query()

        count_q=f"SELECT COUNT(*) as ccount FROM BRM_RULES WHERE {clause}"
        c.execute(count_q,params)
        rowc=get_cursor_one(c)
        total=rowc["ccount"] if rowc else 0
        self.total_pages=max(1,(total+self.records_per_page-1)//self.records_per_page)
        if self.current_page>self.total_pages:
            self.current_page=self.total_pages
        elif self.current_page<1:
            self.current_page=1
        self.page_label.setText(f"Page {self.current_page}/{self.total_pages}")
        offset=(self.current_page-1)*self.records_per_page

        data_q=f"""
        SELECT RULE_ID,RULE_NAME,RULE_SQL,STATUS,VERSION,OWNER_GROUP,
               CREATED_TIMESTAMP,APPROVAL_STATUS
        FROM BRM_RULES
        WHERE {clause}
        ORDER BY RULE_ID DESC
        OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
        """
        c.execute(data_q,(*params,offset,self.records_per_page))
        rows=get_cursor_rows(c)
        self.rule_table.setRowCount(0)
        for rd in rows:
            r_=self.rule_table.rowCount()
            self.rule_table.insertRow(r_)
            self.rule_table.setItem(r_,0,QTableWidgetItem(str(rd["RULE_ID"])))
            self.rule_table.setItem(r_,1,QTableWidgetItem(rd["RULE_NAME"]))
            self.rule_table.setItem(r_,2,QTableWidgetItem(rd["RULE_SQL"]))

            st_item=QTableWidgetItem(rd["STATUS"])
            if rd["STATUS"].lower()=="active":
                st_item.setBackground(QColor(144,238,144))
            else:
                st_item.setBackground(QColor(255,182,193))
            self.rule_table.setItem(r_,3,st_item)

            self.rule_table.setItem(r_,4,QTableWidgetItem(str(rd["VERSION"])))
            self.rule_table.setItem(r_,5,QTableWidgetItem(rd["OWNER_GROUP"]))
            self.rule_table.setItem(r_,6,QTableWidgetItem(str(rd["CREATED_TIMESTAMP"])))
            self.rule_table.setItem(r_,7,QTableWidgetItem(rd["APPROVAL_STATUS"]))

    def update_selected_rule_id(self):
        sel=self.rule_table.selectedItems()
        if not sel:
            self.selected_rule_id=None
            return
        row=sel[0].row()
        it=self.rule_table.item(row,0)
        if it:
            self.selected_rule_id=int(it.text())

    def get_selected_rule_ids(self):
        idxs=self.rule_table.selectionModel().selectedRows()
        rids=[]
        for i in idxs:
            row=i.row()
            it=self.rule_table.item(row,0)
            if it:
                rids.append(int(it.text()))
        return rids

    def prev_page(self):
        if self.current_page>1:
            self.current_page-=1
            self.load_rules()

    def next_page(self):
        if self.current_page<self.total_pages:
            self.current_page+=1
            self.load_rules()

    def run_etl(self):
        executed,skipped=execute_rules_in_order(self.connection)
        msg=f"ETL finished.\nExecuted: {executed}\nSkipped: {list(skipped)}"
        QMessageBox.information(self,"ETL",msg)
        self.load_rules()

    def show_analytics(self):
        dlg=RuleAnalyticsDialog(self.connection,self)
        dlg.exec_()

    def simulate_rule(self):
        if not self.selected_rule_id:
            QMessageBox.warning(self,"No Selection","Select a rule first.")
            return
        c=self.connection.cursor()
        c.execute("SELECT RULE_SQL FROM BRM_RULES WHERE RULE_ID=?",(self.selected_rule_id,))
        row=get_cursor_one(c)
        if not row:
            QMessageBox.warning(self,"Not Found","Rule SQL not found.")
            return
        dlg=RuleSimulationDialog(self.connection,row["RULE_SQL"],self)
        dlg.exec_()

    def analyze_impact(self):
        if not self.selected_rule_id:
            QMessageBox.warning(self,"No Selection","Select a rule first.")
            return
        dlg=ImpactAnalysisDialog(self.connection,self.selected_rule_id,self)
        dlg.exec_()

    def show_history(self):
        if not self.selected_rule_id:
            QMessageBox.warning(self,"No Selection","Select a rule to view version history.")
            return
        dlg=VersionHistoryDialog(self.connection,self.selected_rule_id,self)
        dlg.exec_()

###############################################################################
# MAIN WINDOW
###############################################################################
class BRMTool(QMainWindow):
    """
    Part B â€“ Fully Complete Code. Requires brm_tool_partA.py in the same folder.
    """
    def __init__(self):
        super().__init__()
        self.setWindowTitle("BRM Tool â€“ Part B (Fully Complete)")
        self.resize(1280,800)
        self.connection=None

        # DB Connection
        db_dlg=DatabaseConnectionDialog()
        if db_dlg.exec_()==QDialog.Accepted:
            self.connection=db_dlg.get_connection()
            if not self.connection:
                sys.exit(1)
        else:
            sys.exit(0)

        # Login
        login=LoginDialog(self.connection)
        if login.exec_()!=QDialog.Accepted:
            sys.exit(0)
        self.user_id=login.user_id

        c=self.connection.cursor()
        c.execute("SELECT USERNAME,USER_GROUP FROM USERS WHERE USER_ID=?",(self.user_id,))
        row=c.fetchone()
        if not row:
            sys.exit(0)
        self.logged_in_username=row[0]
        self.user_group=row[1]

        self.init_ui()

    def init_ui(self):
        menubar=self.menuBar()
        fileMenu=menubar.addMenu("File")

        syncAction=QtWidgets.QAction("Sync Metadata",self)
        syncAction.triggered.connect(lambda: sync_metadata(self.connection))
        fileMenu.addAction(syncAction)

        metricsAction=QtWidgets.QAction("View Metrics Dashboard",self)
        metricsAction.triggered.connect(self.show_metrics_dashboard)
        fileMenu.addAction(metricsAction)

        schedAction=QtWidgets.QAction("Schedule a Rule",self)
        schedAction.triggered.connect(self.schedule_a_rule)
        fileMenu.addAction(schedAction)

        cw=QWidget()
        layout=QVBoxLayout(cw)

        # Admin can impersonate
        if self.user_group=="Admin":
            top_h=QHBoxLayout()
            self.switch_combo=QComboBox()
            self.switch_btn=QPushButton("Switch User")
            self.switch_btn.clicked.connect(self.on_switch_user)
            top_h.addWidget(QLabel("Impersonate:"))
            top_h.addWidget(self.switch_combo)
            top_h.addWidget(self.switch_btn)
            top_h.addStretch()
            layout.addLayout(top_h)
            self.populate_switch_combo()

        self.tabs=QTabWidget()
        layout.addWidget(self.tabs)

        # 1) Business Rule Management
        self.brm_tab=BusinessRuleManagementTab(self,self.connection,self.user_id,self.user_group)
        self.tabs.addTab(self.brm_tab,"Business Rule Management")

        # 2) Group Management
        self.grp_mgmt_tab=GroupManagementTab(self,self.connection,self.user_id,self.user_group)
        self.tabs.addTab(self.grp_mgmt_tab,"Group Management")

        # 3) User Management
        self.user_mgmt_tab=UserManagementTab(self.connection)
        self.tabs.addTab(self.user_mgmt_tab,"User Management")

        # 4) Multi-step Approvals
        self.approv_tab=MultiStepApprovalTab(self.connection,self.logged_in_username,self.user_group)
        self.tabs.addTab(self.approv_tab,"Approvals")

        # 5) Schedule Management
        self.schedule_tab=ScheduleManagementTab(self.connection)
        self.tabs.addTab(self.schedule_tab,"Schedule Management")

        # 6) Metrics
        self.metrics_tab=MetricsDashboardTab(self.connection)
        self.tabs.addTab(self.metrics_tab,"Metrics Dashboard")

        # 7) DecisionTable
        self.dec_tab=DecisionTableTab(self.connection,self.user_group)
        self.tabs.addTab(self.dec_tab,"Decision Tables")

        # 8) ConflictPriority
        self.conf_tab=ConflictPriorityManagerTab(self.connection)
        self.tabs.addTab(self.conf_tab,"Priorities & Conflicts")

        # 9) Composite
        self.comp_tab=CompositeRuleTab(self.connection)
        self.tabs.addTab(self.comp_tab,"Composite Rules")

        # 10) Rule Chaining
        self.chain_tab=RuleChainingActionsTab(self.connection)
        self.tabs.addTab(self.chain_tab,"Rule Chaining")

        # 11) Snapshots
        self.snap_tab=SnapshotManagerTab(self.connection)
        self.tabs.addTab(self.snap_tab,"Snapshots")

        # 12) Tags
        self.tags_tab=RuleTagsManagerTab(self.connection)
        self.tabs.addTab(self.tags_tab,"Tags")

        # 13) Data Validation
        self.dv_tab=DataValidationTab(self.connection)
        self.tabs.addTab(self.dv_tab,"Data Validation")

        # 14) Hierarchy
        self.hier_tab=HierarchyViewTab(self.connection)
        self.tabs.addTab(self.hier_tab,"Hierarchy View")

        # 15) EnhancedLineageGraphWidget
        lw_container=QWidget()
        lw_layout=QVBoxLayout(lw_container)
        lb=QLabel("Lineage Visualization")
        lb.setStyleSheet("font-weight:bold;")
        lw_layout.addWidget(lb)
        self.lineage_tab=EnhancedLineageGraphWidget(self.connection)
        lw_layout.addWidget(self.lineage_tab)
        s_h=QHBoxLayout()
        self.lineage_search=QLineEdit()
        self.lineage_search.setPlaceholderText("Search rule/table/col info...")
        s_btn=QPushButton("Search")
        s_btn.clicked.connect(lambda: self.lineage_tab.search_nodes(self.lineage_search.text()))
        rst_btn=QPushButton("Reset View")
        rst_btn.clicked.connect(self.lineage_tab.resetView)
        ref_btn=QPushButton("Refresh Graph")
        ref_btn.clicked.connect(self.lineage_tab.populate_graph)
        s_h.addWidget(self.lineage_search)
        s_h.addWidget(s_btn)
        s_h.addWidget(rst_btn)
        s_h.addWidget(ref_btn)
        s_h.addStretch()
        lw_layout.addLayout(s_h)
        lw_container.setLayout(lw_layout)
        self.tabs.addTab(lw_container,"Lineage Visualization")

        cw.setLayout(layout)
        self.setCentralWidget(cw)

        # Timers
        self.approv_timer=QTimer(self)
        self.approv_timer.timeout.connect(self.approv_tab.load_approvals)
        self.approv_timer.start(5000)

        self.schedule_timer=QTimer(self)
        self.schedule_timer.timeout.connect(self.check_due_schedules)
        self.schedule_timer.start(60000)

        self.escalation_timer=QTimer(self)
        self.escalation_timer.timeout.connect(lambda: check_for_escalations(self.connection))
        self.escalation_timer.start(3600000)

        self.show()

    def populate_switch_combo(self):
        c=self.connection.cursor()
        c.execute("SELECT USER_ID,USERNAME,USER_GROUP FROM USERS ORDER BY USER_ID")
        rows=c.fetchall()
        for row in rows:
            disp=f"{row[1]} ({row[2]})"
            self.switch_combo.addItem(disp,(row[0],row[2]))

    def on_switch_user(self):
        data=self.switch_combo.currentData()
        if not data:
            return
        new_uid,new_grp=data
        if new_uid==self.user_id and new_grp==self.user_group:
            return
        self.user_id=new_uid
        self.user_group=new_grp
        QMessageBox.information(self,"Switched",
                                f"Now impersonating user {new_uid} with group {new_grp}.")

    def show_metrics_dashboard(self):
        dlg=QDialog(self)
        dlg.setWindowTitle("Metrics Dashboard")
        dlg.resize(800,600)
        l_=QVBoxLayout(dlg)
        mt=MetricsDashboardTab(self.connection)
        l_.addWidget(mt)
        cb=QPushButton("Close")
        cb.clicked.connect(dlg.close)
        l_.addWidget(cb)
        dlg.exec_()

    def schedule_a_rule(self):
        dlg=RuleSchedulerDialog(self.connection,self)
        dlg.exec_()

    def check_due_schedules(self):
        c=self.connection.cursor()
        now=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute("""
        SELECT SCHEDULE_ID,RULE_ID,SCHEDULE_TIME
        FROM RULE_SCHEDULES
        WHERE SCHEDULE_TIME<=? AND STATUS='Scheduled'
        """,(now,))
        due=get_cursor_rows(c)
        for item in due:
            rid=item["RULE_ID"]
            c2=self.connection.cursor()
            c2.execute("SELECT RULE_SQL FROM BRM_RULES WHERE RULE_ID=?",(rid,))
            row=c2.fetchone()
            if row:
                sql_=row[0]
                ok,msg=run_rule_sql(self.connection,sql_)
                logger.info(f"Scheduled rule {rid} => {'PASS' if ok else 'FAIL'}: {msg}")
            c2.execute("UPDATE RULE_SCHEDULES SET STATUS='Executed' WHERE SCHEDULE_ID=?",(item["SCHEDULE_ID"],))
        self.connection.commit()
        self.schedule_tab.load_schedules()

    def launch_audit_log_viewer(self):
        dlg=AuditLogViewer(self.connection,self.user_group,self)
        dlg.exec_()

    def launch_search_rule_dialog(self):
        dlg=SearchRuleDialog(self.connection,self.user_group,self)
        dlg.exec_()

    def closeEvent(self,event):
        if self.connection:
            try:
                self.connection.close()
            except:
                pass
        event.accept()

def main():
    app=QApplication(sys.argv)
    app.setStyle("Fusion")
    w=BRMTool()
    w.show()
    sys.exit(app.exec_())

if __name__=="__main__":
    main()