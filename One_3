#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_simulation_scheduler.py
Description:
  Provides advanced simulation and scheduling capabilities for the BRM Tool.
  - SingleRuleSimulationDialog, ChainSimulationDialog, GroupSimulationDialog:
      * BFS-based dry-run or real-run with pass/fail capturing.
      * Optionally skip data validations.
  - EnhancedScheduleDialog for scheduling a rule (pick date/time, validations).
  - ScheduleManagementTab to view schedules, auto-refresh, handle CRUD.
  - A helper 'check_due_schedules' function for main aggregator to run periodically.

Dependencies:
  - brm_rule_engine (for BFS logic, e.g. execute_rules_bfs)
  - brm_core_foundation for logging and db helpers
"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, time, pyodbc
from datetime import datetime
from collections import deque
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QDate, QTime, QTimer
from PyQt5.QtWidgets import (
    QDialog, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QComboBox,
    QMessageBox, QPlainTextEdit, QCalendarWidget, QTimeEdit, QInputDialog, QTableWidget, QTableWidgetItem
)
from brm_rule_engine import execute_rules_bfs
from brm_core_foundation import logger

class SingleRuleSimulationDialog(QtWidgets.QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Single Rule Simulation")
        self.resize(550, 400)
        layout = QVBoxLayout(self)
        form_layout = QHBoxLayout()
        form_layout.addWidget(QLabel("Select Rule:"))
        self.rule_combo = QComboBox()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        for (rid, rn) in c.fetchall():
            self.rule_combo.addItem(f"{rid} - {rn}", rid)
        form_layout.addWidget(self.rule_combo)
        layout.addLayout(form_layout)
        self.skip_val_cb = QtWidgets.QCheckBox("Skip Data Validations?")
        layout.addWidget(self.skip_val_cb)
        self.result_text = QPlainTextEdit()
        self.result_text.setReadOnly(True)
        layout.addWidget(self.result_text)
        btn_layout = QHBoxLayout()
        run_btn = QPushButton("Run Simulation")
        run_btn.clicked.connect(self.do_sim)
        btn_layout.addWidget(run_btn)
        close_btn = QPushButton("Close")
        close_btn.clicked.connect(self.close)
        btn_layout.addWidget(close_btn)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        self.setLayout(layout)
    def do_sim(self):
        rid = self.rule_combo.currentData()
        skip_val = self.skip_val_cb.isChecked()
        executed, skipped, failed_val = execute_rules_bfs(self.connection, [rid], skip_data_validation=skip_val)
        msg = (f"Single BFS from rule {rid}:\n"
               f"Executed: {executed}\nSkipped: {list(skipped)}\nValidation Failed: {list(failed_val)}")
        self.result_text.setPlainText(msg)
        QMessageBox.information(self, "Simulation", msg)

class ChainSimulationDialog(QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Chain Simulation - BFS")
        self.resize(550, 400)
        layout = QVBoxLayout(self)
        top_h = QHBoxLayout()
        top_h.addWidget(QLabel("Select Parent Rule:"))
        self.rule_combo = QComboBox()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        for (rid, rn) in c.fetchall():
            self.rule_combo.addItem(f"{rid} - {rn}", rid)
        top_h.addWidget(self.rule_combo)
        layout.addLayout(top_h)
        self.skip_val_cb = QtWidgets.QCheckBox("Skip Data Validations?")
        layout.addWidget(self.skip_val_cb)
        self.result_text = QPlainTextEdit()
        self.result_text.setReadOnly(True)
        layout.addWidget(self.result_text)
        btn_h = QHBoxLayout()
        run_btn = QPushButton("Run Chain BFS")
        run_btn.clicked.connect(self.do_sim)
        btn_h.addWidget(run_btn)
        close_btn = QPushButton("Close")
        close_btn.clicked.connect(self.close)
        btn_h.addWidget(close_btn)
        btn_h.addStretch()
        layout.addLayout(btn_h)
        self.setLayout(layout)
    def do_sim(self):
        rid = self.rule_combo.currentData()
        skip_val = self.skip_val_cb.isChecked()
        executed, skipped, failed_val = execute_rules_bfs(self.connection, [rid], skip_data_validation=skip_val)
        msg = (f"Chain BFS from rule {rid}:\n"
               f"Executed: {executed}\nSkipped: {list(skipped)}\nValidation Failed: {list(failed_val)}")
        self.result_text.setPlainText(msg)
        QMessageBox.information(self, "Chain Simulation", msg)

class GroupSimulationDialog(QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Custom Group Simulation - BFS")
        self.resize(600, 450)
        layout = QVBoxLayout(self)
        top_h = QHBoxLayout()
        top_h.addWidget(QLabel("Select Custom Group:"))
        self.group_combo = QComboBox()
        c = self.connection.cursor()
        c.execute("SELECT CUSTOM_GROUP_ID, CUSTOM_GROUP_NAME FROM BRM_CUSTOM_RULE_GROUPS ORDER BY CUSTOM_GROUP_ID")
        for (cid, gn) in c.fetchall():
            self.group_combo.addItem(f"{cid} - {gn}", cid)
        top_h.addWidget(self.group_combo)
        layout.addLayout(top_h)
        self.skip_val_cb = QtWidgets.QCheckBox("Skip Data Validations?")
        layout.addWidget(self.skip_val_cb)
        self.result_text = QPlainTextEdit()
        self.result_text.setReadOnly(True)
        layout.addWidget(self.result_text)
        btn_h = QHBoxLayout()
        run_btn = QPushButton("Run Group BFS")
        run_btn.clicked.connect(self.do_sim)
        btn_h.addWidget(run_btn)
        close_btn = QPushButton("Close")
        close_btn.clicked.connect(self.close)
        btn_h.addWidget(close_btn)
        btn_h.addStretch()
        layout.addLayout(btn_h)
        self.setLayout(layout)
    def do_sim(self):
        cg_id = self.group_combo.currentData()
        skip_val = self.skip_val_cb.isChecked()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID FROM BRM_CUSTOM_GROUP_MEMBERS WHERE CUSTOM_GROUP_ID=?", (cg_id,))
        rules = [r[0] for r in c.fetchall()]
        if not rules:
            QMessageBox.warning(self, "Empty", "No rules in that custom group.")
            return
        executed, skipped, failed_val = execute_rules_bfs(self.connection, rules, skip_data_validation=skip_val)
        msg = (f"Group BFS for group {cg_id}:\n"
               f"Executed: {executed}\nSkipped: {list(skipped)}\nValidation Failed: {list(failed_val)}")
        self.result_text.setPlainText(msg)
        QMessageBox.information(self, "Group Simulation", msg)

class EnhancedScheduleDialog(QDialog):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Advanced Scheduling - BRM Tool")
        self.resize(420, 300)
        layout = QVBoxLayout(self)
        self.rule_combo = QComboBox()
        c = self.connection.cursor()
        c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
        for (rid, rn) in c.fetchall():
            self.rule_combo.addItem(f"{rid} - {rn}", rid)
        self.calendar = QCalendarWidget()
        self.calendar.setSelectedDate(QtCore.QDate.currentDate())
        self.calendar.setGridVisible(True)
        self.time_edit = QTimeEdit(QtCore.QTime.currentTime())
        self.time_edit.setDisplayFormat("HH:mm:ss")
        self.run_val_cb = QtWidgets.QCheckBox("Run Data Validations before execution?")
        form_layout = QVBoxLayout()
        row1 = QHBoxLayout()
        row1.addWidget(QLabel("Select Rule:"))
        row1.addWidget(self.rule_combo)
        form_layout.addLayout(row1)
        form_layout.addWidget(QLabel("Select Date:"))
        form_layout.addWidget(self.calendar)
        row2 = QHBoxLayout()
        row2.addWidget(QLabel("Select Time:"))
        row2.addWidget(self.time_edit)
        form_layout.addLayout(row2)
        form_layout.addWidget(self.run_val_cb)
        layout.addLayout(form_layout)
        btn_h = QHBoxLayout()
        sch_btn = QPushButton("Schedule")
        sch_btn.clicked.connect(self.do_schedule)
        btn_h.addWidget(sch_btn)
        close_btn = QPushButton("Close")
        close_btn.clicked.connect(self.close)
        btn_h.addWidget(close_btn)
        btn_h.addStretch()
        layout.addLayout(btn_h)
        self.setLayout(layout)
    def do_schedule(self):
        rid = self.rule_combo.currentData()
        date_str = self.calendar.selectedDate().toString("yyyy-MM-dd")
        time_str = self.time_edit.time().toString("HH:mm:ss")
        dt_str = f"{date_str} {time_str}"
        run_val = 1 if self.run_val_cb.isChecked() else 0
        c = self.connection.cursor()
        try:
            c.execute("INSERT INTO RULE_SCHEDULES(RULE_ID, SCHEDULE_TIME, STATUS, CREATED_TIMESTAMP, VALIDATION_FLAG) VALUES(?, ?, 'Scheduled', GETDATE(), ?)", (rid, dt_str, run_val))
            self.connection.commit()
            QMessageBox.information(self, "Scheduled", f"Rule {rid} scheduled at {dt_str}.")
            self.close()
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Scheduling failed: {ex}")

class ScheduleManagementTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        layout = QVBoxLayout(self)
        self.schedule_table = QTableWidget(0, 6)
        self.schedule_table.setHorizontalHeaderLabels(["ScheduleID", "RuleID", "ScheduleTime", "Status", "RunValidations?", "Actions"])
        self.schedule_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.schedule_table)
        btn_h = QHBoxLayout()
        ref_btn = QPushButton("Refresh Schedules")
        ref_btn.clicked.connect(self.load_schedules)
        btn_h.addWidget(ref_btn)
        add_btn = QPushButton("Add New Schedule")
        add_btn.clicked.connect(self.add_schedule)
        btn_h.addWidget(add_btn)
        btn_h.addStretch()
        layout.addLayout(btn_h)
        self.setLayout(layout)
        self.load_schedules()
    def load_schedules(self):
        self.schedule_table.setRowCount(0)
        c = self.connection.cursor()
        c.execute("SELECT TOP 1000 SCHEDULE_ID, RULE_ID, SCHEDULE_TIME, STATUS, VALIDATION_FLAG FROM RULE_SCHEDULES ORDER BY SCHEDULE_TIME DESC")
        rows = c.fetchall()
        for row in rows:
            r_i = self.schedule_table.rowCount()
            self.schedule_table.insertRow(r_i)
            for col_i in range(5):
                self.schedule_table.setItem(r_i, col_i, QTableWidgetItem(str(row[col_i])))
            act_widget = QWidget()
            ah = QHBoxLayout(act_widget)
            ah.setContentsMargins(0, 0, 0, 0)
            upd_btn = QPushButton("Update")
            upd_btn.clicked.connect(lambda _, idx=r_i: self.update_schedule(idx))
            del_btn = QPushButton("Delete")
            del_btn.clicked.connect(lambda _, idx=r_i: self.delete_schedule(idx))
            ah.addWidget(upd_btn)
            ah.addWidget(del_btn)
            ah.addStretch()
            self.schedule_table.setCellWidget(r_i, 5, act_widget)
        self.schedule_table.resizeColumnsToContents()
    def add_schedule(self):
        dlg = EnhancedScheduleDialog(self.connection, self)
        dlg.exec_()
        self.load_schedules()
    def update_schedule(self, row_idx):
        it = self.schedule_table.item(row_idx, 0)
        if not it:
            return
        sch_id = int(it.text())
        new_dt, ok = QInputDialog.getText(self, "Update Schedule", "Enter new datetime (YYYY-MM-DD HH:mm:ss):")
        if not ok or not new_dt.strip():
            return
        c = self.connection.cursor()
        try:
            c.execute("UPDATE RULE_SCHEDULES SET SCHEDULE_TIME=? WHERE SCHEDULE_ID=?", (new_dt.strip(), sch_id))
            self.connection.commit()
            QMessageBox.information(self, "Updated", f"Schedule {sch_id} updated.")
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))
        self.load_schedules()
    def delete_schedule(self, row_idx):
        it = self.schedule_table.item(row_idx, 0)
        if not it:
            return
        sch_id = int(it.text())
        confirm = QMessageBox.question(self, "Confirm", f"Delete schedule {sch_id}?")
        if confirm != QMessageBox.Yes:
            return
        c = self.connection.cursor()
        try:
            c.execute("DELETE FROM RULE_SCHEDULES WHERE SCHEDULE_ID=?", (sch_id,))
            self.connection.commit()
            QMessageBox.information(self, "Deleted", f"Schedule {sch_id} deleted.")
        except Exception as ex:
            QMessageBox.critical(self, "Error", str(ex))
        self.load_schedules()

def check_due_schedules(conn):
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c = conn.cursor()
    c.execute("SELECT SCHEDULE_ID, RULE_ID, SCHEDULE_TIME, VALIDATION_FLAG FROM RULE_SCHEDULES WHERE STATUS='Scheduled' AND SCHEDULE_TIME<=?", (now_str,))
    rows = c.fetchall()
    executed_count, failed_count = 0, 0
    for row in rows:
        sch_id, rule_id, dt, val_flag = row
        try:
            executed, skipped, _ = execute_rules_bfs(conn, [rule_id], skip_data_validation=(False if val_flag==1 else True))
            if rule_id in executed:
                c2 = conn.cursor()
                c2.execute("UPDATE RULE_SCHEDULES SET STATUS='Executed' WHERE SCHEDULE_ID=?", (sch_id,))
                conn.commit()
                executed_count += 1
            else:
                c2 = conn.cursor()
                c2.execute("UPDATE RULE_SCHEDULES SET STATUS='Failed' WHERE SCHEDULE_ID=?", (sch_id,))
                conn.commit()
                failed_count += 1
        except Exception:
            c2 = conn.cursor()
            c2.execute("UPDATE RULE_SCHEDULES SET STATUS='Failed' WHERE SCHEDULE_ID=?", (sch_id,))
            conn.commit()
            failed_count += 1
    return (executed_count, failed_count)
