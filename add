def add_rule(conn, rule_data, created_by, user_group):
    c = conn.cursor()
    # 1) Duplicate check by (OWNER_GROUP,RULE_NAME)
    c.execute("SELECT RULE_ID FROM BRM_RULES WHERE OWNER_GROUP=? AND RULE_NAME=?",
              (rule_data["OWNER_GROUP"], rule_data["RULE_NAME"].strip()))
    if c.fetchone():
        raise ValueError("Duplicate rule name in that group.")

    if rule_data.get("IS_GLOBAL", 0) == 1 and user_group != "Admin":
        raise ValueError("Only Admin can create global rule.")

    # Determine OPERATION_TYPE from SQL
    op_type = detect_operation_type(rule_data["RULE_SQL"])
    rule_data["OPERATION_TYPE"] = op_type

    # The correct INSERT with 22 columns and 22 placeholders:
    c.execute("""
    INSERT INTO BRM_RULES(
        GROUP_ID,
        PARENT_RULE_ID,
        RULE_TYPE_ID,
        RULE_NAME,
        RULE_SQL,
        EFFECTIVE_START_DATE,
        EFFECTIVE_END_DATE,
        STATUS,
        VERSION,
        CREATED_BY,
        DESCRIPTION,
        OPERATION_TYPE,
        BUSINESS_JUSTIFICATION,
        CREATED_TIMESTAMP,
        UPDATED_BY,
        OWNER_GROUP,
        CLUSTER_NAME,
        APPROVAL_STATUS,
        IS_GLOBAL,
        CRITICAL_RULE,
        CRITICAL_SCOPE,
        CDC_TYPE
    )
    VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
    """, (
        rule_data.get("GROUP_ID"),
        rule_data.get("PARENT_RULE_ID"),
        rule_data["RULE_TYPE_ID"],
        rule_data["RULE_NAME"].strip(),
        rule_data["RULE_SQL"],
        rule_data["EFFECTIVE_START_DATE"],
        rule_data.get("EFFECTIVE_END_DATE"),
        rule_data.get("STATUS", "INACTIVE"),
        1,                          # VERSION
        created_by,                 # CREATED_BY
        rule_data.get("DESCRIPTION", ""),
        op_type,                    # OPERATION_TYPE
        rule_data.get("BUSINESS_JUSTIFICATION", ""),
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),  # CREATED_TIMESTAMP
        None,                       # UPDATED_BY
        rule_data["OWNER_GROUP"],
        rule_data.get("CLUSTER_NAME", ""),
        "APPROVAL_IN_PROGRESS",
        rule_data.get("IS_GLOBAL", 0),
        rule_data.get("CRITICAL_RULE", 0),
        rule_data.get("CRITICAL_SCOPE", "NONE"),
        rule_data.get("CDC_TYPE", "NONE")  # The 22nd column
    ))
    new_id = c.execute("SELECT SCOPE_IDENTITY()").fetchone()[0]

    # Next, parse table dependencies as needed (DML or SELECT logic).
    # e.g. do advanced_extract_tables(...) + columns if it's an INSERT or UPDATE
    # ...
    # Then add the audit log:
    add_audit_log(conn, "INSERT", "BRM_RULES", new_id, created_by, None, rule_data)
    conn.commit()
    return new_id