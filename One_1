

"""
Module: brm_core_foundation.py
Description: 
  The fundamental “core” module for the advanced BRM Tool. 
  Includes:
    • Centralized logging config
    • EmailNotifier class
    • DatabaseConnectionDialog
    • Basic DB helpers (fetch, audit insertion)
    • A robust LockManager for rules 
    • Advanced SQL parsing (parse_sql_dependencies, detect_operation_type)
    • LoginDialog for user auth
    • OnboardingWizard (optional usage)
    
All references are fully implemented (no minimal stubs).
"""

import os
import sys
import json
import logging
import logging.config
import smtplib
import pyodbc
import sqlparse
import re
from datetime import datetime, timedelta
from collections import deque
from email.mime.text import MIMEText

# PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QLabel, QLineEdit, QPushButton, QHBoxLayout,
    QMessageBox, QComboBox, QPlainTextEdit, QCalendarWidget, QTimeEdit,
    QFormLayout, QWidget, QCheckBox
)

###############################################################################
# 1) LOGGING CONFIG
###############################################################################

# You can adapt to a dictionary-based config or environment-based config.
# For demonstration, we do a simpler approach with a file-based approach.

LOG_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "standard",
            "level": "DEBUG"
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": os.getenv("BRM_LOG_FILE", "brm_core.log"),
            "formatter": "standard",
            "level": os.getenv("BRM_LOG_LEVEL", "INFO")
        }
    },
    "root": {
        "handlers": ["console","file"],
        "level": "DEBUG"
    }
}

logging.config.dictConfig(LOG_CONFIG)
logger = logging.getLogger("brm_core_foundation")

###############################################################################
# 2) EMAIL NOTIFIER
###############################################################################
class EmailNotifier:
    """
    Sends emails via SMTP. 
    Configuration is either from environment variables or given as placeholders below.
    """
    def __init__(self):
        self.smtp_server = os.getenv("BRM_SMTP_SERVER", "smtp.example.com")
        self.smtp_port = int(os.getenv("BRM_SMTP_PORT", 587))
        self.smtp_username = os.getenv("BRM_SMTP_USERNAME", "your_smtp_user")
        self.smtp_password = os.getenv("BRM_SMTP_PASSWORD", "your_smtp_pass")
        self.sender_email = os.getenv("BRM_SENDER_EMAIL", "noreply@example.com")

    def send_email(self, subject: str, body: str, recipients: list):
        if not recipients:
            logger.warning("No recipients provided for email.")
            return
        try:
            msg = MIMEText(body, 'plain')
            msg['Subject'] = subject
            msg['From'] = self.sender_email
            msg['To'] = ", ".join(recipients)

            smtp = smtplib.SMTP(self.smtp_server, self.smtp_port)
            smtp.starttls()
            smtp.login(self.smtp_username, self.smtp_password)
            smtp.sendmail(self.sender_email, recipients, msg.as_string())
            smtp.quit()
            logger.info(f"Email sent to {recipients}")
        except Exception as e:
            logger.error(f"Error sending email to {recipients}: {e}")
            raise

###############################################################################
# 3) DATABASE CONNECTION DIALOG
###############################################################################
class DatabaseConnectionDialog(QtWidgets.QDialog):
    """
    Allows user to pick an ODBC DSN or enter a custom ODBC connection string.
    On accept, we store the pyodbc connection in self.connection
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.connection = None
        self.setWindowTitle("DB Connection – BRM Tool")
        self.resize(400,200)

        main_layout = QVBoxLayout(self)
        lbl = QLabel("Select an ODBC DSN or provide a custom connection string:")
        main_layout.addWidget(lbl)

        self.dsn_combo = QComboBox()
        try:
            dsn_dict = pyodbc.dataSources()
            for dsn_name, driver in dsn_dict.items():
                if "SQL SERVER" in driver.upper():
                    self.dsn_combo.addItem(f"ODBC DSN: {dsn_name}", dsn_name)
        except Exception as ex:
            logger.error(f"Error listing DSNs: {ex}")
        main_layout.addWidget(self.dsn_combo)

        self.conn_str_edit = QLineEdit()
        self.conn_str_edit.setPlaceholderText("Or enter custom ODBC connection string (optional)")
        main_layout.addWidget(self.conn_str_edit)

        btn_h = QHBoxLayout()
        ok_btn = QPushButton("Connect")
        ok_btn.clicked.connect(self.accept)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        btn_h.addWidget(ok_btn)
        btn_h.addWidget(cancel_btn)
        main_layout.addLayout(btn_h)

    def get_connection(self):
        """
        If accepted, returns pyodbc connection or None if fails.
        """
        custom_str = self.conn_str_edit.text().strip()
        if custom_str:
            conn_str = custom_str
        else:
            sel = self.dsn_combo.currentData()
            if not sel:
                QMessageBox.critical(self,"Error","No DSN or custom connection string provided.")
                return None
            conn_str = f"DSN={sel};Trusted_Connection=yes;"

        try:
            conn = pyodbc.connect(conn_str)
            logger.info("Database connection established successfully.")
            return conn
        except Exception as ex:
            QMessageBox.critical(self,"Connection Error",str(ex))
            logger.error(f"DB connection failed: {ex}")
            return None

    def accept(self):
        test_conn = self.get_connection()
        if test_conn:
            self.connection = test_conn
            super().accept()
        else:
            # remain
            pass

###############################################################################
# 4) DATABASE HELPER FUNCTIONS
###############################################################################
def fetch_all_dict(cursor):
    """
    Fetch all rows into a list of dictionaries. If no cursor.description => raw rows.
    """
    rows = cursor.fetchall()
    if cursor.description:
        colnames = [d[0] for d in cursor.description]
        out=[]
        for r_ in rows:
            out.append(dict(zip(colnames, r_)))
        return out
    else:
        return rows

def fetch_one_dict(cursor):
    """
    Fetch next row as dict or None.
    """
    row = cursor.fetchone()
    if row and cursor.description:
        colnames = [d[0] for d in cursor.description]
        return dict(zip(colnames, row))
    return None

def insert_audit_log(conn, action, table_name, record_id, actor, old_data=None, new_data=None):
    """
    Insert an audit record into BRM_AUDIT_LOG with optional old/new data as JSON.
    """
    try:
        c=conn.cursor()
        c.execute("""
            INSERT INTO BRM_AUDIT_LOG(
                ACTION, TABLE_NAME, RECORD_ID, ACTION_BY,
                OLD_DATA, NEW_DATA, ACTION_TIMESTAMP
            )
            VALUES(?,?,?,?,?,?,GETDATE())
        """,(action, table_name, str(record_id) if record_id else None, actor,
             json.dumps(old_data) if old_data else None,
             json.dumps(new_data) if new_data else None))
        conn.commit()
        logger.debug(f"Audit log inserted => action={action}, table={table_name}, rec_id={record_id}, actor={actor}")
    except Exception as ex:
        logger.error(f"Error inserting audit log: {ex}")


###############################################################################
# 5) LOCK MANAGER
###############################################################################
class LockManager:
    """
    Provides advanced lock/unlock with expiry. We assume a BRM_RULE_LOCKS table:
      - RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK(bit), ACTIVE_LOCK(bit)
    Expiry can be e.g. 30 minutes. If expired => we treat as not locked, and we can auto-clean.
    """

    @staticmethod
    def auto_unlock_expired_locks(conn):
        """
        Periodically run this to free up expired locks.
        """
        now = datetime.now()
        c=conn.cursor()
        c.execute("""
            UPDATE BRM_RULE_LOCKS
            SET ACTIVE_LOCK=0
            WHERE ACTIVE_LOCK=1
              AND EXPIRY_TIMESTAMP < ?
        """,(now,))
        rc = c.rowcount
        conn.commit()
        if rc>0:
            logger.info(f"Auto-unlocked {rc} expired rule locks.")

    @staticmethod
    def rule_current_lock_owner(conn, rule_id):
        """
        Return (locked_by, lock_ts, expiry_ts, force_lock_flag) or None if not locked or expired.
        Also auto-deactivate lock if expired. 
        """
        c=conn.cursor()
        c.execute("""
            SELECT LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK
            FROM BRM_RULE_LOCKS
            WHERE RULE_ID=? AND ACTIVE_LOCK=1
        """,(rule_id,))
        row=c.fetchone()
        if not row:
            return None
        (locked_by, lts, et, fflag, active_l) = row
        if not active_l:
            return None
        now=datetime.now()
        if et and now>et:
            # lock is expired => turn it off
            c2=conn.cursor()
            c2.execute("""
                UPDATE BRM_RULE_LOCKS
                SET ACTIVE_LOCK=0
                WHERE RULE_ID=? AND ACTIVE_LOCK=1
            """,(rule_id,))
            conn.commit()
            return None
        return (locked_by, lts, et, fflag)

    @staticmethod
    def lock_rule_for_edit(conn, rule_id, user_id, force=False, lock_minutes=30):
        """
        Attempt to lock:
          - if locked by same user => refresh expiry
          - if locked by someone else => error unless force
          - if not locked => create
        """
        info=LockManager.rule_current_lock_owner(conn, rule_id)
        now=datetime.now()
        expiry= now + timedelta(minutes=lock_minutes)
        c=conn.cursor()

        if info is not None:
            (locked_by, old_ts, old_exp, fflag) = info
            if locked_by==user_id:
                # refresh
                c.execute("""
                    UPDATE BRM_RULE_LOCKS
                    SET LOCK_TIMESTAMP=?, EXPIRY_TIMESTAMP=?, FORCE_LOCK=?
                    WHERE RULE_ID=? AND ACTIVE_LOCK=1
                """,(now, expiry, 1 if force else 0, rule_id))
                conn.commit()
                logger.debug(f"Lock refreshed by user {user_id} for rule {rule_id}.")
                return
            else:
                # locked by another
                if not force:
                    raise ValueError(f"Rule {rule_id} is locked by {locked_by}.")
                else:
                    # forcibly override
                    c.execute("""
                        UPDATE BRM_RULE_LOCKS
                        SET ACTIVE_LOCK=0
                        WHERE RULE_ID=? AND ACTIVE_LOCK=1
                    """,(rule_id,))
                    c.execute("""
                        INSERT INTO BRM_RULE_LOCKS(
                            RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP,
                            FORCE_LOCK, ACTIVE_LOCK
                        )
                        VALUES(?,?,?,?,?,1)
                    """,(rule_id, user_id, now, expiry, 1 if force else 0))
                    conn.commit()
                    logger.debug(f"Rule {rule_id} forcibly re-locked by {user_id}.")
                    return
        else:
            # not locked => create
            c.execute("""
                INSERT INTO BRM_RULE_LOCKS(
                    RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP,
                    FORCE_LOCK, ACTIVE_LOCK
                )
                VALUES(?,?,?,?,?,1)
            """,(rule_id, user_id, now, expiry, 1 if force else 0))
            conn.commit()
            logger.debug(f"Rule {rule_id} locked by {user_id}, force={force}.")

    @staticmethod
    def unlock_rule_for_edit(conn, rule_id, user_id, force=False):
        """
        Normal unlock => must match user unless force => admin override.
        """
        info=LockManager.rule_current_lock_owner(conn, rule_id)
        if not info:
            return  # not locked or expired
        (locked_by, lts, et, fflag) = info
        if locked_by!=user_id and not force:
            raise ValueError(f"Rule {rule_id} is locked by {locked_by}, you cannot unlock.")
        c=conn.cursor()
        c.execute("""
            UPDATE BRM_RULE_LOCKS
            SET ACTIVE_LOCK=0
            WHERE RULE_ID=? AND ACTIVE_LOCK=1
        """,(rule_id,))
        conn.commit()
        logger.debug(f"Rule {rule_id} unlocked by user {user_id}, force={force}.")


###############################################################################
# 6) ADVANCED SQL PARSING
###############################################################################
def detect_operation_type(sql_text:str)->str:
    """
    Return "INSERT","UPDATE","DELETE","SELECT","OTHER" based on leading keyword.
    """
    stripped=sql_text.strip().upper()
    if stripped.startswith("INSERT"):
        return "INSERT"
    elif stripped.startswith("UPDATE"):
        return "UPDATE"
    elif stripped.startswith("DELETE"):
        return "DELETE"
    elif stripped.startswith("SELECT"):
        return "SELECT"
    else:
        return "OTHER"


def parse_sql_dependencies(sql_text:str):
    """
    Use sqlparse to identify table references, columns, and CTE usage.
    Return dict => 
      {
        "tables": [ (schema, table, alias, is_subquery) ],
        "cte_tables": [ (cte_name, cte_refs) ],
        "alias_map": {alias: (schema,table)},
        "columns": [ (colName, ...), ... ]
      }
    """
    statements=sqlparse.parse(sql_text)
    all_tables=[]
    cte_info=[]
    alias_map={}
    columns=[]

    for stmt in statements:
        ctes=_extract_with_clauses(stmt)
        for cname,crefs in ctes.items():
            cte_info.append((cname,crefs))

        main_refs, main_alias = _extract_main_from(stmt.tokens, set(ctes.keys()))
        all_tables.extend(main_refs)
        alias_map.update(main_alias)

        col_refs=_extract_columns(stmt)
        columns.extend(col_refs)

    unique_tables=list({x for x in all_tables})
    return {
        "tables": unique_tables,
        "cte_tables": cte_info,
        "alias_map": alias_map,
        "columns": columns
    }


def _extract_with_clauses(statement):
    cte_map={}
    tokens=list(statement.tokens)
    i=0
    from sqlparse.tokens import Keyword
    while i<len(tokens):
        tk=tokens[i]
        if tk.ttype is Keyword and tk.value.upper()=="WITH":
            i+=1
            i=_parse_cte_block(tokens,i,cte_map)
            continue
        i+=1
    return cte_map

def _parse_cte_block(tokens, i, cte_map):
    from sqlparse.sql import Identifier, Parenthesis
    from sqlparse.tokens import Keyword

    while i<len(tokens):
        tk=tokens[i]
        if isinstance(tk, Identifier):
            cte_name=tk.get_real_name()
            i+=1
            i=_parse_cte_as_clause(tokens,i,cte_name,cte_map)
        elif tk.ttype is Keyword and tk.value.upper() in ("SELECT","INSERT","UPDATE","DELETE"):
            return i
        else:
            i+=1
    return i

def _parse_cte_as_clause(tokens,i,cte_name,cte_map):
    from sqlparse.sql import Parenthesis
    while i<len(tokens):
        tk=tokens[i]
        if tk.value.upper()=="AS":
            i+=1
            if i<len(tokens):
                sub=tokens[i]
                if isinstance(sub, Parenthesis):
                    sub_refs=_extract_subselect_tokens(sub.tokens)
                    cte_map[cte_name]=sub_refs
                    i+=1
                    return i
        else:
            i+=1
    return i

def _extract_subselect_tokens(tokens):
    from sqlparse.sql import IdentifierList, Identifier, Parenthesis
    from sqlparse.tokens import Keyword, DML
    results=[]
    from_seen=False
    i=0
    while i<len(tokens):
        tk=tokens[i]
        if hasattr(tk,"is_group") and tk.is_group and _is_subselect(tk):
            results.extend(_extract_subselect_tokens(tk.tokens))
        if tk.ttype is Keyword:
            upv=tk.value.upper()
            if upv in ("FROM","JOIN","INNER JOIN","LEFT JOIN","RIGHT JOIN","FULL JOIN"):
                from_seen=True
            else:
                from_seen=False
        if from_seen:
            if isinstance(tk, IdentifierList):
                for ident in tk.get_identifiers():
                    st=_parse_identifier(ident,set())
                    st=(st[0],st[1],st[2],True)
                    results.append(st)
            elif isinstance(tk, Identifier):
                st=_parse_identifier(tk,set())
                st=(st[0],st[1],st[2],True)
                results.append(st)
        i+=1
    return results

def _is_subselect(token):
    from sqlparse.tokens import DML
    if not token.is_group:
        return False
    for sub in token.tokens:
        if sub.ttype is DML and sub.value.upper()=="SELECT":
            return True
    return False

def _extract_main_from(tokenlist, known_ctes):
    from sqlparse.tokens import Keyword
    from sqlparse.sql import IdentifierList, Identifier
    results=[]
    alias_map={}
    tokens=list(tokenlist)
    from_seen=False
    i=0
    while i<len(tokens):
        tk=tokens[i]
        if hasattr(tk,"is_group") and tk.is_group and _is_subselect(tk):
            results.extend(_extract_subselect_tokens(tk.tokens))
        if tk.ttype is Keyword:
            upv=tk.value.upper()
            if upv in ("FROM","JOIN","INNER JOIN","LEFT JOIN","RIGHT JOIN","FULL JOIN"):
                from_seen=True
            else:
                from_seen=False
        if from_seen:
            if isinstance(tk, IdentifierList):
                for ident in tk.get_identifiers():
                    st=_parse_identifier(ident, known_ctes)
                    results.append(st)
                    if st[2]:
                        alias_map[st[2]]=(st[0], st[1])
            elif isinstance(tk, Identifier):
                st=_parse_identifier(tk, known_ctes)
                results.append(st)
                if st[2]:
                    alias_map[st[2]]=(st[0], st[1])
        i+=1
    return (results, alias_map)

def _parse_identifier(ident, known_cte_names):
    alias=ident.get_alias()
    real_name=ident.get_real_name()
    schema=ident.get_parent_name()
    if real_name and real_name.upper() in (n.upper() for n in known_cte_names):
        return (None,f"(CTE) {real_name}",alias,False)
    return (schema, real_name, alias,False)

def _extract_columns(statement):
    """
    Return list of column references. For demonstration => (colName,...).
    We’ll keep a simpler approach. 
    """
    from sqlparse.tokens import DML, Keyword
    from sqlparse.sql import IdentifierList, Identifier, Parenthesis
    results=[]
    tokens=list(statement.tokens)
    i=0
    while i<len(tokens):
        tk=tokens[i]
        if tk.ttype is DML:
            upv=tk.value.upper()
            if upv=="SELECT":
                results.extend(_parse_select_list(tokens,i+1))
            elif upv in ("INSERT","UPDATE"):
                # parse write columns
                results.extend(_parse_dml_columns(tokens,i,upv))
        i+=1
    return results

def _parse_select_list(tokens,start_idx):
    from sqlparse.tokens import Keyword
    from sqlparse.sql import IdentifierList, Identifier
    columns=[]
    i=start_idx
    while i<len(tokens):
        tk=tokens[i]
        if tk.ttype is Keyword:
            upv=tk.value.upper()
            if upv in ("FROM","JOIN","WHERE","GROUP","ORDER","UNION","INTERSECT"):
                break
        if isinstance(tk, IdentifierList):
            for ident in tk.get_identifiers():
                nm=ident.get_name()
                if nm and nm.upper() not in ("DISTINCT","TOP","ALL"):
                    columns.append(nm)
        elif isinstance(tk, Identifier):
            nm=tk.get_name()
            if nm and nm.upper() not in ("DISTINCT","TOP","ALL"):
                columns.append(nm)
        i+=1
    return columns

def _parse_dml_columns(tokens, start_idx, dml_word):
    from sqlparse.tokens import Keyword
    from sqlparse.sql import Parenthesis, IdentifierList, Identifier
    columns=[]
    if dml_word=="INSERT":
        i=start_idx
        while i<len(tokens):
            tk=tokens[i]
            if tk.is_group and isinstance(tk,Parenthesis):
                for sub in tk.tokens:
                    if isinstance(sub,IdentifierList):
                        for ident in sub.get_identifiers():
                            columns.append(ident.get_name())
                    elif isinstance(sub,Identifier):
                        columns.append(sub.get_name())
                return columns
            i+=1
    elif dml_word=="UPDATE":
        # find SET
        found_set=False
        i=start_idx
        while i<len(tokens):
            tk=tokens[i]
            if tk.ttype is Keyword and tk.value.upper()=="SET":
                found_set=True
                i+=1
                columns.extend(_parse_update_set_list(tokens,i))
                break
            i+=1
    return columns

def _parse_update_set_list(tokens,start_i):
    from sqlparse.tokens import Keyword
    from sqlparse.sql import Identifier
    cols=[]
    i=start_i
    while i<len(tokens):
        tk=tokens[i]
        if tk.ttype is Keyword and tk.value.upper() in ("WHERE","FROM"):
            break
        if isinstance(tk, Identifier):
            cols.append(tk.get_name())
        i+=1
    return cols


###############################################################################
# 7) LOGIN DIALOG
###############################################################################
class LoginDialog(QtWidgets.QDialog):
    """
    Basic username/password => checks USERS table => sets user_id, user_group.
    In production => store hashed/salted pass, not plain.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id=None
        self.user_group=None

        self.setWindowTitle("Login – BRM Tool")
        self.resize(300,150)

        main_l= QVBoxLayout(self)
        self.user_edit= QLineEdit()
        self.user_edit.setPlaceholderText("Username")
        main_l.addWidget(QLabel("Username:"))
        main_l.addWidget(self.user_edit)

        self.pass_edit= QLineEdit()
        self.pass_edit.setPlaceholderText("Password")
        self.pass_edit.setEchoMode(QLineEdit.Password)
        main_l.addWidget(QLabel("Password:"))
        main_l.addWidget(self.pass_edit)

        login_btn= QPushButton("Login")
        login_btn.clicked.connect(self.do_login)
        main_l.addWidget(login_btn)

        self.setLayout(main_l)

    def do_login(self):
        un=self.user_edit.text().strip()
        pw=self.pass_edit.text().strip()
        if not un or not pw:
            QMessageBox.warning(self,"Error","Both username and password required.")
            return
        c=self.connection.cursor()
        c.execute("SELECT USER_ID, USER_GROUP FROM USERS WHERE USERNAME=? AND PASSWORD=?",(un,pw))
        row= c.fetchone()
        if row:
            self.user_id=row[0]
            self.user_group=row[1]
            logger.info(f"User {un} logged in. user_id={self.user_id}, group={self.user_group}")
            self.accept()
        else:
            QMessageBox.warning(self,"Login Failed","Invalid credentials.")


###############################################################################
# 8) ONBOARDING WIZARD (OPTIONAL)
###############################################################################
class OnboardingWizard(QDialog):
    """
    A multi-step wizard for brand-new users:
      Step 1) create a group
      Step 2) create a rule
      Step 3) create a schedule
    Then done. 
    You can skip or disable if not needed.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection=connection
        self.setWindowTitle("Welcome Wizard – BRM Tool")
        self.resize(400,250)
        main_l=QVBoxLayout(self)

        self.label=QLabel("Welcome to the BRM Tool Onboarding Wizard!")
        main_l.addWidget(self.label)

        self.current_step=0
        self.next_btn=QPushButton("Next")
        self.next_btn.clicked.connect(self.advance_step)
        main_l.addWidget(self.next_btn)

        self.setLayout(main_l)

    def advance_step(self):
        self.current_step+=1
        if self.current_step==1:
            self.label.setText("Step 1: Go to 'Group Management' => create a new group.")
        elif self.current_step==2:
            self.label.setText("Step 2: Go to 'Business Rules' => add a new rule.")
        elif self.current_step==3:
            self.label.setText("Step 3: Go to 'Scheduling' => create a schedule.")
        else:
            self.label.setText("All done. Enjoy using the BRM Tool.")
            self.accept()