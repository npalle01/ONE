#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module 1: core_base.py
This module provides core functionalities:
  - Standard imports and advanced logging configuration.
  - Global constants including an extended RULE_LIFECYCLE_STATES list.
  - DatabaseConnectionDialog and LoginDialog with robust error handling.
  - ExtendedOnboardingWizard with additional steps for advanced onboarding.
"""

import sys
import os
import json
import logging
import pyodbc
from PyQt5 import QtWidgets, QtCore
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QMessageBox, QComboBox
)

# Advanced logging configuration
logging.basicConfig(
    filename='brm_tool_advanced.log',
    level=logging.DEBUG,
    format='%(asctime)s:%(levelname)s:%(name)s:%(message)s'
)
logger = logging.getLogger("BRMToolLogger")

# Global constants
RULE_LIFECYCLE_STATES = [
    "DRAFT",
    "UNDER_APPROVAL",
    "IN_APPROVAL_ESCALATION",
    "APPROVED",
    "ACTIVE",
    "INACTIVE",
    "ARCHIVED"
]

# Email configuration (if notifications are used)
EMAIL_CONFIG = {
    "smtp_server": "smtp.example.com",
    "smtp_port": 587,
    "smtp_username": "your_smtp_user",
    "smtp_password": "your_smtp_pass",
    "sender_email": "noreply@example.com"
}

def send_email_notification(subject: str, body: str, recipients: list):
    """
    Send email notifications for alerts or approvals.
    """
    try:
        from email.mime.text import MIMEText
        import smtplib
        msg = MIMEText(body, 'plain')
        msg['Subject'] = subject
        msg['From'] = EMAIL_CONFIG['sender_email']
        msg['To'] = ", ".join(recipients)
        smtp = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'])
        smtp.starttls()
        smtp.login(EMAIL_CONFIG['smtp_username'], EMAIL_CONFIG['smtp_password'])
        smtp.sendmail(EMAIL_CONFIG['sender_email'], recipients, msg.as_string())
        smtp.quit()
        logger.info(f"Email sent to {recipients} with subject: {subject}")
    except Exception as ex:
        logger.error(f"Error sending email: {ex}")

class DatabaseConnectionDialog(QDialog):
    """
    Dialog for establishing a database connection via DSN or custom ODBC string.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.connection = None
        self.setWindowTitle("Database Connection – Advanced")
        self.resize(400, 200)
        layout = QVBoxLayout(self)
        
        lbl = QLabel("Select ODBC DSN or enter a custom connection string:")
        layout.addWidget(lbl)
        
        self.conn_type_combo = QComboBox()
        try:
            dsn_dict = pyodbc.dataSources()
            for dsn_name, driver in dsn_dict.items():
                if "SQL SERVER" in driver.upper():
                    self.conn_type_combo.addItem(f"ODBC DSN: {dsn_name}", dsn_name)
        except Exception as ex:
            logger.error(f"Error retrieving DSNs: {ex}")
        layout.addWidget(self.conn_type_combo)
        
        self.conn_str_edit = QLineEdit()
        self.conn_str_edit.setPlaceholderText("Or custom ODBC connection string")
        layout.addWidget(self.conn_str_edit)
        
        btn_layout = QHBoxLayout()
        connect_btn = QPushButton("Connect")
        connect_btn.clicked.connect(self.on_connect)
        btn_layout.addWidget(connect_btn)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(cancel_btn)
        layout.addLayout(btn_layout)
    
    def on_connect(self):
        """
        Attempt to establish the database connection.
        """
        override = self.conn_str_edit.text().strip()
        if override:
            conn_str = override
        else:
            choice = self.conn_type_combo.currentData()
            if not choice:
                QMessageBox.critical(self, "Error", "No DSN or connection string selected.")
                return
            conn_str = f"DSN={choice};Trusted_Connection=yes;"
        try:
            self.connection = pyodbc.connect(conn_str)
            logger.info("Database connection established successfully.")
            self.accept()
        except Exception as ex:
            logger.error(f"Connection error: {ex}")
            QMessageBox.critical(self, "Connection Error", str(ex))
    
    def get_connection(self):
        return self.connection

class LoginDialog(QDialog):
    """
    Dialog for user login.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = None
        self.user_group = None
        self.setWindowTitle("User Login – Advanced")
        self.resize(300, 150)
        layout = QVBoxLayout(self)
        
        lbl_user = QLabel("Username:")
        layout.addWidget(lbl_user)
        self.user_edit = QLineEdit()
        layout.addWidget(self.user_edit)
        
        lbl_pass = QLabel("Password:")
        layout.addWidget(lbl_pass)
        self.pass_edit = QLineEdit()
        self.pass_edit.setEchoMode(QLineEdit.Password)
        layout.addWidget(self.pass_edit)
        
        login_btn = QPushButton("Login")
        login_btn.clicked.connect(self.do_login)
        layout.addWidget(login_btn)
    
    def do_login(self):
        username = self.user_edit.text().strip()
        password = self.pass_edit.text().strip()
        if not username or not password:
            QMessageBox.warning(self, "Error", "Username and password are required.")
            return
        
        try:
            c = self.connection.cursor()
            query = "SELECT USER_ID, USER_GROUP FROM USERS WHERE USERNAME=? AND PASSWORD=?"
            c.execute(query, (username, password))
            row = c.fetchone()
            if row:
                self.user_id = row[0]
                self.user_group = row[1]
                logger.info(f"User '{username}' logged in successfully.")
                self.accept()
            else:
                QMessageBox.warning(self, "Login Failed", "Invalid credentials.")
                logger.warning(f"Failed login attempt for user: {username}")
        except Exception as ex:
            logger.error(f"Error during login: {ex}")
            QMessageBox.critical(self, "Error", str(ex))

class ExtendedOnboardingWizard(QDialog):
    """
    Extended onboarding wizard to help new users get acquainted with advanced features.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.setWindowTitle("Welcome Wizard – Advanced")
        self.resize(500, 300)
        self.current_step = 0
        self.steps = [
            "Step 1: Familiarize with Groups, Tags, and Decision Tables.",
            "Step 2: Understand Conflict Checks, Scheduling, and Validations.",
            "Step 3: Explore Advanced Lineage and Business Naming conventions.",
            "Step 4: Learn about Locking, Approvals, and Rule Backups.",
            "Step 5: Review Custom Groups, Alerts, and Metadata Sync features."
        ]
        self.layout = QVBoxLayout(self)
        self.label = QLabel(self.steps[self.current_step])
        self.layout.addWidget(self.label)
        
        btn_layout = QHBoxLayout()
        self.next_btn = QPushButton("Next")
        self.next_btn.clicked.connect(self.advance_step)
        btn_layout.addWidget(self.next_btn)
        self.skip_btn = QPushButton("Skip Wizard")
        self.skip_btn.clicked.connect(self.reject)
        btn_layout.addWidget(self.skip_btn)
        self.layout.addLayout(btn_layout)
    
    def advance_step(self):
        self.current_step += 1
        if self.current_step < len(self.steps):
            self.label.setText(self.steps[self.current_step])
        else:
            self.accept()

# For module testing purposes only
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    db_dialog = DatabaseConnectionDialog()
    if db_dialog.exec_() == QDialog.Accepted:
        conn = db_dialog.get_connection()
        login_dialog = LoginDialog(conn)
        if login_dialog.exec_() == QDialog.Accepted:
            wizard = ExtendedOnboardingWizard(conn)
            wizard.exec_()
    sys.exit(0)