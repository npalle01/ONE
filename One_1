#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Module: brm_tool_connection.py
Description: Contains the production‑ready DatabaseConnectionDialog and LoginDialog.
             – DatabaseConnectionDialog lists available DSNs (or accepts a custom connection string)
             – LoginDialog verifies user credentials against the USERS table.
Both dialogs use robust error handling and log any errors.
"""

import sys
import pyodbc
import logging
import json
from PyQt5 import QtWidgets, QtCore
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QComboBox, QLineEdit, QPushButton, QMessageBox
)

# Configure module-level logging
logger = logging.getLogger("brm_tool_connection")
logger.setLevel(logging.DEBUG)

class DatabaseConnectionDialog(QDialog):
    """
    A robust dialog to connect to the database via ODBC.
    Users can choose from available DSNs (filtered for SQL Server) or provide a custom connection string.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.connection = None
        self.setWindowTitle("Database Connection")
        self.resize(400, 220)
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)

        label = QLabel("Select an ODBC DSN (SQL Server) or enter a custom connection string:")
        layout.addWidget(label)

        self.dsn_combo = QComboBox()
        try:
            dsn_dict = pyodbc.dataSources()
            for dsn_name, driver in dsn_dict.items():
                if "SQL SERVER" in driver.upper():
                    self.dsn_combo.addItem(f"DSN: {dsn_name}", dsn_name)
        except Exception as ex:
            logger.error(f"Error retrieving DSNs: {ex}")
        layout.addWidget(self.dsn_combo)

        self.custom_conn_edit = QLineEdit()
        self.custom_conn_edit.setPlaceholderText("Custom connection string (optional)")
        layout.addWidget(self.custom_conn_edit)

        # Buttons
        btn_layout = QHBoxLayout()
        self.connect_btn = QPushButton("Connect")
        self.connect_btn.clicked.connect(self.on_connect)
        btn_layout.addWidget(self.connect_btn)
        self.cancel_btn = QPushButton("Cancel")
        self.cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(self.cancel_btn)
        layout.addLayout(btn_layout)
        self.setLayout(layout)

    def on_connect(self):
        conn_str = self.custom_conn_edit.text().strip()
        if not conn_str:
            dsn = self.dsn_combo.currentData()
            if not dsn:
                QMessageBox.critical(self, "Connection Error", "No DSN selected or custom string provided.")
                return
            conn_str = f"DSN={dsn};Trusted_Connection=yes;"
        try:
            self.connection = pyodbc.connect(conn_str)
            logger.info("Database connection established.")
            self.accept()
        except Exception as ex:
            logger.error(f"Error connecting to database: {ex}")
            QMessageBox.critical(self, "Connection Error", f"Error: {ex}")

    def get_connection(self):
        return self.connection

class LoginDialog(QDialog):
    """
    A robust login dialog that validates user credentials against the USERS table.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = None
        self.user_group = None
        self.setWindowTitle("User Login")
        self.resize(300, 170)
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)

        # Username
        user_label = QLabel("Username:")
        self.username_edit = QLineEdit()
        self.username_edit.setPlaceholderText("Enter username")
        layout.addWidget(user_label)
        layout.addWidget(self.username_edit)

        # Password
        pass_label = QLabel("Password:")
        self.password_edit = QLineEdit()
        self.password_edit.setPlaceholderText("Enter password")
        self.password_edit.setEchoMode(QLineEdit.Password)
        layout.addWidget(pass_label)
        layout.addWidget(self.password_edit)

        # Button layout
        btn_layout = QHBoxLayout()
        self.login_btn = QPushButton("Login")
        self.login_btn.clicked.connect(self.on_login)
        btn_layout.addWidget(self.login_btn)
        self.cancel_btn = QPushButton("Cancel")
        self.cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(self.cancel_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

    def on_login(self):
        username = self.username_edit.text().strip()
        password = self.password_edit.text().strip()
        if not username or not password:
            QMessageBox.warning(self, "Login Error", "Please enter both username and password.")
            return
        try:
            c = self.connection.cursor()
            c.execute(
                "SELECT USER_ID, USER_GROUP FROM USERS WHERE USERNAME = ? AND PASSWORD = ?",
                (username, password)
            )
            row = c.fetchone()
            if row:
                self.user_id = row[0]
                self.user_group = row[1]
                logger.info(f"User {username} logged in successfully.")
                self.accept()
            else:
                QMessageBox.warning(self, "Login Failed", "Invalid username or password.")
        except Exception as ex:
            logger.error(f"Error during login: {ex}")
            QMessageBox.critical(self, "Login Error", f"Error: {ex}")

    def get_user_credentials(self):
        return self.user_id, self.user_group

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    # For testing purposes, show the connection dialog
    conn_dialog = DatabaseConnectionDialog()
    if conn_dialog.exec_() == QDialog.Accepted:
        conn = conn_dialog.get_connection()
        login = LoginDialog(conn)
        if login.exec_() == QDialog.Accepted:
            uid, ugroup = login.get_user_credentials()
            print(f"Login successful. User ID: {uid}, Group: {ugroup}")
        else:
            print("Login canceled.")
    else:
        print("Connection canceled.")
    sys.exit(app.exec_())
