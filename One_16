#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_contextual_inline_editing.py

Description:
  Provides a "Contextual / Inline Editing" UI for the BRM Tool:
    • A QTableView that displays a subset of BRM_RULES fields (e.g., RULE_ID, RULE_NAME, STATUS, OWNER_GROUP).
    • Double-click (or click) to edit certain columns in place.
    • On commit, it checks permissions, lock status, and validations, then updates the DB.
    • If there's an error, it reverts or shows a message.

Implementation Details:
  - We use a custom QAbstractTableModel (or QSqlTableModel approach).
  - The "InlineEditingTab" displays the table. The user can sort or filter, optionally.
  - "Lock on edit" approach: once the user tries to edit a row, we attempt to lock the rule. 
    If locking fails (someone else locked it), we show an error.
  - "Permission check": if the user doesn’t have permission for the group or table references, we show an error on commit.

Integration:
  - If your BFS or scheduling needs direct edits, it can read the updated data from DB.
  - This is an alternative to the separate "RuleEditorDialog" for quick changes.

Dependencies:
  - brm_core_foundation for logging, DB connection, fetch helpers
  - brm_rule_engine or your advanced CRUD logic (like update_rule, lock_rule_for_edit, etc.)
"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, logging
from PyQt5.QtCore import QAbstractTableModel, Qt, QModelIndex
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QTableView, QPushButton, QMessageBox
from brm_core_foundation import logger
from brm_rule_engine import LockManager

class InlineEditModel(QAbstractTableModel):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group
        self.columns = ["RULE_ID", "RULE_NAME", "STATUS", "OWNER_GROUP"]
        self.data_rows = []
        self.fetch_data()

    def fetch_data(self):
        self.beginResetModel()
        try:
            c = self.connection.cursor()
            c.execute("SELECT TOP 200 RULE_ID, RULE_NAME, STATUS, OWNER_GROUP FROM BRM_RULES ORDER BY RULE_ID DESC")
            rows = c.fetchall()
            colnames = [desc[0] for desc in c.description]
            self.data_rows = [dict(zip(colnames, row)) for row in rows]
        except Exception as ex:
            logger.error(f"Error fetching data: {ex}")
            self.data_rows = []
        self.endResetModel()

    def rowCount(self, parent=QModelIndex()):
        return len(self.data_rows)

    def columnCount(self, parent=QModelIndex()):
        return len(self.columns)

    def data(self, index, role=Qt.DisplayRole):
        if not index.isValid():
            return None
        if role in (Qt.DisplayRole, Qt.EditRole):
            row = index.row()
            col = index.column()
            colname = self.columns[col]
            return str(self.data_rows[row].get(colname, "")) 
        return None

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return self.columns[section]
        return super().headerData(section, orientation, role)

    def flags(self, index):
        if not index.isValid():
            return Qt.ItemIsEnabled
        if self.columns[index.column()] == "RULE_ID":
            return Qt.ItemIsEnabled | Qt.ItemIsSelectable
        return Qt.ItemIsEnabled | Qt.ItemIsSelectable | Qt.ItemIsEditable

    def setData(self, index, value, role=Qt.EditRole):
        if role == Qt.EditRole and index.isValid():
            row = index.row()
            col = index.column()
            colname = self.columns[col]
            new_val = value.strip() if isinstance(value, str) else value
            old_val = self.data_rows[row].get(colname)
            if new_val == old_val:
                return True
            rule_id = self.data_rows[row]["RULE_ID"]
            try:
                self.attempt_lock(rule_id)
            except Exception as ex:
                QMessageBox.warning(None, "Lock Error", f"Cannot lock rule {rule_id}: {ex}")
                return False
            if colname == "OWNER_GROUP" and not self.user_can_assign_group(new_val):
                QMessageBox.warning(None, "Permission Denied", f"You cannot assign rule to group {new_val}.")
                return False
            if not self.update_rule_in_db(rule_id, colname, new_val):
                return False
            self.data_rows[row][colname] = new_val
            try:
                self.unlock_rule(rule_id)
            except Exception:
                pass
            self.dataChanged.emit(index, index, [Qt.DisplayRole, Qt.EditRole])
            return True
        return False

    def user_can_assign_group(self, group_name):
        if self.user_group == "Admin":
            return True
        return group_name == self.user_group

    def attempt_lock(self, rule_id):
        current_lock = LockManager.rule_current_lock_owner(self.connection, rule_id)
        if current_lock and str(current_lock[0]) != str(self.user_id) and self.user_group != "Admin":
            raise Exception(f"Rule locked by user {current_lock[0]}.")
        LockManager.lock_rule_for_edit(self.connection, rule_id, self.user_id, force=False)

    def unlock_rule(self, rule_id):
        LockManager.unlock_rule_for_edit(self.connection, rule_id, self.user_id)

    def update_rule_in_db(self, rule_id, colname, new_val):
        c = self.connection.cursor()
        try:
            if colname == "RULE_NAME":
                c.execute("UPDATE BRM_RULES SET RULE_NAME=?, UPDATED_BY=?, VERSION=VERSION+1 WHERE RULE_ID=?",
                          (new_val, str(self.user_id), rule_id))
            elif colname == "STATUS":
                if new_val.upper() not in ("ACTIVE", "INACTIVE"):
                    QMessageBox.warning(None, "Invalid Value", "Status must be ACTIVE or INACTIVE.")
                    return False
                c.execute("UPDATE BRM_RULES SET STATUS=?, UPDATED_BY=?, VERSION=VERSION+1 WHERE RULE_ID=?",
                          (new_val.upper(), str(self.user_id), rule_id))
            elif colname == "OWNER_GROUP":
                c.execute("UPDATE BRM_RULES SET OWNER_GROUP=?, UPDATED_BY=?, VERSION=VERSION+1 WHERE RULE_ID=?",
                          (new_val, str(self.user_id), rule_id))
            else:
                return False
            self.connection.commit()
            return True
        except Exception as ex:
            self.connection.rollback()
            QMessageBox.critical(None, "DB Error", str(ex))
            return False

class InlineEditingTab(QWidget):
    def __init__(self, connection, user_id, user_group, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        self.table = QTableView()
        self.model = InlineEditModel(self.connection, self.user_id, self.user_group, self)
        self.table.setModel(self.model)
        layout.addWidget(self.table)
        btn_layout = QHBoxLayout()
        ref_btn = QPushButton("Refresh Data")
        ref_btn.clicked.connect(self.refresh_data)
        btn_layout.addWidget(ref_btn)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        self.setLayout(layout)

    def refresh_data(self):
        self.model.fetch_data()

