--------------------------------------------------
-- Insert sample data for testing BRM Tool
--------------------------------------------------

/* 1. USERS – used for login and user management */
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP)
VALUES 
('admin', 'admin123', 'Admin'),
('john_doe', 'password', 'BG1'),
('jane_smith', 'password', 'BG1');
  
/* 2. BRM_AUDIT_LOG – stores audit trail entries */
INSERT INTO dbo.BRM_AUDIT_LOG (ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA)
VALUES
('INSERT', 'BRM_RULES', '1', 'admin', NULL, '{"RULE_NAME": "Validate Customer Age"}'),
('UPDATE', 'BRM_RULES', '1', 'john_doe', '{"STATUS": "DRAFT"}', '{"STATUS": "INACTIVE"}');

/* 3. BRM_RULE_LOCKS – stores active rule locks */
INSERT INTO dbo.BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES 
(1, 'john_doe', GETDATE(), DATEADD(MINUTE, 30, GETDATE()), 0, 1);

/* 4. BRM_RULES – main rules table.
   Note: Columns include GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, 
         EFFECTIVE_END_DATE, STATUS, VERSION, CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
         CREATED_TIMESTAMP, UPDATED_BY, OWNER_GROUP, CLUSTER_NAME, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, 
         CRITICAL_SCOPE, CDC_TYPE, LIFECYCLE_STATE, LOCK_STATUS, PERF_MS_AVG */
INSERT INTO dbo.BRM_RULES 
    (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, 
     STATUS, VERSION, CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION, CREATED_TIMESTAMP, 
     UPDATED_BY, OWNER_GROUP, CLUSTER_NAME, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE, 
     LIFECYCLE_STATE, LOCK_STATUS, PERF_MS_AVG)
VALUES 
-- Rule 1: Validate Customer Age (uses Customers table)
(1, NULL, 1, 'Validate Customer Age', 'SELECT 1 FROM Customers WHERE Age >= 18', GETDATE(), NULL, 
 'DRAFT', 1, 'admin', 'Ensure customers are adults', 'SELECT', 'N/A', GETDATE(), NULL, 'BG1', 'Cluster1', 
 'APPROVAL_IN_PROGRESS', 0, 0, 'NONE', 'NONE', 'DRAFT', 'UNLOCKED', 500),
-- Rule 2: Order Total Check (uses Orders table)
(1, NULL, 1, 'Order Total Check', 'SELECT 1 FROM Orders WHERE Total > 0', GETDATE(), NULL, 
 'DRAFT', 1, 'admin', 'Ensure orders have positive total', 'SELECT', 'N/A', GETDATE(), NULL, 'BG1', 'Cluster1', 
 'APPROVAL_IN_PROGRESS', 0, 0, 'NONE', 'NONE', 'DRAFT', 'UNLOCKED', 600);

/* 5. BRM_RULE_TABLE_DEPENDENCIES – mapping of rule dependencies to actual tables */
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES 
(1, 'dbo', 'Customers', 'N/A', 'READ'),
(2, 'dbo', 'Orders', 'N/A', 'READ');

/* 6. GROUP_PERMISSIONS – defines which groups have access to which tables */
INSERT INTO dbo.GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE)
VALUES
('Admin', 'dbo.Customers'),
('Admin', 'dbo.Orders'),
('BG1', 'dbo.Customers'),
('BG1', 'dbo.Orders');

/* 7. DATA_VALIDATIONS – defines table/column-level validations */
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES
('dbo.Customers', 'Name', 'NOT NULL', ''),
('dbo.Customers', 'Age', 'RANGE', '18,120'),
('dbo.Customers', 'Email', 'REGEX', '^[\w\.-]+@[\w\.-]+\.\w+$'),
('dbo.Orders', 'OrderID', 'NOT NULL', ''),
('dbo.Orders', 'Total', 'RANGE', '0.01,10000');

/* 8. BUSINESS_GROUP_APPROVERS – maps groups to approver usernames */
INSERT INTO dbo.BUSINESS_GROUP_APPROVERS (GROUP_NAME, USERNAME)
VALUES
('BG1', 'john_doe'),
('BG1', 'jane_smith'),
('Admin', 'admin');

/* 9. BRM_RULE_APPROVALS – holds the multi‑step approval workflow for rules */
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE, APPROVED_TIMESTAMP)
VALUES
(1, 'BG1', 'john_doe', 0, 1, NULL);

/* 10. BRM_GLOBAL_CRITICAL_LINKS – defines global-critical links between rules */
INSERT INTO dbo.BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES
(1, 2);

/* 11. RULE_CONFLICTS – defines conflicts between rules */
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES
(1, 2, 10);

/* 12. COMPOSITE_RULES – composite rule definitions */
INSERT INTO dbo.COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES
('Composite Rule 1', 'Rule1==PASS AND Rule2==PASS', 'SendEmail');

/* 13. BRM_COLUMN_MAPPING – dummy mapping for demonstration */
INSERT INTO dbo.BRM_COLUMN_MAPPING (SOURCE_RULE_ID, RULE_ID)
VALUES
(1, 1);

/* 14. BRM_RULE_LINEAGE – defines parent-child relationships between rules */
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_RULE_ID)
VALUES
(2, 1);

/* 15. RULE_SCHEDULES – schedules for rule execution */
INSERT INTO dbo.RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, CREATED_TIMESTAMP, VALIDATION_FLAG)
VALUES
(1, DATEADD(day, 1, GETDATE()), 'Scheduled', GETDATE(), 1);

/* 16. RULE_EXECUTION_LOGS – logs of rule executions */
INSERT INTO dbo.RULE_EXECUTION_LOGS (RULE_ID, EXECUTION_TIMESTAMP, PASS_FLAG, MESSAGE, RECORD_COUNT, EXEC_TIME_MS)
VALUES
(1, GETDATE(), 1, 'Test execution', 1, 500);

/* 17. BRM_CUSTOM_GROUP_MEMBERS – maps custom group IDs to rule IDs */
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES
(1, 1),
(1, 2);

/* 18. BRM_CUSTOM_RULE_GROUPS – defines custom rule groups */
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME)
VALUES
('Customer Orders Group');

/* 19. DECISION_TABLES – decision table definitions */
INSERT INTO dbo.DECISION_TABLES (TABLE_NAME, DESCRIPTION)
VALUES
('dbo.Customers', 'Customer Decision Table'),
('dbo.Orders', 'Order Decision Table');

/* 20. RULE_TAGS – tags assigned to rules */
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME)
VALUES
(1, 'Customer'),
(1, 'Validation'),
(2, 'Order'),
(2, 'Check');

/* 21. DATA_VALIDATION_LOGS – logs of data validation executions */
INSERT INTO dbo.DATA_VALIDATION_LOGS (RESULT_FLAG, VALIDATION_TIMESTAMP)
VALUES
('PASS', GETDATE()),
('FAIL', GETDATE());

/* 22. BUSINESS_GROUPS – business groups definition */
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL, IS_OWNER_GROUP)
VALUES
('Admin', 'Administrators', 'admin@example.com', 1),
('BG1', 'Business Group 1', 'bg1@example.com', 0);

/* 23. ACTIVITY_LOG – activity log for tracking events */
INSERT INTO dbo.ACTIVITY_LOG (EVENT_TYPE, DESCRIPTION, [USER], ADDITIONAL_DATA)
VALUES
('Login', 'User logged in', 'john_doe', '{"ip": "192.168.1.10"}');

/* 24. BRM_DEFECT_LOGS – defect/issue log for rules */
INSERT INTO dbo.BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS)
VALUES
(1, 'Age validation failed for some customers', 'High', 'jane_smith', 'Open');

/* 25. RULE_SNAPSHOTS – stores snapshots of the rules table */
INSERT INTO dbo.RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON)
VALUES
('Snapshot 1', 'admin', '{"rules": [{"RULE_ID":1,"RULE_NAME":"Validate Customer Age"}]}');

/* 26. BRM_ALERTS – alerts for rule issues */
INSERT INTO dbo.BRM_ALERTS (RULE_ID, ALERT_MESSAGE, CREATED_TIMESTAMP, STATUS)
VALUES
(1, 'Rule 1 execution delayed', GETDATE(), 'Active');

/* 27. ALERT_CONFIGURATIONS – configuration for alerts */
INSERT INTO dbo.ALERT_CONFIGURATIONS (CONFIG_NAME, VALUE, DESCRIPTION)
VALUES
('EmailAlertThreshold', '2000', 'Threshold in ms for email alert on slow execution');

/* 28. BRM_SYSTEM_CONFIG – system configuration settings */
INSERT INTO dbo.BRM_SYSTEM_CONFIG (CONFIG_NAME, CONFIG_VALUE, DESCRIPTION)
VALUES
('SystemMode', 'Demo', 'Operating mode of the system');

/* ---------------------------------------------------
   Additional Sample Data for Testing Customers & Orders
   (These tables are used by rule SQL statements)
--------------------------------------------------- */

-- Customers table (assumed to be created separately)
-- CREATE TABLE dbo.Customers (
--    CustomerID INT IDENTITY(1,1) PRIMARY KEY,
--    Name VARCHAR(100),
--    Age INT,
--    Email VARCHAR(100)
-- );
INSERT INTO dbo.Customers (Name, Age, Email)
VALUES
('Alice', 30, 'alice@example.com'),
('Bob', 17, 'bob@example.com'),   -- Bob is underage (to test validation)
('Charlie', 25, 'charlie@example.com');

-- Orders table (assumed to be created separately)
-- CREATE TABLE dbo.Orders (
--    OrderID INT IDENTITY(1,1) PRIMARY KEY,
--    CustomerID INT,
--    Total DECIMAL(10,2),
--    OrderDate DATETIME
-- );
INSERT INTO dbo.Orders (CustomerID, Total, OrderDate)
VALUES
(1, 150.00, GETDATE()),
(1, 0.00, GETDATE()),   -- Zero total to test the "Order Total Check" rule
(3, 250.50, GETDATE());

--------------------------------------------------
-- End of Test Data Inserts
--------------------------------------------------
--------------------------------------------------
-- DDL and Sample Data for Customers and Orders
--------------------------------------------------

-- Drop the tables if they already exist (for testing purposes)
IF OBJECT_ID('dbo.Orders', 'U') IS NOT NULL
    DROP TABLE dbo.Orders;
IF OBJECT_ID('dbo.Customers', 'U') IS NOT NULL
    DROP TABLE dbo.Customers;

-- Create the Customers table
CREATE TABLE dbo.Customers (
    CustomerID INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Age INT NOT NULL,
    Email VARCHAR(100) NOT NULL
);
GO

-- Create the Orders table with a foreign key reference to Customers
CREATE TABLE dbo.Orders (
    OrderID INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID INT NOT NULL,
    Total DECIMAL(10,2) NOT NULL,
    OrderDate DATETIME NOT NULL,
    CONSTRAINT FK_Orders_Customers FOREIGN KEY (CustomerID) REFERENCES dbo.Customers(CustomerID)
);
GO

--------------------------------------------------
-- Insert sample data into Customers
--------------------------------------------------
INSERT INTO dbo.Customers (Name, Age, Email)
VALUES
    ('Alice', 30, 'alice@example.com'),
    ('Bob', 17, 'bob@example.com'),        -- Bob is underage (to test validation)
    ('Charlie', 25, 'charlie@example.com');
GO

--------------------------------------------------
-- Insert sample data into Orders
--------------------------------------------------
INSERT INTO dbo.Orders (CustomerID, Total, OrderDate)
VALUES
    (1, 150.00, GETDATE()),      -- Order for Alice with a valid total
    (1, 0.00, GETDATE()),        -- Order for Alice with zero total (to test rule failure)
    (3, 250.50, GETDATE());      -- Order for Charlie
GO

--------------------------------------------------
-- Verify inserted data (optional)
--------------------------------------------------
SELECT * FROM dbo.Customers;
SELECT * FROM dbo.Orders;
