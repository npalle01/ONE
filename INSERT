/*****************************************************
   SAMPLE DATA INSERTS FOR THE BRM TOOL
   (Compatible with the updated DDL and code)
*****************************************************/

/* 1. BRM_AUDIT_LOG */
INSERT INTO dbo.BRM_AUDIT_LOG (ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA)
VALUES 
('INSERT', 'BRM_RULES', '1', 'admin', NULL, '{"RULE_NAME": "Test Rule 1"}'),
('UPDATE', 'BRM_RULES', '1', 'user1', '{"STATUS": "INACTIVE"}', '{"STATUS": "ACTIVE"}');

/* 2. USERS */
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP)
VALUES 
('admin', 'adminpass', 'Admin'),
('user1', 'user1pass', 'BG1'),
('user2', 'user2pass', 'BG1');

/* 3. BRM_RULES */
-- (Assuming the updated schema now includes: CLUSTER_NAME, UPDATED_TIMESTAMP, PERF_MS_AVG)
INSERT INTO dbo.BRM_RULES 
    (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE,
     STATUS, VERSION, CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION, OWNER_GROUP,
     APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE, LIFECYCLE_STATE,
     CLUSTER_NAME, PERF_MS_AVG)
VALUES 
(1, NULL, 1, 'Test Rule 1', 'SELECT 1', GETDATE(), NULL,
 'INACTIVE', 1, 'admin', 'Sample rule for testing', 'SELECT', 'Justification text', 'BG1',
 'APPROVAL_IN_PROGRESS', 0, 0, 'NONE', 'NONE', 'DRAFT',
 'ClusterA', 0.0),
(1, 1, 1, 'Test Rule 2', 'SELECT 0', GETDATE(), NULL,
 'INACTIVE', 1, 'user1', 'Another sample rule', 'SELECT', 'Justification text', 'BG1',
 'APPROVAL_IN_PROGRESS', 0, 0, 'NONE', 'NONE', 'DRAFT',
 'ClusterA', 0.0);

/* 4. BRM_RULE_APPROVALS */
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES 
(1, 'BG1', 'user1', 0, 1),
(1, 'FINAL', 'final_approver', 0, 2);

/* 5. BRM_RULE_LOCKS */
INSERT INTO dbo.BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK)
VALUES 
(1, 'user1', GETDATE(), DATEADD(MINUTE, 30, GETDATE()), 0);

/* 6. DATA_VALIDATIONS */
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES 
('dbo.Customers', 'CustomerID', 'NOT NULL', NULL),
('dbo.Orders', 'OrderAmount', 'RANGE', '0,10000');

/* 7. DATA_VALIDATION_LOGS */
INSERT INTO dbo.DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS)
VALUES 
(1, 'PASS', 'No NULLs found'),
(2, 'FAIL', '3 out-of-range orders found');

/* 8. BRM_RULE_TABLE_DEPENDENCIES */
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES 
(1, 'dbo', 'Customers', 'CustomerID', 'READ'),
(2, 'dbo', 'Orders', 'OrderAmount', 'READ');

/* 9. BRM_RULE_LINEAGE */
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_RULE_ID)
VALUES 
(1, NULL),
(2, 1);

/* 10. BRM_GLOBAL_CRITICAL_LINKS */
INSERT INTO dbo.BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES 
(1, 2);

/* 11. RULE_CONFLICTS */
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES 
(1, 2, 1);

/* 12. COMPOSITE_RULES */
INSERT INTO dbo.COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES 
('Composite Rule 1', 'Rule1==PASS AND Rule2==PASS', 'SendEmail');

/* 13. BRM_CUSTOM_RULE_GROUPS */
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
VALUES 
('CustomGroup1', 'BG1', 'admin');

/* 14. BRM_CUSTOM_GROUP_MEMBERS */
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES 
(1, 1),
(1, 2);

/* 15. RULE_SCHEDULES */
INSERT INTO dbo.RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, VALIDATION_FLAG)
VALUES 
(1, DATEADD(HOUR, 1, GETDATE()), 'Scheduled', 1);

/* 16. BRM_DEFECT_LOGS */
INSERT INTO dbo.BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS)
VALUES 
(1, 'Missing JOIN condition in rule 1', 'High', 'user1', 'Open');

/* 17. COLLABORATION_LOGS */
INSERT INTO dbo.COLLABORATION_LOGS (MESSAGE, SENDER)
VALUES 
('User user1 is editing rule 1', 'user1');

/* 18. BRM_RULE_PERF_STATS */
INSERT INTO dbo.BRM_RULE_PERF_STATS (RULE_ID, DATE_KEY, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT)
VALUES 
(1, CONVERT(CHAR(8), GETDATE(), 112), 1200, 256.5, 10);

/* 19. DECISION_TABLES */
-- Note: DECISION_QUERY is required; we supply a simple query.
INSERT INTO dbo.DECISION_TABLES (TABLE_NAME, DESCRIPTION, DECISION_QUERY)
VALUES 
('dbo.Customers', 'Decision table for customer segmentation', 'SELECT * FROM dbo.Customers WHERE CustomerID IS NOT NULL');

/* 20. DECISION_TABLE_EXEC_LOGS */
INSERT INTO dbo.DECISION_TABLE_EXEC_LOGS (DECISION_TABLE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT)
VALUES 
(1, 1, 'Executed with success', 100);

/* 21. RULE_SNAPSHOTS */
INSERT INTO dbo.RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON)
VALUES 
('Snapshot1', 'admin', '{"rules": [{"RULE_ID":1,"RULE_NAME":"Test Rule 1"}]}');

/* 22. RULE_TAGS */
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME)
VALUES 
(1, 'Critical'),
(2, 'Review');

/* 23. BRM_RULE_GROUPS */
INSERT INTO dbo.BRM_RULE_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES 
('Group1', 'Primary group', 'group1@example.com');

/* 24. BRM_RULE_TYPES */
INSERT INTO dbo.BRM_RULE_TYPES (RULE_TYPE_NAME)
VALUES 
('Standard'),
('Validation');

/* 25. BUSINESS_GROUPS */
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL, IS_OWNER_GROUP)
VALUES 
('BG1', 'Business Group 1', 'bg1@example.com', 0),
('Admin', 'Administrative Group', 'admin@example.com', 1);

/* 26. GROUP_PERMISSIONS */
INSERT INTO dbo.GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE)
VALUES 
('BG1', 'dbo.Customers'),
('BG1', 'dbo.Orders');

/* 27. HELP_CONTENT */
INSERT INTO dbo.HELP_CONTENT (CATEGORY, TITLE, CONTENT)
VALUES 
('General', 'BRM Tool Overview', 'This is an overview of the BRM Tool.');

/* 28. BRM_CUSTOM_GROUP_BACKUPS */
INSERT INTO dbo.BRM_CUSTOM_GROUP_BACKUPS (CUSTOM_GROUP_ID, BACKUP_VERSION, BACKUP_JSON)
VALUES 
(1, 1, '{"group_id":1,"members":[1,2]}');

/* 29. BRM_COLUMN_MAPPING */
-- Note: The code expects to check for references using RULE_ID so we insert mapping for rule 1.
INSERT INTO dbo.BRM_COLUMN_MAPPING (RULE_ID, SOURCE_COLUMN, TARGET_COLUMN)
VALUES 
(1, 'CustomerName', 'CustName');

/* 30. RULE_EXECUTION_LOGS */
INSERT INTO dbo.RULE_EXECUTION_LOGS (RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS)
VALUES 
(1, 1, 'Rule executed successfully', 100, 1500),
(2, 0, 'Rule execution failed due to SQL error', 0, 0);

/* 31. ACTIVITY_LOG */
INSERT INTO dbo.ACTIVITY_LOG (EVENT_TYPE, EVENT_DESCRIPTION, USERNAME)
VALUES 
('Login', 'User admin logged in.', 'admin'),
('BFS', 'BFS execution completed for rule 1.', 'user1');

/* 32. RULE_PREDICTION_ANALYTICS */
INSERT INTO dbo.RULE_PREDICTION_ANALYTICS (RULE_ID, PREDICTION_DATE, PREDICTED_OUTCOME, CONFIDENCE_SCORE)
VALUES 
(1, CAST(GETDATE() AS DATE), 'PASS', 0.95),
(2, DATEADD(DAY, 1, CAST(GETDATE() AS DATE)), 'FAIL', 0.60);
GO

/*****************************************************
   End of Sample Data Inserts for the BRM Tool
*****************************************************/