/*****************************************************
  SAMPLE TEST DATA FOR BRM TOOL
  This script inserts test data covering:
    • Users: Admin and regular users.
    • Rules: A data‑movement rule (INSERT), a global rule, and a critical rule.
    • Approvals: Multi‑step approvals for each rule.
    • Locks: A sample active lock.
    • Data Validations & Logs: Including one passing and one failing validation.
    • Table Dependencies: For rule processing.
    • Lineage: Parent–child relationships.
    • Global/Critical Links & Conflicts.
    • Composite Rules.
    • Custom Rule Groups & Members, including a backup.
    • Schedules for rule execution.
    • Defect and Collaboration logs.
    • Performance stats.
    • Decision Tables and execution logs.
    • Snapshots.
    • Rule Tags.
    • Rule Groups and Rule Types.
    • Business Groups and Group Permissions.
    • Help Content.
    • Column Mappings.
*****************************************************/

/* 1. USERS */
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP)
VALUES
  ('admin', 'dnimda', 'Admin'),       -- password: 'admin' reversed
  ('user1', '1resu', 'BG1'),
  ('user2', '2resu', 'BG2');

/* 2. BRM_RULES */
/* Assume auto-generated RULE_IDs: 
   Rule 1: Data Movement Rule (an INSERT rule)
   Rule 2: Global Rule (IS_GLOBAL=1)
   Rule 3: Critical Rule (CRITICAL_RULE=1 with CRITICAL_SCOPE='GROUP')
*/
INSERT INTO dbo.BRM_RULES
  (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
   EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION, CREATED_BY,
   DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION, OWNER_GROUP,
   APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE, LIFECYCLE_STATE)
VALUES
  (1, NULL, 1, 'Data Movement Rule', 'INSERT INTO DestinationTable SELECT * FROM SourceTable',
    '2025-01-01', '2025-12-31', 'INACTIVE', 1, 'admin',
    'Moves data from Source to Destination', 'INSERT', 'ETL data movement', 'BG1',
    'APPROVAL_IN_PROGRESS', 0, 0, 'NONE', 'NONE', 'DRAFT'),
    
  (1, NULL, 2, 'Global Rule', 'SELECT 1',
    '2025-01-01', '2025-12-31', 'ACTIVE', 1, 'admin',
    'A global rule applied across the system', 'SELECT', 'Essential global rule', 'Admin',
    'APPROVED', 1, 0, 'NONE', 'NONE', 'ACTIVE'),
    
  (2, NULL, 3, 'Critical Rule', 'UPDATE Customers SET CreditLimit = CreditLimit * 1.1',
    '2025-01-01', '2025-12-31', 'INACTIVE', 1, 'user1',
    'Critical update for customer credit limits', 'UPDATE', 'Adjusts limits for sensitive customers', 'BG2',
    'APPROVAL_IN_PROGRESS', 0, 1, 'GROUP', 'NONE', 'DRAFT');

/* 3. BRM_RULE_APPROVALS */
/* For Rule 1 (Data Movement Rule) */
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE, APPROVED_TIMESTAMP)
VALUES
  (1, 'BG1', 'user1', 0, 1, NULL);

/* For Rule 2 (Global Rule) */
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE, APPROVED_TIMESTAMP)
VALUES
  (2, 'Admin', 'admin', 1, 1, GETDATE());

/* For Rule 3 (Critical Rule) */
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE, APPROVED_TIMESTAMP)
VALUES
  (3, 'BG2', 'user2', 0, 1, NULL);

/* 4. BRM_RULE_LOCKS */
/* Lock rule 1 by user1 */
INSERT INTO dbo.BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES
  (1, 'user1', GETDATE(), DATEADD(MINUTE, 30, GETDATE()), 0, 1);

/* 5. DATA_VALIDATIONS */
/* Validate that Customer emails match a regex, and Orders have non‑NULL OrderDate */
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS, CREATED_TIMESTAMP)
VALUES
  ('dbo.Customers', 'Email', 'REGEX', '^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$', GETDATE()),
  ('dbo.Orders', 'OrderDate', 'NOT NULL', NULL, GETDATE());

/* 6. DATA_VALIDATION_LOGS */
INSERT INTO dbo.DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS, VALIDATION_TIMESTAMP)
VALUES
  (1, 'PASS', 'All customer emails valid.', GETDATE()),
  (2, 'FAIL', 'Some orders are missing OrderDate.', GETDATE());

/* 7. BRM_RULE_TABLE_DEPENDENCIES */
/* For Rule 1, add dependency on SourceTable (READ) and DestinationTable (WRITE) */
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES
  (1, 'dbo', 'SourceTable', 'Column1', 'READ'),
  (1, 'dbo', 'DestinationTable', 'Column1', 'WRITE');

/* 8. BRM_RULE_LINEAGE */
/* For demonstration, let Rule 3 be derived from Rule 1 */
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_RULE_ID)
VALUES
  (3, 1);

/* 9. BRM_GLOBAL_CRITICAL_LINKS */
/* Link Global Rule (Rule 2) to Critical Rule (Rule 3) */
INSERT INTO dbo.BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES
  (2, 3);

/* 10. RULE_CONFLICTS */
/* Conflict between Rule 1 and Rule 3 with priority 1 */
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES
  (1, 3, 1);

/* 11. COMPOSITE_RULES */
/* Composite Rule referencing Rule 1 and Rule 2 */
INSERT INTO dbo.COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES
  ('Composite Rule 1', 'Rule1==PASS AND Rule2==PASS', 'SendNotification');

/* 12. BRM_CUSTOM_RULE_GROUPS */
/* Create a custom group “Custom Group A” owned by BG1 */
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY, CREATED_TIMESTAMP)
VALUES
  ('Custom Group A', 'BG1', 'user1', GETDATE());

/* 13. BRM_CUSTOM_GROUP_MEMBERS */
/* Assign Rule 1 and Rule 3 to Custom Group A (assume CUSTOM_GROUP_ID = 1) */
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES
  (1, 1),
  (1, 3);

/* 14. RULE_SCHEDULES */
/* Schedule Rule 1 to run 2 hours from now with data validations enabled */
INSERT INTO dbo.RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, CREATED_TIMESTAMP, RUN_DATA_VALIDATIONS)
VALUES
  (1, DATEADD(HOUR, 2, GETDATE()), 'Scheduled', GETDATE(), 1);

/* 15. BRM_DEFECT_LOGS */
/* Log a defect for Rule 3 */
INSERT INTO dbo.BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS, TIMESTAMP)
VALUES
  (3, 'Critical failure in rule logic.', 'High', 'user2', 'Open', GETDATE());

/* 16. COLLABORATION_LOGS */
INSERT INTO dbo.COLLABORATION_LOGS (MESSAGE, SENDER, TIMESTAMP)
VALUES
  ('Review required for changes in Rule 1.', 'user1', GETDATE());

/* 17. BRM_RULE_PERF_STATS */
/* Insert performance stat for Rule 2 */
INSERT INTO dbo.BRM_RULE_PERF_STATS (RULE_ID, DATE_KEY, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT, ACTION_TIMESTAMP)
VALUES
  (2, CONVERT(CHAR(8), GETDATE(), 112), 150.5, 50.0, 10, GETDATE());

/* 18. DECISION_TABLES */
INSERT INTO dbo.DECISION_TABLES (TABLE_NAME, DESCRIPTION, DECISION_QUERY, CREATED_TIMESTAMP)
VALUES
  ('DecisionTable1', 'Decides customer risk', 'SELECT Risk FROM Customers WHERE Score > 700', GETDATE());

/* 19. DECISION_TABLE_EXEC_LOGS */
INSERT INTO dbo.DECISION_TABLE_EXEC_LOGS (DECISION_TABLE_ID, EXEC_TIMESTAMP, PASS_FLAG, MESSAGE, RECORD_COUNT)
VALUES
  (1, GETDATE(), 1, 'Decision table executed successfully.', 100);

/* 20. RULE_SNAPSHOTS */
INSERT INTO dbo.RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, CREATED_TIMESTAMP, SNAPSHOT_JSON)
VALUES
  ('Snapshot1', 'admin', GETDATE(), '{"rules": [{"RULE_ID":1,"RULE_NAME":"Data Movement Rule"}, {"RULE_ID":2,"RULE_NAME":"Global Rule"}]}');

/* 21. RULE_TAGS */
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME)
VALUES
  (1, 'DataMovement'),
  (2, 'Global'),
  (3, 'Critical'),
  (1, 'ETL');

/* 22. BRM_RULE_GROUPS */
INSERT INTO dbo.BRM_RULE_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES
  ('Group 1', 'Rules for group 1', 'group1@example.com'),
  ('Group 2', 'Rules for group 2', 'group2@example.com');

/* 23. BRM_RULE_TYPES */
INSERT INTO dbo.BRM_RULE_TYPES (RULE_TYPE_NAME)
VALUES
  ('Insert Rule'),
  ('Select Rule'),
  ('Update Rule'),
  ('Delete Rule');

/* 24. BUSINESS_GROUPS */
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES
  ('BG1', 'Business Group 1', 'bg1@example.com'),
  ('BG2', 'Business Group 2', 'bg2@example.com'),
  ('Admin', 'Administration Group', 'admin@example.com');

/* 25. GROUP_PERMISSIONS */
INSERT INTO dbo.GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE)
VALUES
  ('BG1', 'dbo.SourceTable'),
  ('BG1', 'dbo.DestinationTable'),
  ('Admin', 'dbo.*'),
  ('BG2', 'dbo.Customers');

/* 26. HELP_CONTENT */
INSERT INTO dbo.HELP_CONTENT (CATEGORY, TITLE, CONTENT, LAST_UPDATED)
VALUES
  ('General', 'How to use BRM Tool', 'This help content explains the usage of the BRM Tool.', GETDATE());

/* 27. BRM_CUSTOM_GROUP_BACKUPS */
INSERT INTO dbo.BRM_CUSTOM_GROUP_BACKUPS (CUSTOM_GROUP_ID, BACKUP_TIMESTAMP, BACKUP_VERSION, BACKUP_JSON)
VALUES
  (1, GETDATE(), 1, '{"group_name": "Custom Group A", "members": [1, 3]}');

/* 28. BRM_COLUMN_MAPPING */
INSERT INTO dbo.BRM_COLUMN_MAPPING (RULE_ID, SOURCE_COLUMN, TARGET_COLUMN)
VALUES
  (1, 'SourceColumn1', 'DestColumn1');