/***************************************************************
  -- BRM Tool Demo – Sample Schema, Data, and Test Inserts
  -- This script creates:
     1. Source tables: CUSTOMERS and ORDERS
     2. BRM tool tables:
         • BRM_RULES         -- Rule definitions (data movement, update, quality)
         • GROUP_PERMISSIONS -- Which group can access which table
         • BRM_AUDIT_LOG     -- Audit logging of rule actions
         • BRM_RULE_LOCKS    -- For rule editing locks
         • RULE_CONFLICTS    -- Conflicts between rules
         • BRM_GLOBAL_CRITICAL_LINKS  -- Global-critical link mapping
         • COMPOSITE_RULES   -- Composite rule definitions
         • DATA_VALIDATIONS  -- Data validation definitions
         • DATA_VALIDATION_LOGS  -- Logs for validations
         • RULE_EXECUTION_LOGS   -- Logs of rule execution outcomes
         • DECISION_TABLES       -- Decision table definitions
         • DECISION_TABLE_EXEC_LOGS  -- Execution logs for decision tables
         • RULE_SCHEDULES        -- Scheduled rule executions
         • BRM_RULE_APPROVALS    -- Multi-step approval records
         • USERS                 -- User login info
         • BUSINESS_GROUPS       -- Business groups
         • BRM_CUSTOM_RULE_GROUPS  -- Custom rule groups
         • BRM_CUSTOM_GROUP_MEMBERS -- Members (rules) in custom groups
         • COLLABORATION_LOGS    -- Collaboration messages
         • BRM_DEFECT_LOGS       -- Defect tracking logs
         • RULE_PERF_STATS       -- Performance statistics for rules
         • BRM_RULE_LINEAGE      -- Parent-child lineage information
         • RULE_TAGS             -- Rule tags
         • HELP_CONTENT          -- Help/FAQ content
  -- The sample inserts simulate:
       • Data movement (e.g. selecting new orders)
       • Data update (e.g. updating a customer’s email)
       • Data quality (e.g. checking for missing customer names)
       • Approvals, scheduling, composite rules, lineage, and more.
  -- Adjust as necessary for your environment.
***************************************************************/

-----------------------------
-- 1. Create Source Tables
-----------------------------
-- CUSTOMERS table
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    CUSTOMER_NAME NVARCHAR(100) NOT NULL,
    EMAIL NVARCHAR(100) NULL,
    CREATED_DATE DATETIME NOT NULL
);
GO

-- ORDERS table
CREATE TABLE ORDERS (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT NOT NULL,
    ORDER_DATE DATETIME NOT NULL,
    AMOUNT DECIMAL(10,2) NOT NULL,
    STATUS NVARCHAR(50) NOT NULL,
    CONSTRAINT FK_ORDERS_CUSTOMERS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);
GO

-----------------------------
-- 2. Create BRM Tool Tables
-----------------------------
-- BRM_RULES: Stores rule definitions.
CREATE TABLE BRM_RULES (
    RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_NAME NVARCHAR(200) NOT NULL,
    RULE_SQL NVARCHAR(MAX) NOT NULL,
    OWNER_GROUP NVARCHAR(50) NOT NULL,
    CREATED_BY NVARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL,
    UPDATED_BY NVARCHAR(50) NULL,
    UPDATED_TIMESTAMP DATETIME NULL,
    VERSION INT DEFAULT 1
);
GO

-- GROUP_PERMISSIONS: Defines table-level permissions per group.
CREATE TABLE GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME NVARCHAR(50) NOT NULL,
    TARGET_TABLE NVARCHAR(100) NOT NULL
);
GO

-- BRM_AUDIT_LOG: Audit logging table.
CREATE TABLE BRM_AUDIT_LOG (
    AUDIT_ID INT IDENTITY(1,1) PRIMARY KEY,
    ACTION NVARCHAR(50) NOT NULL,
    TABLE_NAME NVARCHAR(100) NOT NULL,
    RECORD_ID NVARCHAR(50) NULL,
    ACTION_BY NVARCHAR(50) NOT NULL,
    OLD_DATA NVARCHAR(MAX) NULL,
    NEW_DATA NVARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL
);
GO

-- BRM_RULE_LOCKS: For rule editing locks.
CREATE TABLE BRM_RULE_LOCKS (
    LOCK_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    LOCKED_BY NVARCHAR(50) NOT NULL,
    LOCK_TIMESTAMP DATETIME NOT NULL,
    EXPIRY_TIMESTAMP DATETIME NOT NULL,
    FORCE_LOCK BIT NOT NULL,
    ACTIVE_LOCK BIT NOT NULL
);
GO

-- RULE_CONFLICTS: Stores conflicting rule pairs.
CREATE TABLE RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID1 INT NOT NULL,
    RULE_ID2 INT NOT NULL,
    PRIORITY INT NULL
);
GO

-- BRM_GLOBAL_CRITICAL_LINKS: One-way global-critical links.
CREATE TABLE BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID INT IDENTITY(1,1) PRIMARY KEY,
    GCR_RULE_ID INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);
GO

-- COMPOSITE_RULES: Stores composite rule definitions.
CREATE TABLE COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_NAME NVARCHAR(200) NOT NULL,
    LOGIC_EXPR NVARCHAR(MAX) NOT NULL,
    ACTION_ON_PASS NVARCHAR(100) NULL
);
GO

-- DATA_VALIDATIONS: Stores data validation definitions.
CREATE TABLE DATA_VALIDATIONS (
    VALIDATION_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME NVARCHAR(100) NOT NULL,
    COLUMN_NAME NVARCHAR(100) NOT NULL,
    VALIDATION_TYPE NVARCHAR(50) NOT NULL,
    PARAMS NVARCHAR(200) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL
);
GO

-- DATA_VALIDATION_LOGS: Logs of validation results.
CREATE TABLE DATA_VALIDATION_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    VALIDATION_ID INT NOT NULL,
    RESULT_FLAG NVARCHAR(10) NOT NULL,  -- e.g., PASS or FAIL
    DETAILS NVARCHAR(MAX) NULL,
    VALIDATION_TIMESTAMP DATETIME NOT NULL
);
GO

-- RULE_EXECUTION_LOGS: Logs rule execution outcomes.
CREATE TABLE RULE_EXECUTION_LOGS (
    EXEC_LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL,
    PASS_FLAG BIT NOT NULL,
    MESSAGE NVARCHAR(MAX) NULL,
    RECORD_COUNT INT,
    EXECUTION_TIME_MS INT,
    CPU_USAGE INT,
    MEM_USAGE INT
);
GO

-- DECISION_TABLES: For decision table execution.
CREATE TABLE DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME NVARCHAR(100) NULL,
    DESCRIPTION NVARCHAR(MAX) NULL,
    DECISION_QUERY NVARCHAR(MAX) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL
);
GO

-- DECISION_TABLE_EXEC_LOGS: Logs decision table executions.
CREATE TABLE DECISION_TABLE_EXEC_LOGS (
    DT_EXEC_LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    DECISION_TABLE_ID INT NOT NULL,
    EXEC_TIMESTAMP DATETIME NOT NULL,
    PASS_FLAG BIT NOT NULL,
    MESSAGE NVARCHAR(MAX) NULL,
    RECORD_COUNT INT
);
GO

-- RULE_SCHEDULES: Scheduling of rule executions.
CREATE TABLE RULE_SCHEDULES (
    SCHEDULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    SCHEDULE_TIME DATETIME NOT NULL,
    STATUS NVARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL,
    RUN_DATA_VALIDATIONS BIT NOT NULL
);
GO

-- BRM_RULE_APPROVALS: Multi-step rule approval records.
CREATE TABLE BRM_RULE_APPROVALS (
    APPROVAL_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    GROUP_NAME NVARCHAR(50) NOT NULL,
    USERNAME NVARCHAR(50) NOT NULL,
    APPROVED_FLAG INT NOT NULL,  -- 0: pending, 1: approved, 2: rejected
    APPROVAL_STAGE INT NOT NULL,
    APPROVED_TIMESTAMP DATETIME NULL
);
GO

-- USERS: User login details.
CREATE TABLE USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME NVARCHAR(50) NOT NULL,
    PASSWORD NVARCHAR(50) NOT NULL,
    USER_GROUP NVARCHAR(50) NOT NULL
);
GO

-- BUSINESS_GROUPS: List of business groups.
CREATE TABLE BUSINESS_GROUPS (
    GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME NVARCHAR(50) NOT NULL,
    DESCRIPTION NVARCHAR(200) NULL,
    EMAIL NVARCHAR(100) NULL
);
GO

-- BRM_CUSTOM_RULE_GROUPS: Custom rule groups.
CREATE TABLE BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME NVARCHAR(100) NOT NULL,
    OWNER_BUSINESS_GROUP NVARCHAR(50) NOT NULL,
    CREATED_BY NVARCHAR(50) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL
);
GO

-- BRM_CUSTOM_GROUP_MEMBERS: Rules assigned to custom groups.
CREATE TABLE BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID INT NOT NULL
);
GO

-- COLLABORATION_LOGS: Collaboration messages.
CREATE TABLE COLLABORATION_LOGS (
    LOG_ID INT IDENTITY(1,1) PRIMARY KEY,
    MESSAGE NVARCHAR(MAX) NOT NULL,
    SENDER NVARCHAR(50) NOT NULL,
    TIMESTAMP DATETIME NOT NULL
);
GO

-- BRM_DEFECT_LOGS: Defect tracking logs.
CREATE TABLE BRM_DEFECT_LOGS (
    DEFECT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DESCRIPTION NVARCHAR(MAX) NOT NULL,
    SEVERITY NVARCHAR(50) NOT NULL,
    REPORTER NVARCHAR(50) NOT NULL,
    STATUS NVARCHAR(50) NOT NULL,
    TIMESTAMP DATETIME NOT NULL
);
GO

-- RULE_PERF_STATS: Performance statistics for rules.
CREATE TABLE RULE_PERF_STATS (
    STAT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    DATE_KEY CHAR(8) NOT NULL,  -- Format: YYYYMMDD
    EXEC_TIME_MS INT NOT NULL,
    MEM_USAGE INT NOT NULL,
    USAGE_COUNT INT NOT NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL
);
GO

-- BRM_RULE_LINEAGE: Stores parent-child relationships for rules.
CREATE TABLE BRM_RULE_LINEAGE (
    LINEAGE_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    PARENT_ID INT NULL
);
GO

-- RULE_TAGS: Tag assignments for rules.
CREATE TABLE RULE_TAGS (
    TAG_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID INT NOT NULL,
    TAG_NAME NVARCHAR(50) NOT NULL
);
GO

-- HELP_CONTENT: Help and documentation content.
CREATE TABLE HELP_CONTENT (
    HELP_ID INT IDENTITY(1,1) PRIMARY KEY,
    CATEGORY NVARCHAR(50) NOT NULL,
    TITLE NVARCHAR(200) NOT NULL,
    CONTENT NVARCHAR(MAX) NOT NULL,
    LAST_UPDATED DATETIME NOT NULL
);
GO

-----------------------------
-- 3. Insert Sample Data into Source Tables
-----------------------------
-- CUSTOMERS sample data
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, EMAIL, CREATED_DATE)
VALUES
    (1, 'Alice', 'alice@example.com', '2021-01-01'),
    (2, 'Bob', 'bobexample.com', '2021-02-15'),  -- Deliberate error for quality check
    (3, 'Charlie', 'charlie@example.com', '2021-03-10');
GO

-- ORDERS sample data
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, AMOUNT, STATUS)
VALUES
    (1, 1, '2023-01-10', 150.50, 'NEW'),
    (2, 2, '2023-01-11', 250.00, 'PROCESSED'),
    (3, 1, '2023-01-12', 350.75, 'NEW'),
    (4, 3, '2023-01-13', 450.00, 'CANCELLED');
GO

-----------------------------
-- 4. Insert Sample Data into BRM Tool Tables
-----------------------------
DECLARE @Now DATETIME = GETDATE();

-- Sample rules in BRM_RULES
-- Rule 1: Data Movement – select new orders.
INSERT INTO BRM_RULES (RULE_NAME, RULE_SQL, OWNER_GROUP, CREATED_BY, CREATED_TIMESTAMP)
VALUES ('New Orders Movement', 'SELECT * FROM ORDERS WHERE STATUS = ''NEW''', 'BG1', 'Tester', @Now);
GO

-- Rule 2: Data Update – update customer email.
INSERT INTO BRM_RULES (RULE_NAME, RULE_SQL, OWNER_GROUP, CREATED_BY, CREATED_TIMESTAMP)
VALUES ('Fix Customer Email', 'UPDATE CUSTOMERS SET EMAIL = LOWER(EMAIL) WHERE CUSTOMER_ID = 2', 'BG1', 'Tester', @Now);
GO

-- Rule 3: Data Quality – check for missing customer names.
INSERT INTO BRM_RULES (RULE_NAME, RULE_SQL, OWNER_GROUP, CREATED_BY, CREATED_TIMESTAMP)
VALUES ('Check Null Customer Name', 'SELECT COUNT(*) FROM CUSTOMERS WHERE CUSTOMER_NAME IS NULL', 'BG1', 'Tester', @Now);
GO

-- GROUP_PERMISSIONS: Grant group BG1 access to CUSTOMERS and ORDERS.
INSERT INTO GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE)
VALUES ('BG1', 'customers'), ('BG1', 'orders');
GO

-- BRM_AUDIT_LOG: Sample audit record for rule insertion.
INSERT INTO BRM_AUDIT_LOG (ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA, ACTION_TIMESTAMP)
VALUES ('INSERT', 'BRM_RULES', '1', 'Tester', NULL, '{"RULE_NAME": "New Orders Movement", "RULE_SQL": "SELECT * FROM ORDERS WHERE STATUS = ''NEW''"}', @Now);
GO

-- BRM_RULE_LOCKS: Sample lock on rule 1.
INSERT INTO BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES (1, 'User1', @Now, DATEADD(MINUTE, 30, @Now), 0, 1);
GO

-- RULE_CONFLICTS: Sample conflict between rule 1 and rule 2.
INSERT INTO RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES (1, 2, 1);
GO

-- BRM_GLOBAL_CRITICAL_LINKS: Sample link – rule 1 is critical for rule 3.
INSERT INTO BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES (1, 3);
GO

-- COMPOSITE_RULES: Sample composite rule combining rule 1 and rule 2.
INSERT INTO COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES ('Composite Rule 1', 'Rule1 AND Rule2', 'SendEmail');
GO

-- DATA_VALIDATIONS: Sample validation – ensure EMAIL in CUSTOMERS is NOT NULL.
INSERT INTO DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS, CREATED_TIMESTAMP)
VALUES ('CUSTOMERS', 'EMAIL', 'NOT NULL', NULL, @Now);
GO

-- DATA_VALIDATION_LOGS: Log a failed validation.
INSERT INTO DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS, VALIDATION_TIMESTAMP)
VALUES (1, 'FAIL', '1 record with invalid email found', @Now);
GO

-- RULE_EXECUTION_LOGS: Log execution for rule 1.
INSERT INTO RULE_EXECUTION_LOGS (RULE_ID, EXECUTION_TIMESTAMP, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE)
VALUES (1, @Now, 1, 'New orders selected successfully', 2, 120, 10, 500);
GO

-- DECISION_TABLES: Sample decision table.
INSERT INTO DECISION_TABLES (TABLE_NAME, DESCRIPTION, DECISION_QUERY, CREATED_TIMESTAMP)
VALUES ('Decision Table 1', 'Test decision table', 'SELECT 1 AS PASS', @Now);
GO

-- DECISION_TABLE_EXEC_LOGS: Log execution of decision table.
INSERT INTO DECISION_TABLE_EXEC_LOGS (DECISION_TABLE_ID, EXEC_TIMESTAMP, PASS_FLAG, MESSAGE, RECORD_COUNT)
VALUES (1, @Now, 1, 'Decision table executed successfully', 1);
GO

-- RULE_SCHEDULES: Sample schedule for rule 1.
INSERT INTO RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, CREATED_TIMESTAMP, RUN_DATA_VALIDATIONS)
VALUES (1, DATEADD(HOUR, 2, @Now), 'Scheduled', @Now, 1);
GO

-- BRM_RULE_APPROVALS: Sample approval record for rule 1.
INSERT INTO BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES (1, 'BusinessGroup', 'Approver1', 0, 1);
GO

-- USERS: Sample users.
INSERT INTO USERS (USERNAME, PASSWORD, USER_GROUP)
VALUES ('Tester', 'test123', 'BG1'),
       ('Approver1', 'approve123', 'BusinessGroup'),
       ('User1', 'userpass', 'BG1');
GO

-- BUSINESS_GROUPS: Sample business group.
INSERT INTO BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES ('BG1', 'Business Group 1', 'bg1@example.com');
GO

-- BRM_CUSTOM_RULE_GROUPS: Sample custom rule group.
INSERT INTO BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY, CREATED_TIMESTAMP)
VALUES ('CustomGroup1', 'BG1', 'Tester', @Now);
GO

-- BRM_CUSTOM_GROUP_MEMBERS: Assign rules 1 and 2 to custom group 1.
INSERT INTO BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES (1, 1), (1, 2);
GO

-- COLLABORATION_LOGS: Sample collaboration message.
INSERT INTO COLLABORATION_LOGS (MESSAGE, SENDER, TIMESTAMP)
VALUES ('Initial collaboration message', 'Tester', @Now);
GO

-- BRM_DEFECT_LOGS: Sample defect log for rule 2.
INSERT INTO BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS, TIMESTAMP)
VALUES (2, 'Email update failed on some records', 'High', 'Tester', 'Open', @Now);
GO

-- RULE_PERF_STATS: Sample performance stat for rule 1.
INSERT INTO RULE_PERF_STATS (RULE_ID, DATE_KEY, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT, ACTION_TIMESTAMP)
VALUES (1, CONVERT(CHAR(8), @Now, 112), 150, 400, 5, @Now);
GO

-- BRM_RULE_LINEAGE: Sample lineage – rule 2 and rule 3 are children of rule 1.
INSERT INTO BRM_RULE_LINEAGE (RULE_ID, PARENT_ID)
VALUES (2, 1), (3, 1);
GO

-- RULE_TAGS: Sample tags.
INSERT INTO RULE_TAGS (RULE_ID, TAG_NAME)
VALUES (1, 'Critical'),
       (2, 'Update'),
       (3, 'Quality');
GO

-- HELP_CONTENT: Sample help content for FAQ and Guide.
INSERT INTO HELP_CONTENT (CATEGORY, TITLE, CONTENT, LAST_UPDATED)
VALUES 
('FAQ', 'How to add a rule?', 'Use the advanced rule editor to add new rules.', @Now),
('Guide', 'Using the Lineage View', 'This guide explains how to filter and view lineage.', @Now);
GO

/***************************************************************
  -- End of Sample Data Script
  -- Run this script in SQL Server to create and populate all sample
  -- tables for testing every feature and functionality of your BRM Tool.
***************************************************************/