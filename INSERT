/*****************************************************
-- DROP EXISTING TABLES (if needed)
*****************************************************/
IF OBJECT_ID('dbo.USERS', 'U') IS NOT NULL DROP TABLE dbo.USERS;
IF OBJECT_ID('dbo.BRM_RULE_TYPES', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_TYPES;
IF OBJECT_ID('dbo.BUSINESS_GROUPS', 'U') IS NOT NULL DROP TABLE dbo.BUSINESS_GROUPS;
IF OBJECT_ID('dbo.BRM_RULE_GROUPS', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_GROUPS;
IF OBJECT_ID('dbo.BRM_RULES', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULES;
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_APPROVALS;
IF OBJECT_ID('dbo.BRM_RULE_LOCKS', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_LOCKS;
IF OBJECT_ID('dbo.DATA_VALIDATIONS', 'U') IS NOT NULL DROP TABLE dbo.DATA_VALIDATIONS;
IF OBJECT_ID('dbo.DATA_VALIDATION_LOGS', 'U') IS NOT NULL DROP TABLE dbo.DATA_VALIDATION_LOGS;
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
IF OBJECT_ID('dbo.BRM_RULE_LINEAGE', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_LINEAGE;
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS', 'U') IS NOT NULL DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
IF OBJECT_ID('dbo.RULE_CONFLICTS', 'U') IS NOT NULL DROP TABLE dbo.RULE_CONFLICTS;
IF OBJECT_ID('dbo.COMPOSITE_RULES', 'U') IS NOT NULL DROP TABLE dbo.COMPOSITE_RULES;
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS', 'U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS', 'U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
IF OBJECT_ID('dbo.RULE_SCHEDULES', 'U') IS NOT NULL DROP TABLE dbo.RULE_SCHEDULES;
IF OBJECT_ID('dbo.BRM_DEFECT_LOGS', 'U') IS NOT NULL DROP TABLE dbo.BRM_DEFECT_LOGS;
IF OBJECT_ID('dbo.COLLABORATION_LOGS', 'U') IS NOT NULL DROP TABLE dbo.COLLABORATION_LOGS;
IF OBJECT_ID('dbo.BRM_RULE_PERF_STATS', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_PERF_STATS;
IF OBJECT_ID('dbo.DECISION_TABLES', 'U') IS NOT NULL DROP TABLE dbo.DECISION_TABLES;
IF OBJECT_ID('dbo.DECISION_TABLE_EXEC_LOGS', 'U') IS NOT NULL DROP TABLE dbo.DECISION_TABLE_EXEC_LOGS;
IF OBJECT_ID('dbo.RULE_SNAPSHOTS', 'U') IS NOT NULL DROP TABLE dbo.RULE_SNAPSHOTS;
IF OBJECT_ID('dbo.RULE_TAGS', 'U') IS NOT NULL DROP TABLE dbo.RULE_TAGS;
IF OBJECT_ID('dbo.HELP_CONTENT', 'U') IS NOT NULL DROP TABLE dbo.HELP_CONTENT;
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_BACKUPS', 'U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS;
IF OBJECT_ID('dbo.BRM_COLUMN_MAPPING', 'U') IS NOT NULL DROP TABLE dbo.BRM_COLUMN_MAPPING;
IF OBJECT_ID('dbo.GROUP_PERMISSIONS', 'U') IS NOT NULL DROP TABLE dbo.GROUP_PERMISSIONS;

/*****************************************************
-- SAMPLE DATA INSERTS FOR THE BRM TOOL (Revised)
*****************************************************/

/* 1. USERS */
INSERT INTO dbo.USERS (USERNAME, PASSWORD, USER_GROUP)
VALUES 
  ('admin_user', 'admin123', 'Admin'),
  ('john_doe', 'password1', 'BG1'),
  ('jane_smith', 'password2', 'BG2');
GO

/* 2. BRM_RULE_TYPES */
INSERT INTO dbo.BRM_RULE_TYPES (RULE_TYPE_NAME)
VALUES 
  ('Data Quality'),
  ('Data Movement'),
  ('Global Rule'),
  ('Critical Rule');
GO

/* 3. BUSINESS_GROUPS */
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES 
  ('BG1', 'Business Group 1', 'bg1@example.com'),
  ('BG2', 'Business Group 2', 'bg2@example.com'),
  ('FINAL', 'Final Business Group', 'final@example.com'),
  ('Admin', 'Admin Group', 'admin@example.com');
GO

/* 4. BRM_RULE_GROUPS */
-- These groups represent the rule grouping. They are now named as BG1, BG2, FINAL, and Admin.
INSERT INTO dbo.BRM_RULE_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES 
  ('BG1', 'Rules for BG1', 'bg1_rules@example.com'),
  ('BG2', 'Rules for BG2', 'bg2_rules@example.com'),
  ('FINAL', 'Final rules', 'final_rules@example.com'),
  ('Admin', 'Administrative rules', 'admin_rules@example.com');
GO

/* 5. BRM_RULES */
-- Insert sample rules with a parent-child relationship.
INSERT INTO dbo.BRM_RULES
  (GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION, CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION, OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE, LIFECYCLE_STATE, DECISION_TABLE_ID)
VALUES
  -- A Data Quality rule under BG1
  (1, NULL, 1, 'Check Customer Email Not Null', 'SELECT CASE WHEN COUNT(*)=0 THEN 1 ELSE 0 END FROM Customers WHERE Email IS NULL', '2023-01-01', '2024-01-01', 'INACTIVE', 1, 'admin_user', 'Ensure customer emails are not null', 'SELECT', 'Initial setup', 'BG1', 'APPROVAL_IN_PROGRESS', 0, 0, NULL, 'NONE', 'DRAFT', NULL),
  -- A Data Quality rule with a parent rule (child of Rule 1) under BG1
  (1, 1, 1, 'Validate Customer Email Format', 'SELECT CASE WHEN COUNT(*)=0 THEN 1 ELSE 0 END FROM Customers WHERE Email NOT LIKE ''%@%.%''', '2023-01-01', '2024-01-01', 'INACTIVE', 1, 'admin_user', 'Validate email format', 'SELECT', 'Initial setup', 'BG1', 'APPROVAL_IN_PROGRESS', 0, 0, NULL, 'NONE', 'DRAFT', NULL),
  -- A Global Rule under BG2
  (2, NULL, 3, 'Check Order Amounts', 'SELECT CASE WHEN MIN(OrderAmount)>=0 THEN 1 ELSE 0 END FROM Orders', '2023-01-01', '2024-01-01', 'ACTIVE', 2, 'john_doe', 'Ensure no negative order amounts', 'SELECT', 'Financial check', 'BG2', 'APPROVED', 1, 0, NULL, 'NONE', 'ACTIVE', NULL),
  -- A Critical Rule under FINAL
  (3, NULL, 4, 'Validate Transaction Volume', 'SELECT CASE WHEN SUM(TransactionCount)>100 THEN 1 ELSE 0 END FROM Transactions', '2023-01-01', '2024-01-01', 'INACTIVE', 1, 'jane_smith', 'Critical check on volume', 'SELECT', 'Volume threshold check', 'FINAL', 'APPROVAL_IN_PROGRESS', 0, 1, 'GLOBAL', 'NONE', 'DRAFT', NULL);
GO

/* 6. BRM_RULE_APPROVALS */
INSERT INTO dbo.BRM_RULE_APPROVALS
  (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
  (1, 'BG1', 'john_doe', 0, 1),
  (1, 'Admin', 'admin_user', 0, 2),
  (3, 'BG2', 'jane_smith', 0, 1),
  (4, 'FINAL', 'jane_smith', 0, 1);
GO

/* 7. BRM_RULE_LOCKS */
INSERT INTO dbo.BRM_RULE_LOCKS
  (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES
  (1, 'john_doe', GETDATE(), DATEADD(MINUTE, 30, GETDATE()), 0, 1);
GO

/* 8. DATA_VALIDATIONS */
INSERT INTO dbo.DATA_VALIDATIONS
  (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES
  ('Customers', 'Email', 'NOT NULL', NULL),
  ('Orders', 'OrderAmount', 'RANGE', 'min=0;max=10000');
GO

/* 9. DATA_VALIDATION_LOGS */
INSERT INTO dbo.DATA_VALIDATION_LOGS
  (VALIDATION_ID, RESULT_FLAG, DETAILS)
VALUES
  (1, 'PASS', 'All customer emails are non-null'),
  (2, 'FAIL', 'Found 5 orders with amount outside the range');
GO

/* 10. BRM_RULE_TABLE_DEPENDENCIES */
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES
  (RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES
  (1, 'SalesDB', 'Customers', 'Email', 'READ'),
  (3, 'SalesDB', 'Orders', 'OrderAmount', 'READ');
GO

/* 11. BRM_RULE_LINEAGE */
INSERT INTO dbo.BRM_RULE_LINEAGE
  (RULE_ID, PARENT_RULE_ID)
VALUES
  (2, 1);  -- Rule 2 is a child of Rule 1
GO

/* 12. BRM_GLOBAL_CRITICAL_LINKS */
INSERT INTO dbo.BRM_GLOBAL_CRITICAL_LINKS
  (GCR_RULE_ID, TARGET_RULE_ID)
VALUES
  (4, 1);  -- Critical Rule (4) linked to Rule 1 as an example
GO

/* 13. RULE_CONFLICTS */
INSERT INTO dbo.RULE_CONFLICTS
  (RULE_ID1, RULE_ID2, PRIORITY)
VALUES
  (1, 3, 1);
GO

/* 14. COMPOSITE_RULES */
INSERT INTO dbo.COMPOSITE_RULES
  (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES
  ('Composite Rule 1', 'Rule1 AND Rule3', 'SendEmail');
GO

/* 15. BRM_CUSTOM_RULE_GROUPS */
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS
  (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
VALUES
  ('Custom Group Alpha', 'BG1', 'john_doe'),
  ('Custom Group Beta', 'BG2', 'jane_smith');
GO

/* 16. BRM_CUSTOM_GROUP_MEMBERS */
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS
  (CUSTOM_GROUP_ID, RULE_ID)
VALUES
  (1, 1),
  (1, 2),
  (2, 3);
GO

/* 17. RULE_SCHEDULES */
INSERT INTO dbo.RULE_SCHEDULES
  (RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS)
VALUES
  (1, DATEADD(HOUR, 2, GETDATE()), 'Scheduled', 1),
  (3, DATEADD(DAY, 1, GETDATE()), 'Scheduled', 0);
GO

/* 18. BRM_DEFECT_LOGS */
INSERT INTO dbo.BRM_DEFECT_LOGS
  (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS)
VALUES
  (1, 'Email validation failed for some customers', 'High', 'john_doe', 'Open'),
  (3, 'Order amount anomaly detected', 'Medium', 'jane_smith', 'Open');
GO

/* 19. COLLABORATION_LOGS */
INSERT INTO dbo.COLLABORATION_LOGS
  (MESSAGE, SENDER)
VALUES
  ('Initial setup of rule validations complete.', 'admin_user'),
  ('Reviewed rule changes for Rule 1.', 'john_doe');
GO

/* 20. BRM_RULE_PERF_STATS */
INSERT INTO dbo.BRM_RULE_PERF_STATS
  (RULE_ID, DATE_KEY, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT, ACTION_TIMESTAMP)
VALUES
  (1, CONVERT(CHAR(8), GETDATE(), 112), 1500, 30000, 10, GETDATE()),
  (3, CONVERT(CHAR(8), DATEADD(DAY, -1, GETDATE()), 112), 2500, 60000, 5, DATEADD(DAY, -1, GETDATE()));
GO

/* 21. DECISION_TABLES */
INSERT INTO dbo.DECISION_TABLES
  (TABLE_NAME, DESCRIPTION, DECISION_QUERY)
VALUES
  ('DecisionTable1', 'Decision table for Rule 3', 'SELECT 1 AS PASS_RESULT');
GO

/* 22. DECISION_TABLE_EXEC_LOGS */
INSERT INTO dbo.DECISION_TABLE_EXEC_LOGS
  (DECISION_TABLE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT)
VALUES
  (1, 1, 'Decision table executed successfully.', 0);
GO

/* 23. RULE_SNAPSHOTS */
INSERT INTO dbo.RULE_SNAPSHOTS
  (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON)
VALUES
  ('Snapshot 1', 'admin_user', '{"rules": [{"RULE_ID": 1, "RULE_NAME": "Check Customer Email Not Null"}]}');
GO

/* 24. RULE_TAGS */
INSERT INTO dbo.RULE_TAGS
  (RULE_ID, TAG_NAME)
VALUES
  (1, 'Critical'),
  (3, 'Finance');
GO

/* 25. HELP_CONTENT */
INSERT INTO dbo.HELP_CONTENT
  (CATEGORY, TITLE, CONTENT)
VALUES
  ('FAQ', 'How do I add a rule?', 'To add a rule, click the Add Rule button in the Business Rules tab.'),
  ('Guide', 'User Manual', 'Step‑by‑step instructions to use the BRM Tool.');
GO

/* 26. BRM_CUSTOM_GROUP_BACKUPS */
INSERT INTO dbo.BRM_CUSTOM_GROUP_BACKUPS
  (CUSTOM_GROUP_ID, BACKUP_VERSION, BACKUP_JSON)
VALUES
  (1, 1, '{"group_name": "Custom Group Alpha", "members": [1,2]}');
GO

/* 27. BRM_COLUMN_MAPPING */
INSERT INTO dbo.BRM_COLUMN_MAPPING
  (RULE_ID, SOURCE_COLUMN, TARGET_COLUMN)
VALUES
  (1, 'Email', 'CustomerEmail');
GO

/* 28. GROUP_PERMISSIONS */
INSERT INTO dbo.GROUP_PERMISSIONS
  (GROUP_NAME, TARGET_TABLE)
VALUES
  ('Admin', 'USERS'),
  ('BG1', 'BRM_RULES'),
  ('BG2', 'BRM_RULES'),
  ('FINAL', 'BRM_RULES');
GO

/*****************************************************
-- End of Revised Sample Data Inserts
*****************************************************/

/*****************************************************
  -- DROP EXISTING TABLES (if they exist)
*****************************************************/
IF OBJECT_ID('dbo.Customers', 'U') IS NOT NULL DROP TABLE dbo.Customers;
IF OBJECT_ID('dbo.Orders', 'U') IS NOT NULL DROP TABLE dbo.Orders;

/*****************************************************
  -- CREATE TABLE: Customers
*****************************************************/
CREATE TABLE dbo.Customers (
    CustomerID INT IDENTITY(1,1) PRIMARY KEY,
    FirstName NVARCHAR(100) NOT NULL,
    LastName NVARCHAR(100) NOT NULL,
    Email NVARCHAR(255) NOT NULL,  -- Must be not null
    CreatedDate DATETIME DEFAULT GETDATE()
);
GO

/*****************************************************
  -- INSERT SAMPLE DATA INTO Customers
  -- Three valid email rows and one invalid email row for testing
*****************************************************/
INSERT INTO dbo.Customers (FirstName, LastName, Email)
VALUES 
  ('Alice', 'Johnson', 'alice@example.com'),
  ('Bob', 'Smith', 'bob@example.com'),
  ('Charlie', 'Brown', 'charlie@example.com'),
  ('David', 'Lee', 'davidexample.com');  -- Invalid: missing "@" and "."
GO

/*****************************************************
  -- CREATE TABLE: Orders
*****************************************************/
CREATE TABLE dbo.Orders (
    OrderID INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID INT NOT NULL,  -- Foreign key reference (optional)
    OrderAmount DECIMAL(10,2) NOT NULL,  -- Must be non-negative for rule to pass
    OrderDate DATETIME DEFAULT GETDATE()
);
GO

/*****************************************************
  -- INSERT SAMPLE DATA INTO Orders
  -- Two orders with valid positive amounts and one with a negative amount for testing
*****************************************************/
INSERT INTO dbo.Orders (CustomerID, OrderAmount)
VALUES 
  (1, 100.00),   -- Valid order amount
  (2, 250.50),   -- Valid order amount
  (3, -50.00);   -- Invalid: negative amount
GO


/*****************************************************
  -- DROP EXISTING TABLE IF EXISTS
*****************************************************/
IF OBJECT_ID('dbo.RULE_PERF_STATS', 'U') IS NOT NULL
    DROP TABLE dbo.RULE_PERF_STATS;
GO

/*****************************************************
  -- CREATE TABLE: RULE_PERF_STATS
  -- This table records performance metrics for rules.
  -- DATE_KEY: the date the metric was recorded.
  -- RULE_ID: identifier of the rule.
  -- EXEC_TIME_MS: execution time in milliseconds.
  -- MEM_USAGE: memory usage in kilobytes.
  -- USAGE_COUNT: how many times the rule executed that day.
*****************************************************/
CREATE TABLE dbo.RULE_PERF_STATS (
    STAT_ID INT IDENTITY(1,1) PRIMARY KEY,
    DATE_KEY DATE NOT NULL,
    RULE_ID INT NOT NULL,
    EXEC_TIME_MS DECIMAL(10,2) NOT NULL,
    MEM_USAGE INT NOT NULL,
    USAGE_COUNT INT NOT NULL
);
GO

/*****************************************************
  -- INSERT SAMPLE DATA INTO RULE_PERF_STATS
  -- For simplicity, sample data is generated for three sample rules (e.g., RULE_ID 1, 2, and 3)
  -- over several days within the last 30 days.
  -- You can adjust the values to simulate various performance scenarios.
*****************************************************/

/* Sample inserts for Rule 1 */
INSERT INTO dbo.RULE_PERF_STATS (DATE_KEY, RULE_ID, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT)
VALUES 
  (DATEADD(DAY, -29, GETDATE()), 1, 1500.00, 30000, 10),
  (DATEADD(DAY, -25, GETDATE()), 1, 1600.00, 32000, 12),
  (DATEADD(DAY, -20, GETDATE()), 1, 1400.00, 31000, 9),
  (DATEADD(DAY, -15, GETDATE()), 1, 1550.00, 30500, 11),
  (DATEADD(DAY, -10, GETDATE()), 1, 1520.00, 31500, 13),
  (DATEADD(DAY, -5, GETDATE()),  1, 1480.00, 30000, 14),
  (GETDATE(),                1, 1500.00, 31000, 10);
  
/* Sample inserts for Rule 2 */
INSERT INTO dbo.RULE_PERF_STATS (DATE_KEY, RULE_ID, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT)
VALUES 
  (DATEADD(DAY, -28, GETDATE()), 2, 2200.00, 55000, 8),
  (DATEADD(DAY, -22, GETDATE()), 2, 2100.00, 54000, 7),
  (DATEADD(DAY, -18, GETDATE()), 2, 2300.00, 56000, 9),
  (DATEADD(DAY, -12, GETDATE()), 2, 2250.00, 55500, 10),
  (DATEADD(DAY, -3, GETDATE()),  2, 2150.00, 54500, 8);
  
/* Sample inserts for Rule 3 */
INSERT INTO dbo.RULE_PERF_STATS (DATE_KEY, RULE_ID, EXEC_TIME_MS, MEM_USAGE, USAGE_COUNT)
VALUES 
  (DATEADD(DAY, -30, GETDATE()), 3, 1800.00, 40000, 5),
  (DATEADD(DAY, -20, GETDATE()), 3, 1750.00, 39500, 6),
  (DATEADD(DAY, -10, GETDATE()), 3, 1850.00, 40500, 7),
  (GETDATE(),                3, 1800.00, 40000, 6);
GO

-- Drop the table if it already exists
IF OBJECT_ID('dbo.GROUP_PERMISSIONS', 'U') IS NOT NULL
    DROP TABLE dbo.GROUP_PERMISSIONS;
GO

-- Create the GROUP_PERMISSIONS table
CREATE TABLE dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME VARCHAR(100) NOT NULL,
    TARGET_TABLE VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT GETDATE()
);
GO
