#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: brm_performance_alerting_and_trends.py

Description:
  Provides a robust Performance Alerting and Historical Trends UI
  for the BRM Tool. This includes:

  1) Storing or reading performance data from RULE_EXECUTION_LOGS or RULE_PERF_STATS.
  2) A tab (PerformanceAlertingTab) that:
     • Lets the user pick a rule or "All Rules".
     • Displays a time-series chart (line) of average execution times over days/weeks.
     • Highlights or logs alerts if average time is above X for Y consecutive days.
  3) Allows customizing thresholds (like 2000 ms average => alert).
  4) Possibly triggers real-time notifications or color-coded warnings.

Integration:
  - BFS or scheduling logic logs execution_time_ms into RULE_EXECUTION_LOGS or RULE_PERF_STATS.
  - This module queries that data to produce daily averages or rolling windows.
  - Alerts can appear in the UI or stored in a table, e.g. RULE_ALERTS.
"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, math, logging
from datetime import datetime, timedelta
import pyqtgraph as pg
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QComboBox,
    QPushButton, QLineEdit, QMessageBox
)
from PyQt5.QtCore import Qt, QTimer

class PerformanceAlertingTab(QWidget):
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.init_ui()
        self.populate_rule_list()

    def init_ui(self):
        layout = QVBoxLayout(self)
        top_layout = QHBoxLayout()
        self.rule_combo = QComboBox()
        top_layout.addWidget(QLabel("Select Rule:"))
        top_layout.addWidget(self.rule_combo)
        self.threshold_edit = QLineEdit()
        self.threshold_edit.setPlaceholderText("Enter threshold ms (e.g., 2000)")
        top_layout.addWidget(QLabel("Alert Threshold:"))
        top_layout.addWidget(self.threshold_edit)
        apply_btn = QPushButton("Apply")
        apply_btn.clicked.connect(self.load_data)
        top_layout.addWidget(apply_btn)
        top_layout.addStretch()
        layout.addLayout(top_layout)
        self.chart = pg.PlotWidget(title="Performance Trend")
        self.chart.setBackground('w')
        layout.addWidget(self.chart)
        self.alerts_label = QLabel("")
        self.alerts_label.setStyleSheet("color:red; font-weight:bold;")
        layout.addWidget(self.alerts_label)
        self.setLayout(layout)

    def populate_rule_list(self):
        self.rule_combo.clear()
        self.rule_combo.addItem("All Rules", None)
        try:
            c = self.connection.cursor()
            c.execute("SELECT RULE_ID, RULE_NAME FROM BRM_RULES ORDER BY RULE_ID")
            for rid, rn in c.fetchall():
                self.rule_combo.addItem(f"{rid} - {rn}", rid)
        except Exception as ex:
            QMessageBox.critical(self, "Error", f"Error loading rules: {ex}")

    def load_data(self):
        sel_rid = self.rule_combo.currentData()
        try:
            threshold_ms = float(self.threshold_edit.text().strip())
        except:
            threshold_ms = 2000.0
        c = self.connection.cursor()
        if sel_rid:
            c.execute("""
                SELECT CONVERT(varchar(10), EXECUTION_TIMESTAMP, 120) as d, AVG(EXECUTION_TIME_MS) as avg_ms
                FROM RULE_EXECUTION_LOGS
                WHERE RULE_ID=? AND EXECUTION_TIMESTAMP >= DATEADD(day, -30, GETDATE())
                GROUP BY CONVERT(varchar(10), EXECUTION_TIMESTAMP, 120)
                ORDER BY d
            """, (sel_rid,))
        else:
            c.execute("""
                SELECT CONVERT(varchar(10), EXECUTION_TIMESTAMP, 120) as d, AVG(EXECUTION_TIME_MS) as avg_ms
                FROM RULE_EXECUTION_LOGS
                WHERE EXECUTION_TIMESTAMP >= DATEADD(day, -30, GETDATE())
                GROUP BY CONVERT(varchar(10), EXECUTION_TIMESTAMP, 120)
                ORDER BY d
            """)
        rows = c.fetchall()
        if not rows:
            QMessageBox.information(self, "No Data", "No execution data found in the last 30 days.")
            self.chart.clear()
            self.alerts_label.setText("")
            return
        dates = [r[0] for r in rows]
        avg_times = [float(r[1] or 0) for r in rows]
        xvals = list(range(len(dates)))
        self.chart.clear()
        self.chart.setLabel("left", "Avg Execution Time (ms)")
        self.chart.plot(xvals, avg_times, pen='b', symbol='o', symbolBrush='r')
        self.chart.setLabel("bottom", "Day Index")
        ticks = [(i, str(dates[i])) for i in range(len(dates))]
        self.chart.getAxis("bottom").setTicks([ticks])
        self.chart.showGrid(x=True, y=True)
        consecutive = 0
        max_consecutive = 0
        for t in avg_times:
            if t > threshold_ms:
                consecutive += 1
                max_consecutive = max(max_consecutive, consecutive)
            else:
                consecutive = 0
        if max_consecutive > 1:
            self.alerts_label.setText(f"ALERT: {max_consecutive} consecutive day(s) above {threshold_ms} ms!")
        else:
            self.alerts_label.setText("")
