USE YourDatabaseName;
GO

/*****************************************************************************
 STEP 1: (OPTIONAL) If you want a clean slate, uncomment the DROPs below.
         Otherwise, skip if you already created these objects.
*****************************************************************************/
/*
IF OBJECT_ID('dbo.COLLABORATION_LOGS', 'U') IS NOT NULL DROP TABLE dbo.COLLABORATION_LOGS;
IF OBJECT_ID('dbo.HELP_CONTENT', 'U') IS NOT NULL DROP TABLE dbo.HELP_CONTENT;
IF OBJECT_ID('dbo.BRM_DEFECT_LOGS', 'U') IS NOT NULL DROP TABLE dbo.BRM_DEFECT_LOGS;
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS', 'U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS', 'U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
IF OBJECT_ID('dbo.COMPOSITE_RULES', 'U') IS NOT NULL DROP TABLE dbo.COMPOSITE_RULES;
IF OBJECT_ID('dbo.RULE_CONFLICTS', 'U') IS NOT NULL DROP TABLE dbo.RULE_CONFLICTS;
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS', 'U') IS NOT NULL DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
IF OBJECT_ID('dbo.RULE_SNAPSHOTS', 'U') IS NOT NULL DROP TABLE dbo.RULE_SNAPSHOTS;
IF OBJECT_ID('dbo.RULE_TAGS', 'U') IS NOT NULL DROP TABLE dbo.RULE_TAGS;
IF OBJECT_ID('dbo.DATA_VALIDATION_LOGS', 'U') IS NOT NULL DROP TABLE dbo.DATA_VALIDATION_LOGS;
IF OBJECT_ID('dbo.DATA_VALIDATIONS', 'U') IS NOT NULL DROP TABLE dbo.DATA_VALIDATIONS;
IF OBJECT_ID('dbo.RULE_PERF_STATS', 'U') IS NOT NULL DROP TABLE dbo.RULE_PERF_STATS;
IF OBJECT_ID('dbo.RULE_EXECUTION_LOGS', 'U') IS NOT NULL DROP TABLE dbo.RULE_EXECUTION_LOGS;
IF OBJECT_ID('dbo.RULE_SCHEDULES', 'U') IS NOT NULL DROP TABLE dbo.RULE_SCHEDULES;
IF OBJECT_ID('dbo.BRM_RULE_LINEAGE', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_LINEAGE;
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
IF OBJECT_ID('dbo.BRM_RULE_LOCKS', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_LOCKS;
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_APPROVALS;
IF OBJECT_ID('dbo.BRM_RULES', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULES;
IF OBJECT_ID('dbo.BRM_RULE_TYPES', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_TYPES;
IF OBJECT_ID('dbo.BRM_RULE_GROUPS', 'U') IS NOT NULL DROP TABLE dbo.BRM_RULE_GROUPS;
IF OBJECT_ID('dbo.GROUP_PERMISSIONS', 'U') IS NOT NULL DROP TABLE dbo.GROUP_PERMISSIONS;
IF OBJECT_ID('dbo.BUSINESS_GROUPS', 'U') IS NOT NULL DROP TABLE dbo.BUSINESS_GROUPS;
IF OBJECT_ID('dbo.USERS', 'U') IS NOT NULL DROP TABLE dbo.USERS;
IF OBJECT_ID('dbo.DECISION_TABLES', 'U') IS NOT NULL DROP TABLE dbo.DECISION_TABLES;
IF OBJECT_ID('dbo.BRM_AUDIT_LOG', 'U') IS NOT NULL DROP TABLE dbo.BRM_AUDIT_LOG;
*/

/******************************************************************************
 STEP 2: Recreate all base tables (DDL). 
         You stated you already have them, but here they are for completeness.
******************************************************************************/
-- USERS
CREATE TABLE IF NOT EXISTS dbo.USERS (
    USER_ID     INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME    VARCHAR(100) NOT NULL,
    [PASSWORD]  VARCHAR(256) NOT NULL,
    USER_GROUP  VARCHAR(50)  NOT NULL
);

-- BUSINESS_GROUPS
CREATE TABLE IF NOT EXISTS dbo.BUSINESS_GROUPS (
    BUSINESS_GROUP_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME        VARCHAR(100) NOT NULL UNIQUE,
    DESCRIPTION       VARCHAR(500),
    EMAIL             VARCHAR(200)
);

-- GROUP_PERMISSIONS
CREATE TABLE IF NOT EXISTS dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME    VARCHAR(100) NOT NULL,
    TARGET_TABLE  VARCHAR(200) NOT NULL
);

-- BRM_RULE_GROUPS
CREATE TABLE IF NOT EXISTS dbo.BRM_RULE_GROUPS (
    GROUP_ID    INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_NAME  VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(500)
);

-- BRM_RULE_TYPES
CREATE TABLE IF NOT EXISTS dbo.BRM_RULE_TYPES (
    RULE_TYPE_ID   INT IDENTITY(1,1) PRIMARY KEY,
    RULE_TYPE_NAME VARCHAR(100) NOT NULL
);

-- BRM_RULES
CREATE TABLE IF NOT EXISTS dbo.BRM_RULES (
    RULE_ID                 INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID                INT NULL,
    PARENT_RULE_ID          INT NULL,
    RULE_TYPE_ID            INT NULL,
    RULE_NAME               VARCHAR(200) NOT NULL,
    RULE_SQL                VARCHAR(MAX) NULL,
    EFFECTIVE_START_DATE    DATETIME NULL,
    EFFECTIVE_END_DATE      DATETIME NULL,
    STATUS                  VARCHAR(50)  NOT NULL DEFAULT('INACTIVE'),
    VERSION                 INT           NOT NULL DEFAULT(1),
    CREATED_BY              VARCHAR(100) NULL,
    UPDATED_BY              VARCHAR(100) NULL,
    DESCRIPTION             VARCHAR(MAX) NULL,
    OPERATION_TYPE          VARCHAR(50)  NULL,
    BUSINESS_JUSTIFICATION  VARCHAR(MAX) NULL,
    CREATED_TIMESTAMP       DATETIME     NOT NULL DEFAULT(GETDATE()),
    OWNER_GROUP             VARCHAR(100) NULL,
    CLUSTER_NAME            VARCHAR(100) NULL,
    APPROVAL_STATUS         VARCHAR(50)  NULL,
    IS_GLOBAL               BIT          NOT NULL DEFAULT(0),
    CRITICAL_RULE           BIT          NOT NULL DEFAULT(0),
    CRITICAL_SCOPE          VARCHAR(50)  NULL,
    CDC_TYPE                VARCHAR(50)  NULL,
    LIFECYCLE_STATE         VARCHAR(50)  NULL,
    DECISION_TABLE_ID       INT          NULL,
    ENCRYPTED_FLAG          BIT          NOT NULL DEFAULT(0)
);

-- BRM_RULE_LOCKS
CREATE TABLE IF NOT EXISTS dbo.BRM_RULE_LOCKS (
    LOCK_ID         INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID         INT NOT NULL,
    LOCKED_BY       VARCHAR(100) NOT NULL,
    LOCK_TIMESTAMP  DATETIME NOT NULL DEFAULT(GETDATE()),
    EXPIRY_TIMESTAMP DATETIME NOT NULL,
    FORCE_LOCK      BIT NOT NULL DEFAULT(0),
    ACTIVE_LOCK     BIT NOT NULL DEFAULT(1)
);

-- RULE_CONFLICTS
CREATE TABLE IF NOT EXISTS dbo.RULE_CONFLICTS (
    CONFLICT_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID1    INT NOT NULL,
    RULE_ID2    INT NOT NULL,
    PRIORITY    INT NOT NULL DEFAULT(1)
);

-- BRM_GLOBAL_CRITICAL_LINKS
CREATE TABLE IF NOT EXISTS dbo.BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID        INT IDENTITY(1,1) PRIMARY KEY,
    GCR_RULE_ID    INT NOT NULL,
    TARGET_RULE_ID INT NOT NULL
);

-- COMPOSITE_RULES
CREATE TABLE IF NOT EXISTS dbo.COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CRULE_NAME        VARCHAR(200) NOT NULL,
    LOGIC_EXPR        VARCHAR(MAX) NULL,
    ACTION_ON_PASS    VARCHAR(200) NULL
);

-- DECISION_TABLES
CREATE TABLE IF NOT EXISTS dbo.DECISION_TABLES (
    DECISION_TABLE_ID INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME        VARCHAR(200) NULL,
    DESCRIPTION       VARCHAR(500) NULL,
    DECISION_QUERY    VARCHAR(MAX) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);

-- RULE_SNAPSHOTS
CREATE TABLE IF NOT EXISTS dbo.RULE_SNAPSHOTS (
    SNAPSHOT_ID      INT IDENTITY(1,1) PRIMARY KEY,
    SNAPSHOT_NAME    VARCHAR(200) NOT NULL,
    CREATED_BY       VARCHAR(100) NOT NULL,
    SNAPSHOT_JSON    VARCHAR(MAX) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);

-- RULE_TAGS
CREATE TABLE IF NOT EXISTS dbo.RULE_TAGS (
    TAG_ID   INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID  INT NOT NULL,
    TAG_NAME VARCHAR(100) NOT NULL
);

-- DATA_VALIDATIONS
CREATE TABLE IF NOT EXISTS dbo.DATA_VALIDATIONS (
    VALIDATION_ID    INT IDENTITY(1,1) PRIMARY KEY,
    TABLE_NAME       VARCHAR(200) NOT NULL,
    COLUMN_NAME      VARCHAR(200) NOT NULL,
    VALIDATION_TYPE  VARCHAR(50)  NOT NULL,
    PARAMS           VARCHAR(500) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);

-- DATA_VALIDATION_LOGS
CREATE TABLE IF NOT EXISTS dbo.DATA_VALIDATION_LOGS (
    LOG_ID               INT IDENTITY(1,1) PRIMARY KEY,
    VALIDATION_ID        INT NOT NULL,
    RESULT_FLAG          VARCHAR(10) NOT NULL,
    DETAILS              VARCHAR(MAX)  NULL,
    VALIDATION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);

-- RULE_SCHEDULES
CREATE TABLE IF NOT EXISTS dbo.RULE_SCHEDULES (
    SCHEDULE_ID          INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID              INT NOT NULL,
    SCHEDULE_TIME        DATETIME NOT NULL,
    STATUS               VARCHAR(50) NOT NULL DEFAULT('Scheduled'),
    RUN_DATA_VALIDATIONS BIT NOT NULL DEFAULT(0)
);

-- RULE_EXECUTION_LOGS
CREATE TABLE IF NOT EXISTS dbo.RULE_EXECUTION_LOGS (
    EXEC_LOG_ID       INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID           INT NOT NULL,
    EXECUTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    PASS_FLAG         BIT NOT NULL DEFAULT(0),
    MESSAGE           VARCHAR(MAX) NULL,
    RECORD_COUNT      INT NOT NULL DEFAULT(0),
    EXECUTION_TIME_MS INT NOT NULL DEFAULT(0),
    CPU_USAGE         INT NOT NULL DEFAULT(0),
    MEM_USAGE         INT NOT NULL DEFAULT(0)
);

-- RULE_PERF_STATS
CREATE TABLE IF NOT EXISTS dbo.RULE_PERF_STATS (
    STATS_ID         INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID          INT NOT NULL,
    EXEC_TIME_MS     FLOAT NULL,
    MEM_USAGE        FLOAT NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);

-- BRM_RULE_LINEAGE
CREATE TABLE IF NOT EXISTS dbo.BRM_RULE_LINEAGE (
    ID        INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID   INT NOT NULL,
    PARENT_ID INT NULL
);

-- BRM_RULE_TABLE_DEPENDENCIES
CREATE TABLE IF NOT EXISTS dbo.BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID       INT NOT NULL,
    DATABASE_NAME VARCHAR(100) NULL,
    TABLE_NAME    VARCHAR(200) NULL,
    COLUMN_NAME   VARCHAR(200) NULL,
    COLUMN_OP     VARCHAR(10) NULL
);

-- BRM_DEFECT_LOGS
CREATE TABLE IF NOT EXISTS dbo.BRM_DEFECT_LOGS (
    DEFECT_ID   INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID     INT NOT NULL,
    DESCRIPTION VARCHAR(MAX) NOT NULL,
    SEVERITY    VARCHAR(50) NOT NULL,
    REPORTER    VARCHAR(100) NOT NULL,
    [STATUS]    VARCHAR(50)  NOT NULL DEFAULT('Open'),
    [TIMESTAMP] DATETIME NOT NULL DEFAULT(GETDATE())
);

-- BRM_RULE_APPROVALS
CREATE TABLE IF NOT EXISTS dbo.BRM_RULE_APPROVALS (
    APPROVAL_ID       INT IDENTITY(1,1) PRIMARY KEY,
    RULE_ID           INT NOT NULL,
    GROUP_NAME        VARCHAR(100) NULL,
    USERNAME          VARCHAR(100) NOT NULL,
    APPROVED_FLAG     INT NOT NULL DEFAULT(0),  -- 0=Pending,1=Approved,2=Rejected
    APPROVAL_STAGE    INT NOT NULL,
    APPROVED_TIMESTAMP DATETIME NULL,
    CONSTRAINT UQ_RuleUserStage UNIQUE(RULE_ID, USERNAME, APPROVAL_STAGE)
);

-- BRM_AUDIT_LOG
CREATE TABLE IF NOT EXISTS dbo.BRM_AUDIT_LOG (
    AUDIT_ID         INT IDENTITY(1,1) PRIMARY KEY,
    ACTION           VARCHAR(50) NOT NULL,
    TABLE_NAME       VARCHAR(100) NOT NULL,
    RECORD_ID        VARCHAR(50)  NULL,
    ACTION_BY        VARCHAR(100) NOT NULL,
    OLD_DATA         VARCHAR(MAX) NULL,
    NEW_DATA         VARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE())
);

-- COLLABORATION_LOGS
CREATE TABLE IF NOT EXISTS dbo.COLLABORATION_LOGS (
    COLLAB_ID INT IDENTITY(1,1) PRIMARY KEY,
    [MESSAGE] VARCHAR(MAX) NOT NULL,
    SENDER    VARCHAR(100) NOT NULL,
    [TIMESTAMP] DATETIME  NOT NULL DEFAULT(GETDATE())
);

-- BRM_CUSTOM_RULE_GROUPS
CREATE TABLE IF NOT EXISTS dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID        INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_NAME      VARCHAR(200) NOT NULL,
    OWNER_BUSINESS_GROUP   VARCHAR(100) NULL,
    CREATED_BY             VARCHAR(100) NOT NULL,
    CREATED_TIMESTAMP      DATETIME NOT NULL DEFAULT(GETDATE())
);

-- BRM_CUSTOM_GROUP_MEMBERS
CREATE TABLE IF NOT EXISTS dbo.BRM_CUSTOM_GROUP_MEMBERS (
    CGM_ID           INT IDENTITY(1,1) PRIMARY KEY,
    CUSTOM_GROUP_ID  INT NOT NULL,
    RULE_ID          INT NOT NULL
);

-- HELP_CONTENT
CREATE TABLE IF NOT EXISTS dbo.HELP_CONTENT (
    HELP_ID     INT IDENTITY(1,1) PRIMARY KEY,
    CATEGORY    VARCHAR(50) NOT NULL,
    TITLE       VARCHAR(200) NOT NULL,
    [CONTENT]   VARCHAR(MAX) NULL,
    LAST_UPDATED DATETIME NOT NULL DEFAULT(GETDATE())
);

GO

/*****************************************************************************
 STEP 3: Insert the original sample data
*****************************************************************************/
-- 1) USERS
INSERT INTO dbo.USERS (USERNAME, [PASSWORD], USER_GROUP) VALUES
('admin', 'admin123', 'Admin'),
('alice', 'alicepass', 'BG1'),
('bob',   'bobpass',   'BG2'),
('carol', 'carolpass', 'BG3'),
('david', 'davidpass', 'FinanceBG'),
('eve',   'evepass',   'SalesBG'),
('global_approver', 'globalpass', 'GlobalApprovers');

-- 2) BUSINESS_GROUPS
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL) VALUES
('BG1', 'First business group', 'bg1@example.com'),
('BG2', 'Second business group', 'bg2@example.com'),
('BG3', 'Third business group', 'bg3@example.com'),
('FinanceBG', 'Finance Business Group', 'finance@example.com'),
('SalesBG', 'Sales Business Group', 'sales@example.com'),
('GlobalApprovers', 'Global Approvers Group', 'global@example.com');

-- 3) GROUP_PERMISSIONS
INSERT INTO dbo.GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE) VALUES
('BG1', 'BRM_RULES'),
('BG1', 'DATA_VALIDATIONS'),
('BG2', 'BRM_RULES'),
('BG3', 'BRM_RULES'),
('FinanceBG', 'RULE_CONFLICTS'),
('GlobalApprovers', 'BRM_RULES'),
('GlobalApprovers', 'BRM_RULE_APPROVALS'),
('SalesBG', 'RULE_SCHEDULES');

-- 4) BRM_RULE_GROUPS
INSERT INTO dbo.BRM_RULE_GROUPS (GROUP_NAME, DESCRIPTION) VALUES
('Sales Rules', 'Rules for Sales domain'),
('Finance Rules', 'Rules for Finance domain'),
('Analytics Rules', 'Analytical or composite rules');

-- 5) BRM_RULE_TYPES
INSERT INTO dbo.BRM_RULE_TYPES (RULE_TYPE_NAME) VALUES
('SQL-based'),
('DECISION_TABLE'),
('MAPPING'),
('DATA_QUALITY'),
('GLOBAL_CRITICAL');

-- 6) BRM_RULES
--    #1
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE,
    CDC_TYPE, LIFECYCLE_STATE, DECISION_TABLE_ID, ENCRYPTED_FLAG
) VALUES (
    1, NULL, 1, 'Check Customer Data',
    'SELECT CASE WHEN COUNT(*)>0 THEN 1 ELSE 0 END FROM dbo.Customers WHERE [City] IS NULL',
    '2023-01-01', '2025-01-01',
    'INACTIVE',
    'admin',
    'Ensures customers have city field non-null',
    'SELECT',
    'Business justification for Customer City check',
    'BG1',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE',
    'FULL_LOAD',
    'DRAFT',
    NULL,
    0
);

--    #2
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE,
    CDC_TYPE, LIFECYCLE_STATE, DECISION_TABLE_ID
) VALUES (
    1, 1, 1, 'Order Check Rule',
    'SELECT CASE WHEN COUNT(*)>0 THEN 0 ELSE 1 END FROM dbo.Orders WHERE Amount < 0',
    '2023-01-01', '2025-01-01',
    'INACTIVE',
    'alice',
    'Checks for negative order amounts => if found, fail',
    'SELECT',
    'Business justification for negative orders check',
    'BG2',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE',
    'INCREMENTAL',
    'DRAFT',
    NULL
);

--    #3
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    STATUS,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE
) VALUES (
    2, 1, 1, 'Finance Double-check',
    'SELECT CASE WHEN SUM(Amount)>99999 THEN 0 ELSE 1 END FROM dbo.Orders WHERE [Status]= ''Open''',
    'INACTIVE',
    'bob',
    'Validate total open orders does not exceed 99999.',
    'SELECT',
    'Finance wants to block if open orders too large',
    'BG3',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE'
);

--    #4
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    STATUS,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, OWNER_GROUP,
    APPROVAL_STATUS
) VALUES (
    1, 2, 1, 'Sub-check for Orders BFS child',
    'SELECT 1  -- pretend logic that returns 1=pass always',
    'INACTIVE',
    'alice',
    'Child BFS rule depends on #2.',
    'SELECT',
    'BG2',
    'APPROVAL_IN_PROGRESS'
);

--    #5
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    STATUS,
    CREATED_BY, OWNER_GROUP, APPROVAL_STATUS,
    IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE
) VALUES (
    3, 5, 'GlobalCritical OverBudget',
    'SELECT CASE WHEN SUM(Amount)>500000 THEN 0 ELSE 1 END FROM dbo.Orders',
    'INACTIVE',
    'admin',
    'GlobalApprovers',
    'APPROVAL_IN_PROGRESS',
    1,
    1,
    'GLOBAL'
);

-- 7) BRM_RULE_APPROVALS
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE, APPROVED_TIMESTAMP)
VALUES
(1, 'BG1', 'alice', 1, 1, '2023-01-02'),
(1, 'BG2', 'bob',   0, 2, NULL),
(1, 'BG3', 'carol', 2, 3, '2023-02-01'),
(1, 'GlobalApprovers', 'global_approver', 0, 4, NULL);

-- For Rule #2
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(2, 'BG2', 'bob', 1, 1),
(2, 'GlobalApprovers', 'global_approver', 1, 2);

-- For Rule #3
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(3, 'BG3', 'carol', 0, 1),
(3, 'GlobalApprovers', 'global_approver', 0, 2);

-- For Rule #4
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(4, 'BG2', 'alice', 0, 1);

-- For Rule #5
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(5, 'GlobalApprovers', 'global_approver', 0, 1),
(5, 'BG1', 'alice', 0, 2);

-- 8) BRM_RULE_LOCKS
INSERT INTO dbo.BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES
(1, 'admin', DATEADD(HOUR, 1, GETDATE()), 0, 1),
(3, 'bob',   DATEADD(MINUTE, 30, GETDATE()), 1, 1);

-- 9) RULE_CONFLICTS
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES
(2, 3, 1),
(1, 3, 2);

-- 10) BRM_GLOBAL_CRITICAL_LINKS
INSERT INTO dbo.BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES
(5, 1);

-- 11) COMPOSITE_RULES
INSERT INTO dbo.COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES
('Composite_1', 'Rule1==PASS AND Rule3==PASS', 'SendEmail');

-- 12) DECISION_TABLES
INSERT INTO dbo.DECISION_TABLES (TABLE_NAME, DESCRIPTION, DECISION_QUERY)
VALUES
('DT_Sample', 'Simple example decision logic', 
 'SELECT CASE WHEN 1=1 THEN 1 ELSE 0 END');

-- 13) RULE_SNAPSHOTS
INSERT INTO dbo.RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON)
VALUES
('Initial Snapshot of All Rules', 'admin',
 N'[{"RULE_ID":1,"RULE_NAME":"Check Customer Data","STATUS":"INACTIVE"}, {"RULE_ID":2,"RULE_NAME":"Order Check Rule","STATUS":"INACTIVE"} ]'),
('Another Snapshot','alice',
 N'[{"RULE_ID":3,"RULE_NAME":"Finance Double-check","STATUS":"INACTIVE"}]');

-- 14) RULE_TAGS
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME) VALUES
(1, 'DataQuality'),
(2, 'OrdersCheck'),
(3, 'FinanceCheck'),
(5, 'GlobalCritical');

-- 15) DATA_VALIDATIONS
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES
('dbo.Customers', 'City', 'NOT NULL', NULL),
('dbo.Orders', 'Amount', 'RANGE', 'min=0;max=999999'),
('dbo.Orders', 'OrderID', 'UNIQUE', NULL),
('dbo.Customers', 'Email', 'REGEX', 'pattern=^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');

-- 16) DATA_VALIDATION_LOGS
INSERT INTO dbo.DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS)
VALUES
(1, 'PASS', 'All cities found non-null'),
(2, 'FAIL', '2 rows found negative or >999999'),
(3, 'PASS', 'All unique IDs'),
(4, 'FAIL', '1 row did not match email pattern');

-- 17) RULE_SCHEDULES
INSERT INTO dbo.RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS)
VALUES
(1, DATEADD(HOUR, 6, GETDATE()), 'Scheduled', 1),
(2, DATEADD(DAY, 1, GETDATE()), 'Scheduled', 0),
(3, DATEADD(HOUR, 2, GETDATE()), 'Cancelled', 0);

-- 18) RULE_EXECUTION_LOGS
INSERT INTO dbo.RULE_EXECUTION_LOGS 
(RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE)
VALUES
(1, 1, 'City check passed', 10, 100, 5, 2000),
(2, 0, 'Found negative orders => FAIL', 2, 300, 10, 3000),
(3, 1, 'All open orders < 99999 => pass', 5, 120, 8, 2500),
(2, 1, 'No negative orders on re-check => pass', 0, 200, 10, 3100);

-- 19) RULE_PERF_STATS
INSERT INTO dbo.RULE_PERF_STATS (RULE_ID, EXEC_TIME_MS, MEM_USAGE)
VALUES
(1, 150.0, 2500),
(1, 120.0, 2000),
(2, 300.0, 4500),
(3, 1100.0, 52000),
(5, 2100.0, 60000);

-- 20) BRM_RULE_LINEAGE
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_ID) VALUES
(1, NULL),
(2, 1),
(3, 1),
(4, 2),
(5, NULL);

-- 21) BRM_RULE_TABLE_DEPENDENCIES
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES 
(RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES
(1, 'YourDatabaseName', 'dbo.Customers', 'City', 'READ'),
(2, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'READ'),
(2, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'WRITE'),
(3, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'READ'),
(5, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'READ');

-- 22) BRM_DEFECT_LOGS
INSERT INTO dbo.BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, [STATUS])
VALUES
(2, 'Rule incorrectly flagged valid negative test orders', 'Medium', 'tester1', 'Open'),
(3, 'Finance check is too large of a threshold', 'High', 'carol', 'Open');

-- 24) BRM_AUDIT_LOG
INSERT INTO dbo.BRM_AUDIT_LOG 
(ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA)
VALUES
('INSERT', 'BRM_RULES', '1', 'admin', NULL, '{"RULE_ID":1,"RULE_NAME":"Check Customer Data"}'),
('APPROVE','BRM_RULE_APPROVALS','(Rule1,BG1,Stage1)','alice', NULL,'{"approved":true}'),
('REJECT','BRM_RULE_APPROVALS','(Rule1,BG3,Stage3)','carol', NULL,'{"rejected":true}');

-- 25) COLLABORATION_LOGS
INSERT INTO dbo.COLLABORATION_LOGS (MESSAGE, SENDER) VALUES
('Hello team, we need to check negative orders again', 'bob'),
('Sure, will do BFS dry-run soon', 'alice');

-- 26) BRM_CUSTOM_RULE_GROUPS
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
VALUES
('CustomGroup_SalesCheck', 'SalesBG', 'eve'),
('CustomGroup_FinanceCheck', 'FinanceBG', 'david');

-- 27) BRM_CUSTOM_GROUP_MEMBERS
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES
(1, 1),
(1, 2),
(2, 3),
(2, 5);

-- 28) HELP_CONTENT
INSERT INTO dbo.HELP_CONTENT (CATEGORY, TITLE, [CONTENT]) VALUES
('FAQ', 'How to Approve a Rule?', 'Go to the Approvals tab, select the rule, click Approve.'),
('GUIDE', 'Creating BFS Chain', 'Set PARENT_RULE_ID on a new rule to link to the parent.'),
('FAQ', 'What is a Composite Rule?', 'A rule referencing sub-rules with logical expressions.'),
('GUIDE', 'Lock & Unlock a Rule', 'Use LockManager in the UI or Admin can force unlock.');

GO

/*****************************************************************************
 STEP 4: ADDITIONAL TEST DATA
         (to demonstrate even more BFS, critical rules, performance logs, 
          data validations, concurrency, etc.)
*****************************************************************************/

-- 4A) ADD 3 MORE RULES (#6, #7, #8) + BFS: 
--     RULE #6 => child of #1, also CRITICAL
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME,
    RULE_SQL, STATUS, CREATED_BY, DESCRIPTION, OPERATION_TYPE,
    OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE
) VALUES (
    1,    -- 'Sales Rules'
    1,    -- Parent is RULE #1
    4,    -- RULE_TYPE_ID = 'DATA_QUALITY'
    'Check Geo Data Coverage',
    'SELECT CASE WHEN COUNT(*)>10 THEN 1 ELSE 0 END FROM dbo.Customers WHERE Country IS NULL',
    'INACTIVE',
    'alice',
    'Ensure customers have Country coverage > 10 records or pass fails (example).',
    'SELECT',
    'BG1',
    'APPROVAL_IN_PROGRESS',
    0,
    1,  -- CRITICAL_RULE
    'GROUP',
    '2023-02-01', '2026-01-01'
);

-- RULE #7 => top-level (no parent), DECISION_TABLE type referencing DECISION_TABLE_ID=1
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, RULE_TYPE_ID, RULE_NAME, DECISION_TABLE_ID,
    STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL,
    CRITICAL_RULE, CRITICAL_SCOPE
) VALUES (
    3,    -- 'Analytics Rules'
    2,    -- 'DECISION_TABLE'
    'DecisionTable Rule7 Demo',
    1,    -- references the existing DECISION_TABLES row
    'INACTIVE',
    'admin',
    'BG3',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE'
);

-- RULE #8 => child of #7, BFS = #7 -> #8
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME,
    RULE_SQL, STATUS, CREATED_BY, OWNER_GROUP, APPROVAL_STATUS,
    IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE
) VALUES (
    3,
    7,
    1,
    'ChildOfDecision Rule8 BFS',
    'SELECT CASE WHEN 1=1 THEN 1 ELSE 0 END',
    'INACTIVE',
    'carol',
    'BG3',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE'
);

-- 4B) APPROVALS for the new rules (#6, #7, #8).
--     Let's do multi-stage for #6 with rejections/pending combos
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(6, 'BG1', 'alice', 0, 1),          -- pending
(6, 'BG2', 'bob',   2, 2),          -- Rejected
(6, 'GlobalApprovers', 'global_approver', 0, 3);

-- For #7 => 2-stage
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(7, 'BG3', 'carol', 1, 1),                -- approved
(7, 'GlobalApprovers', 'global_approver', 0, 2); -- pending

-- For #8 => single-stage BG3
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(8, 'BG3', 'carol', 0, 1);

-- 4C) Add new BFS lineage for #6 (child of #1), #7 (top-level), #8 (child of #7)
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_ID) VALUES
(6, 1),
(7, NULL),
(8, 7);

-- 4D) Additional concurrency locks (lock #6 + #8)
INSERT INTO dbo.BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES
(6, 'alice', DATEADD(MINUTE, 120, GETDATE()), 0, 1),
(8, 'carol', DATEADD(HOUR, 2, GETDATE()), 1, 1);

-- 4E) Additional RULE_CONFLICTS
-- Let #6 conflict with #4 
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES (6, 4, 1);

-- 4F) Additional Composite referencing #6 and #2
INSERT INTO dbo.COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES
('Composite_2','Rule6==PASS AND Rule2==PASS','GenerateReport');

-- 4G) Additional RULE_TAGS for #6, #7, #8
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME) VALUES
(6, 'GeoCheck'),
(7, 'DecisionTable'),
(8, 'SubDecision');

-- 4H) Extra data validations to show new example: 
--     #5 => foreign key style check, #6 => new range, etc.
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES
('dbo.Orders', 'CustomerID', 'FOREIGN_KEY', 'ref_table=dbo.Customers;ref_col=CustomerID'),
('dbo.Customers','Country','NOT NULL',NULL),
('dbo.Orders','Amount','RANGE','min=0;max=9999999');

-- 4I) Insert additional validation logs
INSERT INTO dbo.DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS)
VALUES
(5, 'FAIL', 'Some Orders without matching Customers'),
(6, 'PASS', 'All countries present'),
(7, 'PASS', 'All amounts within 0..9999999');

-- 4J) Additional RULE_SCHEDULES
INSERT INTO dbo.RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS)
VALUES
(6, DATEADD(HOUR, 3, GETDATE()), 'Scheduled', 1),
(7, DATEADD(HOUR, 24, GETDATE()), 'Scheduled', 0),
(8, DATEADD(HOUR, 48, GETDATE()), 'Cancelled', 0);

-- 4K) Additional RULE_EXECUTION_LOGS (for #6, #7, #8)
INSERT INTO dbo.RULE_EXECUTION_LOGS 
(RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE)
VALUES
(6, 0, 'Country coverage <10 => fail', 8, 400, 15, 5000),
(7, 1, 'Decision table returned 1 => pass', 0, 350, 10, 2800),
(8, 1, 'ChildOfDecision => simple pass', 0, 90, 3, 1200);

-- 4L) Additional RULE_PERF_STATS
INSERT INTO dbo.RULE_PERF_STATS (RULE_ID, EXEC_TIME_MS, MEM_USAGE)
VALUES
(6, 500.0, 4500),
(6, 490.0, 4200),
(7, 300.0, 2500),
(8, 100.0, 1200);

-- 4M) Additional BRM_RULE_TABLE_DEPENDENCIES for #6..#8
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES 
(RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES
(6, 'YourDatabaseName', 'dbo.Customers', 'Country', 'READ'),
(7, 'YourDatabaseName', 'dbo.Customers', 'City', 'READ'),
(8, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'READ');

-- 4N) Additional defects (RULE #6, #7)
INSERT INTO dbo.BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, [STATUS])
VALUES
(6, 'Geo data coverage logic missing edge cases', 'Low', 'tester2', 'Open'),
(7, 'Decision table incorrectly returns 1 always', 'Critical', 'alice', 'Open');

-- 4O) More audit logs
INSERT INTO dbo.BRM_AUDIT_LOG 
(ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA)
VALUES
('INSERT','BRM_RULES','6','alice',NULL,'{"RULE_ID":6,"RULE_NAME":"Check Geo Data Coverage"}'),
('REJECT','BRM_RULE_APPROVALS','(Rule6,BG2,Stage2)','bob',NULL,'{"rejected":true}'),
('INSERT','BRM_RULES','7','admin',NULL,'{"RULE_ID":7,"RULE_NAME":"DecisionTable Rule7 Demo"}');

-- 4P) More collaboration logs
INSERT INTO dbo.COLLABORATION_LOGS ([MESSAGE], SENDER)
VALUES
('Rule #6 failed coverage, please investigate', 'alice'),
('Will lock rule #6 to fix. Then approve again', 'bob'),
('Yes, proceed with BFS test now', 'carol');

-- 4Q) Additional custom groups
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
VALUES
('CustomGroup_Analytics', 'BG3', 'carol'),
('CustomGroup_Global', 'GlobalApprovers', 'global_approver');

-- 4R) Add new custom group members
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES
(3, 7),  -- add rule #7 to 'CustomGroup_Analytics'
(3, 8),  -- add rule #8
(4, 5),  -- add rule #5 to 'CustomGroup_Global'
(4, 6);  -- add rule #6 as well

-- 4S) Additional help content
INSERT INTO dbo.HELP_CONTENT (CATEGORY, TITLE, [CONTENT])
VALUES
('GUIDE','Approvals with 4 stages','You can define multiple rows in BRM_RULE_APPROVALS, each with a different stage.'),
('FAQ','How to add composite references?','Use CompositeRulesTab or BFS chain plus logic.');


GO

/*****************************************************************************
 All done! Now you have a richer dataset:
   • More BFS chains (#1->#6, #7->#8, etc.)
   • Additional approvals with multiple stages, rejections, partial approvals
   • More data validations (FOREIGN_KEY, etc.)
   • More concurrency locks, conflicts
   • Additional audit logs, collaboration logs
   • Additional performance logs for bigger analysis
   • Extra custom rule groups and group members
Enjoy testing your BRM Tool with these expanded samples!
*****************************************************************************/


-------------------------------------------------------------------------------
-- EXAMPLE: Generate 30 days of random performance data for rules #1 through #8
-------------------------------------------------------------------------------
DECLARE @rule_id INT, @day_offset INT;

SET @day_offset = 30;  -- how many days back
WHILE @day_offset > 0
BEGIN
    -- We'll just do it for a small set of rules, from 1..8
    SET @rule_id = 1;
    WHILE @rule_id <= 8
    BEGIN
        -- Insert random EXEC_TIME_MS (100..2000) and MEM_USAGE (1500..70000)
        INSERT INTO dbo.RULE_PERF_STATS (
            RULE_ID,
            EXEC_TIME_MS,
            MEM_USAGE,
            ACTION_TIMESTAMP
        )
        VALUES (
            @rule_id,
            (100 + CAST(RAND(CHECKSUM(NEWID())) * 1900 AS INT)),   -- random 100..2000
            (1500 + CAST(RAND(CHECKSUM(NEWID())) * 68500 AS INT)), -- random 1500..70000
            DATEADD(DAY, -@day_offset, GETDATE())
        );

        SET @rule_id = @rule_id + 1;
    END;

    SET @day_offset = @day_offset - 1;
END;
GO

DECLARE @r INT = 1;
DECLARE @day INT = 20;
WHILE @day > 0
BEGIN
    SET @r = 1;
    WHILE @r <= 8
    BEGIN
        INSERT INTO dbo.RULE_EXECUTION_LOGS (
            RULE_ID,
            PASS_FLAG,
            MESSAGE,
            RECORD_COUNT,
            EXECUTION_TIME_MS,
            CPU_USAGE,
            MEM_USAGE,
            EXECUTION_TIMESTAMP
        )
        VALUES(
            @r,
            CASE WHEN RAND()*100 < 80 THEN 1 ELSE 0 END,  -- 80% pass, 20% fail
            'Automated test run day '+CAST(@day AS VARCHAR(10)),
            CAST(RAND()*50 AS INT),
            100 + CAST(RAND()*2000 AS INT),
            5 + CAST(RAND()*25 AS INT),
            2000 + CAST(RAND()*10000 AS INT),
            DATEADD(DAY, -@day, GETDATE())
        );

        SET @r = @r + 1;
    END;

    SET @day = @day - 1;
END;
GO
