Below is an example T-SQL script you can use to populate minimal test data for demoing end-to-end functionality. It creates sample users, groups, rules, validations, schedules, approvals, etc. The script assumes your schema is already created, including tables like BRM_RULES, BUSINESS_GROUPS, USERS, DATA_VALIDATIONS, etc. Feel free to adjust table or column names if your schema differs slightly.

Note: The snippet includes a small sample table DEMO_CUSTOMERS so that one of the rules can UPDATE data during BFS. If you already have a table to update, adjust accordingly.

⸻

1. Create (or confirm) the DEMO_CUSTOMERS table

-- Optional if you do not already have a table to update in BFS:
CREATE TABLE DEMO_CUSTOMERS (
    CustomerID   INT         NOT NULL PRIMARY KEY,
    CustomerName VARCHAR(100),
    Status       VARCHAR(50),
    CreatedOn    DATETIME
);

INSERT INTO DEMO_CUSTOMERS(CustomerID, CustomerName, Status, CreatedOn)
VALUES
 (1, 'Alice',   'Active',   GETDATE()),
 (2, 'Bob',     'Active',   GETDATE()),
 (3, 'Charlie', 'Inactive', GETDATE());



⸻

2. Basic Business Groups

INSERT INTO BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL)
VALUES
 ('Admin',          'Administration Group',       'admin@demo.com'),
 ('BG1',            'Business Group 1',           'bg1@demo.com'),
 ('BG2',            'Business Group 2',           'bg2@demo.com'),
 ('FinalApprover',  'Global Final Approver',      'final@demo.com');



⸻

3. Users (4 sample accounts)

INSERT INTO USERS (USERNAME, PASSWORD, USER_GROUP)
VALUES
 ('adminUser',         'adminPass',         'Admin'),
 ('johnBG1',           'passBG1',           'BG1'),
 ('aliceBG2',          'passBG2',           'BG2'),
 ('finalApproverUser', 'finPass',           'FinalApprover');



⸻

4. Rule Groups

INSERT INTO BRM_RULE_GROUPS(GROUP_NAME, DESCRIPTION)
VALUES
 ('GroupA', 'Sample group A'),
 ('GroupB', 'Sample group B');



⸻

5. Sample Rules for BFS (Parent → Child → GrandChild)

Parent Rule: Just does SELECT 1 (returns pass=1).
Child Rule: Updates DEMO_CUSTOMERS row with CustomerID=3 to set Status='Active'.
GrandChild: Another simple SELECT.

-- Parent Rule
INSERT INTO BRM_RULES(
  GROUP_ID,
  RULE_NAME,
  RULE_SQL,
  OWNER_GROUP,
  STATUS,
  VERSION,
  PARENT_RULE_ID,
  CREATED_BY,
  CREATED_TIMESTAMP,
  OPERATION_TYPE,
  APPROVAL_STATUS
)
SELECT TOP 1
  GROUP_ID,
  'ParentRule',
  'SELECT 1 AS CheckPass',
  'Admin',         -- Owned by Admin group
  'ACTIVE',        -- Let's mark this rule active for demonstration
  1,
  NULL,            -- No parent
  'adminUser',     -- Created by admin
  GETDATE(),
  'SELECT',
  'APPROVAL_IN_PROGRESS'
FROM BRM_RULE_GROUPS
WHERE GROUP_NAME='GroupA';

-- Child Rule (depends on ParentRule)
INSERT INTO BRM_RULES(
  GROUP_ID,
  RULE_NAME,
  RULE_SQL,
  OWNER_GROUP,
  STATUS,
  VERSION,
  PARENT_RULE_ID,
  CREATED_BY,
  CREATED_TIMESTAMP,
  OPERATION_TYPE,
  APPROVAL_STATUS
)
SELECT TOP 1
  GROUP_ID,
  'ChildRule_UpdateDemo',
  'UPDATE DEMO_CUSTOMERS SET Status = ''Active'' WHERE CustomerID = 3',
  'BG1',                -- Owned by BG1
  'INACTIVE',
  1,
  (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ParentRule'),
  'johnBG1',
  GETDATE(),
  'UPDATE',
  'APPROVAL_IN_PROGRESS'
FROM BRM_RULE_GROUPS
WHERE GROUP_NAME='GroupA';

-- GrandChild Rule (depends on ChildRule_UpdateDemo)
INSERT INTO BRM_RULES(
  GROUP_ID,
  RULE_NAME,
  RULE_SQL,
  OWNER_GROUP,
  STATUS,
  VERSION,
  PARENT_RULE_ID,
  CREATED_BY,
  CREATED_TIMESTAMP,
  OPERATION_TYPE,
  APPROVAL_STATUS
)
SELECT TOP 1
  GROUP_ID,
  'GrandChildRule_Select',
  'SELECT 1 AS AnotherCheck',
  'BG2',                -- Owned by BG2
  'INACTIVE',
  1,
  (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ChildRule_UpdateDemo'),
  'aliceBG2',
  GETDATE(),
  'SELECT',
  'APPROVAL_IN_PROGRESS'
FROM BRM_RULE_GROUPS
WHERE GROUP_NAME='GroupB';



⸻

6. Basic Data Validations (NOT NULL, UNIQUE, REGEX)

INSERT INTO DATA_VALIDATIONS(
  TABLE_NAME,
  COLUMN_NAME,
  VALIDATION_TYPE,
  PARAMS
)
VALUES
 ('DEMO_CUSTOMERS','CustomerName','NOT NULL',  NULL),
 ('DEMO_CUSTOMERS','CustomerID',  'UNIQUE',    NULL),
 ('DEMO_CUSTOMERS','Status',      'REGEX',     'pattern=^(Active|Inactive)$');



⸻

7. Sample Decision Table

Example query that fails if any customer is Inactive (returns 0), else returns 1:

INSERT INTO DECISION_TABLES(
  TABLE_NAME,
  DESCRIPTION,
  DECISION_QUERY,
  CREATED_TIMESTAMP
)
VALUES(
 'DemoDecision1',
 'Check if all customers are Active',
 'SELECT CASE WHEN EXISTS(SELECT 1 FROM DEMO_CUSTOMERS WHERE Status=''Inactive'') THEN 0 ELSE 1 END AS passFlag',
 GETDATE()
);



⸻

8. Rule Schedules

Schedules the ParentRule to run 10 minutes from now, with data validations:

INSERT INTO RULE_SCHEDULES(
  RULE_ID,
  SCHEDULE_TIME,
  STATUS,
  CREATED_TIMESTAMP,
  RUN_DATA_VALIDATIONS
)
SELECT TOP 1
  RULE_ID,
  DATEADD(MINUTE, 10, GETDATE()),
  'Scheduled',
  GETDATE(),
  1
FROM BRM_RULES
WHERE RULE_NAME='ParentRule';



⸻

9. Multi-Step Approvals

Here we give the ParentRule a 2-stage approval: Stage 1 by Admin group, Stage 2 by FinalApprover group.

DECLARE @parentRuleID INT = (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ParentRule');

INSERT INTO BRM_RULE_APPROVALS(RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(@parentRuleID,'Admin','adminUser',0,1),
(@parentRuleID,'FinalApprover','finalApproverUser',0,2);

You could do similar inserts for the child/grandchild rules if you want them to have multi-step approval as well.

⸻

10. Custom Rule Group (Demo)

-- Create a custom group
INSERT INTO BRM_CUSTOM_RULE_GROUPS(
  CUSTOM_GROUP_NAME,
  OWNER_BUSINESS_GROUP,
  CREATED_BY,
  CREATED_TIMESTAMP
)
VALUES(
  'MyTestCustomGroup',
  'BG1',
  'johnBG1',
  GETDATE()
);

-- Assign the "ChildRule_UpdateDemo" to that custom group
INSERT INTO BRM_CUSTOM_GROUP_MEMBERS(CUSTOM_GROUP_ID, RULE_ID)
SELECT
 (SELECT CUSTOM_GROUP_ID FROM BRM_CUSTOM_RULE_GROUPS WHERE CUSTOM_GROUP_NAME='MyTestCustomGroup'),
 (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ChildRule_UpdateDemo');



⸻

11. Conflict Priority (Example)

Suppose “ParentRule” conflicts with “ChildRule_UpdateDemo”. Priority 1 means parent is more important.

INSERT INTO RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
SELECT
 (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ParentRule'),
 (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ChildRule_UpdateDemo'),
 1;



⸻

12. Collaboration Logs (some example chat messages)

INSERT INTO COLLABORATION_LOGS(MESSAGE, SENDER, TIMESTAMP)
VALUES
 ('Hello team, any updates on BFS?', 'johnBG1', GETDATE()),
 ('We need final approval from finalApproverUser soon.', 'adminUser', GETDATE());



⸻

13. Defect Management Example

INSERT INTO BRM_DEFECT_LOGS(RULE_ID, DESCRIPTION, SEVERITY, REPORTER, STATUS, TIMESTAMP)
SELECT
 (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ChildRule_UpdateDemo'),
 'Update rule fails if DEMO_CUSTOMERS has missing data',
 'High',
 'QAUser',
 'Open',
 GETDATE();



⸻

14. Basic Help Content (for the Help/FAQ Tab)

INSERT INTO HELP_CONTENT(CATEGORY, TITLE, CONTENT, LAST_UPDATED)
VALUES
 ('FAQ',   'How to run BFS?', 'Select a rule in the table and click Run BFS.', GETDATE()),
 ('GUIDE', 'Data Validation Setup', 'Multiple validation types are supported: NOT NULL, UNIQUE, RANGE, etc.', GETDATE());



⸻

15. Performance Stats (for Predictive Analytics)

-- Insert a couple of performance records for "ParentRule"
INSERT INTO RULE_PERF_STATS(
  RULE_ID, ACTION_TIMESTAMP, EXEC_TIME_MS, MEM_USAGE, DATE_KEY
)
SELECT
 (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ParentRule'),
 DATEADD(DAY, -1, GETDATE()),
 1500,
 40000,
 CONVERT(varchar(8), DATEADD(DAY, -1, GETDATE()), 112)
UNION ALL
SELECT
 (SELECT RULE_ID FROM BRM_RULES WHERE RULE_NAME='ParentRule'),
 GETDATE(),
 2500,
 60000,
 CONVERT(varchar(8), GETDATE(), 112);



⸻

Running Your Demo
	1.	Create or verify all the needed tables exist (e.g. BRM_RULES, BRM_RULE_APPROVALS, etc.).
	2.	Run the above inserts.
	3.	Log in as adminUser / adminPass (user group = Admin).
	4.	In the UI, you’ll see:
	•	The BFS hierarchy: ParentRule → ChildRule_UpdateDemo → GrandChildRule_Select.
	•	A schedule for ParentRule in the next 10 minutes.
	•	Approvals required at two stages (Admin then FinalApprover).
	5.	Test BFS:
	•	If ParentRule is run BFS from the UI, it attempts the chain.
	•	The second rule in the chain does UPDATE DEMO_CUSTOMERS SET Status='Active' WHERE CustomerID=3.
	•	The final child rule is a SELECT 1.
	6.	Test data validations with DATA_VALIDATIONS.
	7.	Test custom group logic by selecting the custom group and doing a simulation or BFS run.

This minimal data set exercises the main functionality: locking & approvals, scheduling, BFS rule execution, decision tables, data validation, conflicts, and collaboration logs. Adjust as needed for your environment.