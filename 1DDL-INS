USE YourDatabaseName;
GO

/*****************************************************************************
  1) USERS
*****************************************************************************/
INSERT INTO dbo.USERS (USERNAME, [PASSWORD], USER_GROUP) VALUES
('admin', 'admin123', 'Admin'),
('alice', 'alicepass', 'BG1'),
('bob',   'bobpass',   'BG2'),
('carol', 'carolpass', 'BG3'),
('david', 'davidpass', 'FinanceBG'),
('eve',   'evepass',   'SalesBG'),
('global_approver', 'globalpass', 'GlobalApprovers');

-- We'll have a few normal BG (Business Groups) to demonstrate multi-step
-- approvals and group-based ownership.


/*****************************************************************************
  2) BUSINESS_GROUPS
*****************************************************************************/
INSERT INTO dbo.BUSINESS_GROUPS (GROUP_NAME, DESCRIPTION, EMAIL) VALUES
('BG1', 'First business group', 'bg1@example.com'),
('BG2', 'Second business group', 'bg2@example.com'),
('BG3', 'Third business group', 'bg3@example.com'),
('FinanceBG', 'Finance Business Group', 'finance@example.com'),
('SalesBG', 'Sales Business Group', 'sales@example.com'),
('GlobalApprovers', 'Global Approvers Group', 'global@example.com');


/*****************************************************************************
  3) GROUP_PERMISSIONS
*****************************************************************************/
INSERT INTO dbo.GROUP_PERMISSIONS (GROUP_NAME, TARGET_TABLE) VALUES
('BG1', 'BRM_RULES'),
('BG1', 'DATA_VALIDATIONS'),
('BG2', 'BRM_RULES'),
('BG3', 'BRM_RULES'),
('FinanceBG', 'RULE_CONFLICTS'),
('GlobalApprovers', 'BRM_RULES'),
('GlobalApprovers', 'BRM_RULE_APPROVALS'),
('SalesBG', 'RULE_SCHEDULES');


/*****************************************************************************
  4) BRM_RULE_GROUPS (UI grouping for rules)
*****************************************************************************/
INSERT INTO dbo.BRM_RULE_GROUPS (GROUP_NAME, DESCRIPTION) VALUES
('Sales Rules', 'Rules for Sales domain'),
('Finance Rules', 'Rules for Finance domain'),
('Analytics Rules', 'Analytical or composite rules');


/*****************************************************************************
  5) BRM_RULE_TYPES
*****************************************************************************/
INSERT INTO dbo.BRM_RULE_TYPES (RULE_TYPE_NAME) VALUES
('SQL-based'),
('DECISION_TABLE'),
('MAPPING'),
('DATA_QUALITY'),
('GLOBAL_CRITICAL');


/*****************************************************************************
  6) BRM_RULES
   - We’ll create multiple rules to demonstrate BFS chaining, 
     parent-child relationships, different owners, etc.
*****************************************************************************/
-- RULE #1: A parent rule for BFS chain, Owned by BG1
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE,
    CDC_TYPE, LIFECYCLE_STATE, DECISION_TABLE_ID, ENCRYPTED_FLAG
) VALUES (
    1,    -- GROUP_ID = 'Sales Rules' (first group in BRM_RULE_GROUPS)
    NULL, -- No parent => top-level BFS
    1,    -- RULE_TYPE_ID = 'SQL-based'
    'Check Customer Data', 
    'SELECT CASE WHEN COUNT(*)>0 THEN 1 ELSE 0 END FROM dbo.Customers WHERE [City] IS NULL',
    '2023-01-01', '2025-01-01',
    'INACTIVE',
    'admin',
    'Ensures customers have city field non-null',
    'SELECT',
    'Business justification for Customer City check',
    'BG1',
    'APPROVAL_IN_PROGRESS',
    0, -- is_global
    0, -- critical_rule
    'NONE',
    'FULL_LOAD',
    'DRAFT',
    NULL, -- no decision table
    0
);

-- RULE #2: child of RULE #1 in BFS chain, Owned by BG2
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE,
    CDC_TYPE, LIFECYCLE_STATE, DECISION_TABLE_ID
) VALUES (
    1,    -- same group for demonstration
    1,    -- PARENT_RULE_ID => references the first rule
    1,    
    'Order Check Rule', 
    'SELECT CASE WHEN COUNT(*)>0 THEN 0 ELSE 1 END FROM dbo.Orders WHERE Amount < 0',
    '2023-01-01', '2025-01-01',
    'INACTIVE',
    'alice',
    'Checks for negative order amounts => if found, fail',
    'SELECT',
    'Business justification for negative orders check',
    'BG2',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE',
    'INCREMENTAL',
    'DRAFT',
    NULL
);

-- RULE #3: Another child of RULE #1, Owned by BG3
-- We'll do partial approvals for demonstration
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    STATUS,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    OWNER_GROUP, APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE
) VALUES (
    2,    -- 'Finance Rules'
    1,    -- PARENT_RULE_ID => also child of Rule#1
    1,
    'Finance Double-check',
    'SELECT CASE WHEN SUM(Amount)>99999 THEN 0 ELSE 1 END FROM dbo.Orders WHERE [Status]= ''Open''',
    'INACTIVE',
    'bob',
    'Validate total open orders does not exceed 99999.',
    'SELECT',
    'Finance wants to block if open orders too large',
    'BG3',
    'APPROVAL_IN_PROGRESS',
    0,
    0,
    'NONE'
);

-- RULE #4: Child of RULE #2 => BFS chain becomes #1->#2->#4
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    STATUS,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, OWNER_GROUP,
    APPROVAL_STATUS
) VALUES (
    1,
    2,
    1,
    'Sub-check for Orders BFS child',
    'SELECT 1  -- pretend logic that returns 1=pass always',
    'INACTIVE',
    'alice',
    'Child BFS rule depends on #2.',
    'SELECT',
    'BG2',
    'APPROVAL_IN_PROGRESS'
);

-- RULE #5: Mark it as global+critical for demonstration
INSERT INTO dbo.BRM_RULES (
    GROUP_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    STATUS,
    CREATED_BY, OWNER_GROUP, APPROVAL_STATUS,
    IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE
) VALUES (
    3,  -- 'Analytics Rules'
    5,  -- RULE_TYPE_ID = 'GLOBAL_CRITICAL'
    'GlobalCritical OverBudget',
    'SELECT CASE WHEN SUM(Amount)>500000 THEN 0 ELSE 1 END FROM dbo.Orders',
    'INACTIVE',
    'admin',
    'GlobalApprovers',
    'APPROVAL_IN_PROGRESS',
    1,
    1,
    'GLOBAL'
);


/*****************************************************************************
  7) BRM_RULE_APPROVALS
   - We’ll do 4-stage approvals for Rule #1 to see color-coded statuses:
     Stage 1 => BG1
     Stage 2 => BG2
     Stage 3 => BG3
     Stage 4 => GlobalApprovers
*****************************************************************************/
-- For Rule #1:
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE, APPROVED_TIMESTAMP)
VALUES
(1, 'BG1', 'alice', 1, 1, '2023-01-02'),   -- Approved => "BG1(approved)"
(1, 'BG2', 'bob',   0, 2, NULL),          -- Pending => "BG2(pending)"
(1, 'BG3', 'carol', 2, 3, '2023-02-01'),  -- Rejected => "BG3(rejected)"
(1, 'GlobalApprovers', 'global_approver', 0, 4, NULL); -- Also pending


-- For Rule #2: 2-stage approvals
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(2, 'BG2', 'bob', 1, 1),   -- Approved
(2, 'GlobalApprovers', 'global_approver', 1, 2); -- Approved => entire rule gets 'APPROVED' => can be ACTIVE

-- For Rule #3: 2-stage but partially done
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(3, 'BG3', 'carol', 0, 1),  -- Pending
(3, 'GlobalApprovers', 'global_approver', 0, 2); -- also pending

-- For Rule #4: let’s do single-stage
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(4, 'BG2', 'alice', 0, 1);

-- For Rule #5: 2-stage
INSERT INTO dbo.BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
VALUES
(5, 'GlobalApprovers', 'global_approver', 0, 1),
(5, 'BG1', 'alice', 0, 2);


/*****************************************************************************
  8) BRM_RULE_LOCKS
   - (Optional) Lock a couple of rules to show concurrency in code
*****************************************************************************/
INSERT INTO dbo.BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES
(1, 'admin', DATEADD(HOUR, 1, GETDATE()), 0, 1),   -- Expires in 1 hour
(3, 'bob',   DATEADD(MINUTE, 30, GETDATE()), 1, 1);


/*****************************************************************************
  9) RULE_CONFLICTS
   - For demonstration, let’s say Rule #2 conflicts with Rule #3
*****************************************************************************/
INSERT INTO dbo.RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
VALUES
(2, 3, 1),
(1, 3, 2);


/*****************************************************************************
 10) BRM_GLOBAL_CRITICAL_LINKS
   - Suppose #5 is global-critical and can link to #1
*****************************************************************************/
INSERT INTO dbo.BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
VALUES
(5, 1);


/*****************************************************************************
 11) COMPOSITE_RULES
   - Single composite referencing “Rule1==PASS AND Rule3==PASS” 
     in the logic expression for demonstration
*****************************************************************************/
INSERT INTO dbo.COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
VALUES
('Composite_1', 'Rule1==PASS AND Rule3==PASS', 'SendEmail');


/*****************************************************************************
 12) DECISION_TABLES
   - We’ll have 1 decision table
*****************************************************************************/
INSERT INTO dbo.DECISION_TABLES (TABLE_NAME, DESCRIPTION, DECISION_QUERY)
VALUES
('DT_Sample', 'Simple example decision logic', 
 'SELECT CASE WHEN 1=1 THEN 1 ELSE 0 END');


/*****************************************************************************
 13) RULE_SNAPSHOTS
*****************************************************************************/
INSERT INTO dbo.RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON)
VALUES
('Initial Snapshot of All Rules', 'admin',
 N'[{"RULE_ID":1,"RULE_NAME":"Check Customer Data","STATUS":"INACTIVE"}, {"RULE_ID":2,"RULE_NAME":"Order Check Rule","STATUS":"INACTIVE"} ]'),
('Another Snapshot','alice',
 N'[{"RULE_ID":3,"RULE_NAME":"Finance Double-check","STATUS":"INACTIVE"}]');


/*****************************************************************************
 14) RULE_TAGS
*****************************************************************************/
INSERT INTO dbo.RULE_TAGS (RULE_ID, TAG_NAME) VALUES
(1, 'DataQuality'),
(2, 'OrdersCheck'),
(3, 'FinanceCheck'),
(5, 'GlobalCritical');


/*****************************************************************************
 15) DATA_VALIDATIONS
   - Some references to fictitious Customers / Orders for demo
*****************************************************************************/
INSERT INTO dbo.DATA_VALIDATIONS (TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS)
VALUES
('dbo.Customers', 'City', 'NOT NULL', NULL),
('dbo.Orders', 'Amount', 'RANGE', 'min=0;max=999999'),
('dbo.Orders', 'OrderID', 'UNIQUE', NULL),
('dbo.Customers', 'Email', 'REGEX', 'pattern=^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');


/*****************************************************************************
 16) DATA_VALIDATION_LOGS
   - Some sample logs
*****************************************************************************/
INSERT INTO dbo.DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS)
VALUES
(1, 'PASS', 'All cities found non-null'),
(2, 'FAIL', '2 rows found negative or >999999'),
(3, 'PASS', 'All unique IDs'),
(4, 'FAIL', '1 row did not match email pattern');


/*****************************************************************************
 17) RULE_SCHEDULES
*****************************************************************************/
INSERT INTO dbo.RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS)
VALUES
(1, DATEADD(HOUR, 6, GETDATE()), 'Scheduled', 1),
(2, DATEADD(DAY, 1, GETDATE()), 'Scheduled', 0),
(3, DATEADD(HOUR, 2, GETDATE()), 'Cancelled', 0);


/*****************************************************************************
 18) RULE_EXECUTION_LOGS
*****************************************************************************/
INSERT INTO dbo.RULE_EXECUTION_LOGS 
(RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE)
VALUES
(1, 1, 'City check passed', 10, 100, 5, 2000),
(2, 0, 'Found negative orders => FAIL', 2, 300, 10, 3000),
(3, 1, 'All open orders < 99999 => pass', 5, 120, 8, 2500),
(2, 1, 'No negative orders on re-check => pass', 0, 200, 10, 3100);


/*****************************************************************************
 19) RULE_PERF_STATS
*****************************************************************************/
INSERT INTO dbo.RULE_PERF_STATS (RULE_ID, EXEC_TIME_MS, MEM_USAGE)
VALUES
(1, 150.0, 2500),
(1, 120.0, 2000),
(2, 300.0, 4500),
(3, 1100.0, 52000),  -- large mem usage => alert scenario
(5, 2100.0, 60000);  -- big exec time => alert scenario


/*****************************************************************************
 20) BRM_RULE_LINEAGE
   - For BFS or lineage display
*****************************************************************************/
INSERT INTO dbo.BRM_RULE_LINEAGE (RULE_ID, PARENT_ID) VALUES
(1, NULL), -- top-level
(2, 1),
(3, 1),
(4, 2),
(5, NULL);


/*****************************************************************************
 21) BRM_RULE_TABLE_DEPENDENCIES
   - We'll show usage of read/write
*****************************************************************************/
INSERT INTO dbo.BRM_RULE_TABLE_DEPENDENCIES 
(RULE_ID, DATABASE_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_OP)
VALUES
(1, 'YourDatabaseName', 'dbo.Customers', 'City', 'READ'),
(2, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'READ'),
(2, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'WRITE'), -- pretend we do an update
(3, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'READ'),
(5, 'YourDatabaseName', 'dbo.Orders', 'Amount', 'READ');


/*****************************************************************************
 22) BRM_DEFECT_LOGS
*****************************************************************************/
INSERT INTO dbo.BRM_DEFECT_LOGS (RULE_ID, DESCRIPTION, SEVERITY, REPORTER, [STATUS])
VALUES
(2, 'Rule incorrectly flagged valid negative test orders', 'Medium', 'tester1', 'Open'),
(3, 'Finance check is too large of a threshold', 'High', 'carol', 'Open');


/*****************************************************************************
 23) BRM_RULE_APPROVALS 
   - Already inserted above for sample 
     (We used 1,2,3,4,5 rules). 
     No additional needed here
*****************************************************************************/


/*****************************************************************************
 24) BRM_AUDIT_LOG
*****************************************************************************/
INSERT INTO dbo.BRM_AUDIT_LOG 
(ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA)
VALUES
('INSERT', 'BRM_RULES', '1', 'admin', NULL, '{"RULE_ID":1,"RULE_NAME":"Check Customer Data"}'),
('APPROVE','BRM_RULE_APPROVALS','(Rule1,BG1,Stage1)','alice', NULL,'{"approved":true}'),
('REJECT','BRM_RULE_APPROVALS','(Rule1,BG3,Stage3)','carol', NULL,'{"rejected":true}');


/*****************************************************************************
 25) COLLABORATION_LOGS
*****************************************************************************/
INSERT INTO dbo.COLLABORATION_LOGS (MESSAGE, SENDER) VALUES
('Hello team, we need to check negative orders again', 'bob'),
('Sure, will do BFS dry-run soon', 'alice');


/*****************************************************************************
 26) BRM_CUSTOM_RULE_GROUPS
*****************************************************************************/
INSERT INTO dbo.BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME, OWNER_BUSINESS_GROUP, CREATED_BY)
VALUES
('CustomGroup_SalesCheck', 'SalesBG', 'eve'),
('CustomGroup_FinanceCheck', 'FinanceBG', 'david');


/*****************************************************************************
 27) BRM_CUSTOM_GROUP_MEMBERS
*****************************************************************************/
INSERT INTO dbo.BRM_CUSTOM_GROUP_MEMBERS (CUSTOM_GROUP_ID, RULE_ID)
VALUES
(1, 1),  -- Add Rule #1 to CustomGroup_SalesCheck
(1, 2),  -- Add Rule #2
(2, 3),  -- Add Rule #3 to FinanceCheck
(2, 5);  -- Also add Rule #5 to FinanceCheck


/*****************************************************************************
 28) HELP_CONTENT
*****************************************************************************/
INSERT INTO dbo.HELP_CONTENT (CATEGORY, TITLE, [CONTENT]) VALUES
('FAQ', 'How to Approve a Rule?', 'Go to the Approvals tab, select the rule, click Approve.'),
('GUIDE', 'Creating BFS Chain', 'Set PARENT_RULE_ID on a new rule to link to the parent.'),
('FAQ', 'What is a Composite Rule?', 'A rule referencing sub-rules with logical expressions.'),
('GUIDE', 'Lock & Unlock a Rule', 'Use LockManager in the UI or Admin can force unlock.');


/*****************************************************************************
   Done. You now have minimal sample data across all tables.
   You can adapt further or insert more rows as needed.
*****************************************************************************/
GO
