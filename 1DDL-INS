-----------------------------------------------
-- Sample Test Data Inserts (Revised: No Identity Columns Specified)
-----------------------------------------------

-- Insert sample users
INSERT INTO USERS (USERNAME, PASSWORD, USER_GROUP) 
VALUES ('admin', 'adminpass', 'Admin'),
       ('john_doe', 'password123', 'User');

-- Insert sample rule groups
INSERT INTO BRM_RULE_GROUPS (GROUP_NAME) 
VALUES ('Finance'), ('Operations');

-- Insert sample rule types
INSERT INTO BRM_RULE_TYPES (RULE_TYPE_NAME) 
VALUES ('Data Quality'),
       ('Threshold'),
       ('Data Mover'),
       ('Decision Table');

-- Insert sample custom rule groups
INSERT INTO BRM_CUSTOM_RULE_GROUPS (CUSTOM_GROUP_NAME) 
VALUES ('Custom Finance Group');

-----------------------------------------------
-- Insert sample business rules
-----------------------------------------------
-- Rule 1: Customer Email Quality Check (Data Quality rule)
INSERT INTO BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE,
    LIFECYCLE_STATE, OWNER_GROUP, CLUSTER_NAME, LOCKED_BY
)
VALUES (
    1, NULL, 1, 'Customer Email Quality Check',
    'SELECT CASE WHEN COUNT(*) = 0 THEN 1 ELSE 0 END FROM Customers WHERE Email IS NULL',
    '2025-01-01', '2025-12-31',
    'ACTIVE', 1, 'john_doe',
    'Checks that no customer record is missing an email address',
    'SELECT', 'Ensure customer contact info quality',
    'APPROVED', 0, 0, NULL, 'NONE', 'ACTIVE', 'Finance', NULL, NULL
);

-- Rule 2: Expense Amount Threshold (Threshold rule, global)
INSERT INTO BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE,
    LIFECYCLE_STATE, OWNER_GROUP, CLUSTER_NAME, LOCKED_BY
)
VALUES (
    1, NULL, 2, 'Expense Amount Threshold',
    'SELECT CASE WHEN MIN(Amount) >= 0 THEN 1 ELSE 0 END FROM Expenses',
    '2025-01-01', '2025-12-31',
    'ACTIVE', 1, 'john_doe',
    'Ensures that no expense amount is negative',
    'SELECT', 'Threshold check on expense amounts',
    'APPROVED', 1, 0, NULL, 'NONE', 'ACTIVE', 'Finance', NULL, NULL
);

-- Rule 3: Data Mover for Customer (Data Mover rule)
INSERT INTO BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE,
    LIFECYCLE_STATE, OWNER_GROUP, CLUSTER_NAME, LOCKED_BY
)
VALUES (
    1, NULL, 3, 'Data Mover for Customer',
    'EXEC MoveCustomerData',
    '2025-01-01', '2025-12-31',
    'ACTIVE', 1, 'admin',
    'Moves customer data from staging to production',
    'EXECUTE', 'Automated data migration',
    'APPROVED', 0, 0, NULL, 'NONE', 'ACTIVE', 'Finance', NULL, NULL
);

-- Rule 4: Global Critical Balance Check (Threshold rule, global and critical)
INSERT INTO BRM_RULES (
    GROUP_ID, PARENT_RULE_ID, RULE_TYPE_ID, RULE_NAME, RULE_SQL,
    EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, STATUS, VERSION,
    CREATED_BY, DESCRIPTION, OPERATION_TYPE, BUSINESS_JUSTIFICATION,
    APPROVAL_STATUS, IS_GLOBAL, CRITICAL_RULE, CRITICAL_SCOPE, CDC_TYPE,
    LIFECYCLE_STATE, OWNER_GROUP, CLUSTER_NAME, LOCKED_BY
)
VALUES (
    1, NULL, 2, 'Global Critical Balance Check',
    'SELECT CASE WHEN SUM(Balance) > 0 THEN 1 ELSE 0 END FROM Customers',
    '2025-01-01', '2025-12-31',
    'ACTIVE', 1, 'admin',
    'Ensures total customer balance is positive',
    'SELECT', 'Critical global threshold check',
    'APPROVED', 1, 1, 'GLOBAL', 'NONE', 'ACTIVE', 'Finance', NULL, NULL
);

-----------------------------------------------
-- Insert sample decision table
-----------------------------------------------
INSERT INTO DECISION_TABLES (TABLE_NAME, DESCRIPTION, DECISION_QUERY) 
VALUES ('CustomerDecision', 'Decision table for customer data quality', 'SELECT 1');

-----------------------------------------------
-- Insert sample domain data for Customers and Expenses
-----------------------------------------------
-- Customers
INSERT INTO Customers (Name, Email, Balance) 
VALUES ('Alice Smith', 'alice@example.com', 1000.00),
       ('Bob Johnson', NULL, 500.00),
       ('Charlie Brown', 'charlie@example.com', 1200.50);

-- Expenses
INSERT INTO Expenses (Description, Amount) 
VALUES ('Office Supplies', 150.00),
       ('Travel Expense', -20.00),
       ('Utility Bills', 300.00);

-----------------------------------------------
-- Insert sample data for RULE_CONFLICTS
-----------------------------------------------
INSERT INTO RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY) 
VALUES (1, 2, 1);

-----------------------------------------------
-- Insert sample data for BRM_GLOBAL_CRITICAL_LINKS
-----------------------------------------------
INSERT INTO BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID) 
VALUES (4, 2);

-----------------------------------------------
-- Insert sample data for COMPOSITE_RULES
-----------------------------------------------
INSERT INTO COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS) 
VALUES ('Composite Rule 1', 'Rule1==PASS AND Rule2==PASS', 'SendEmail');

-----------------------------------------------
-- Insert sample data for BRM_RULE_APPROVALS
-----------------------------------------------
INSERT INTO BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE) 
VALUES (1, 'Finance', 'john_doe', 0, 1);

-----------------------------------------------
-- Insert sample data for BRM_RULE_LOCKS
-----------------------------------------------
INSERT INTO BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
VALUES (1, 'john_doe', GETDATE(), DATEADD(minute, 30, GETDATE()), 0, 1);

-----------------------------------------------
-- Insert sample data for COLLABORATION_LOGS
-----------------------------------------------
INSERT INTO COLLABORATION_LOGS (MESSAGE, SENDER) 
VALUES ('Test message from collaboration', 'john_doe');

-----------------------------------------------
-- Large Sample Data Generation Using Loops
-----------------------------------------------

-- Populate Customers (simulate bank customer data)
DECLARE @i INT = 1;
WHILE @i <= 10000
BEGIN
    INSERT INTO Customers (Name, Email, Balance)
    VALUES (
        'Customer ' + CAST(@i AS VARCHAR(10)),
        'customer' + CAST(@i AS VARCHAR(10)) + '@bank.com',
        ROUND((RAND() * 10000), 2)
    );
    SET @i = @i + 1;
END

-- Populate Expenses (simulate bank expense data)
DECLARE @j INT = 1;
WHILE @j <= 20000
BEGIN
    INSERT INTO Expenses (Description, Amount)
    VALUES (
        'Expense ' + CAST(@j AS VARCHAR(10)),
        ROUND((RAND() * 500 - 100), 2)
    );
    SET @j = @j + 1;
END

-- Populate RULE_EXECUTION_LOGS (simulate rule executions)
DECLARE @k INT = 1;
WHILE @k <= 5000
BEGIN
    INSERT INTO RULE_EXECUTION_LOGS (RULE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT, EXECUTION_TIME_MS, CPU_USAGE, MEM_USAGE)
    VALUES (
        ((@k % 4) + 1), -- cycles RULE_ID between 1 and 4
        CASE WHEN RAND() > 0.2 THEN 1 ELSE 0 END,
        'Execution result ' + CAST(@k AS VARCHAR(10)),
        FLOOR(RAND() * 100),
        FLOOR(RAND() * 1000),
        FLOOR(RAND() * 100),
        FLOOR(RAND() * 50)
    );
    SET @k = @k + 1;
END

-- Populate DATA_VALIDATION_LOGS (simulate data quality evaluations)
DECLARE @l INT = 1;
WHILE @l <= 3000
BEGIN
    INSERT INTO DATA_VALIDATION_LOGS (VALIDATION_ID, RESULT_FLAG, DETAILS)
    VALUES (
        ((@l % 4) + 1),
        CASE WHEN RAND() > 0.3 THEN 'PASS' ELSE 'FAIL' END,
        'Validation details for log ' + CAST(@l AS VARCHAR(10))
    );
    SET @l = @l + 1;
END

-- Populate DECISION_TABLE_EXEC_LOGS (simulate decision table executions)
DECLARE @m INT = 1;
WHILE @m <= 1000
BEGIN
    INSERT INTO DECISION_TABLE_EXEC_LOGS (DECISION_TABLE_ID, PASS_FLAG, MESSAGE, RECORD_COUNT)
    VALUES (
        1, -- Assuming one decision table
        CASE WHEN RAND() > 0.5 THEN 1 ELSE 0 END,
        'Decision execution ' + CAST(@m AS VARCHAR(10)),
        FLOOR(RAND() * 10)
    );
    SET @m = @m + 1;
END

-- Populate BRM_AUDIT_LOG (simulate audit logs)
DECLARE @n INT = 1;
WHILE @n <= 5000
BEGIN
    INSERT INTO BRM_AUDIT_LOG (ACTION, TABLE_NAME, RECORD_ID, ACTION_BY, OLD_DATA, NEW_DATA)
    VALUES (
        'UPDATE',
        'BRM_RULES',
        CAST((@n % 10) + 1 AS VARCHAR(10)),
        'john_doe',
        '{"old": "data"}',
        '{"new": "data"}'
    );
    SET @n = @n + 1;
END

-- Populate COLLABORATION_LOGS (simulate collaboration messages)
DECLARE @o INT = 1;
WHILE @o <= 1000
BEGIN
    INSERT INTO COLLABORATION_LOGS (MESSAGE, SENDER)
    VALUES (
        'Collaboration message ' + CAST(@o AS VARCHAR(10)),
        'john_doe'
    );
    SET @o = @o + 1;
END

-- Populate RULE_CONFLICTS (simulate conflicts between rules)
DECLARE @p INT = 1;
WHILE @p <= 50
BEGIN
    INSERT INTO RULE_CONFLICTS (RULE_ID1, RULE_ID2, PRIORITY)
    VALUES (
        ((@p % 4) + 1),
        (((@p + 1) % 4) + 1),
        ((@p % 5) + 1)
    );
    SET @p = @p + 1;
END

-- Populate BRM_GLOBAL_CRITICAL_LINKS (simulate global critical links)
DECLARE @q INT = 1;
WHILE @q <= 20
BEGIN
    INSERT INTO BRM_GLOBAL_CRITICAL_LINKS (GCR_RULE_ID, TARGET_RULE_ID)
    VALUES (
        4,
        ((@q % 4) + 1)
    );
    SET @q = @q + 1;
END

-- Populate COMPOSITE_RULES (simulate composite rules)
DECLARE @r INT = 1;
WHILE @r <= 100
BEGIN
    INSERT INTO COMPOSITE_RULES (CRULE_NAME, LOGIC_EXPR, ACTION_ON_PASS)
    VALUES (
        'Composite Rule ' + CAST(@r AS VARCHAR(10)),
        'Rule1==PASS AND Rule2==PASS',
        'SendEmail'
    );
    SET @r = @r + 1;
END

-- Populate BRM_RULE_APPROVALS (simulate rule approvals)
DECLARE @s INT = 1;
WHILE @s <= 200
BEGIN
    INSERT INTO BRM_RULE_APPROVALS (RULE_ID, GROUP_NAME, USERNAME, APPROVED_FLAG, APPROVAL_STAGE)
    VALUES (
        (((@s) % 4) + 1),
        'Finance',
        'john_doe',
        0,
        1
    );
    SET @s = @s + 1;
END

-- Populate BRM_RULE_LOCKS (simulate locks on rules)
DECLARE @t INT = 1;
WHILE @t <= 100
BEGIN
    INSERT INTO BRM_RULE_LOCKS (RULE_ID, LOCKED_BY, LOCK_TIMESTAMP, EXPIRY_TIMESTAMP, FORCE_LOCK, ACTIVE_LOCK)
    VALUES (
        (((@t) % 4) + 1),
        'john_doe',
        GETDATE(),
        DATEADD(minute, 30, GETDATE()),
        0,
        1
    );
    SET @t = @t + 1;
END

-- Populate RULE_SCHEDULES (simulate scheduling data)
DECLARE @u INT = 1;
WHILE @u <= 200
BEGIN
    INSERT INTO RULE_SCHEDULES (RULE_ID, SCHEDULE_TIME, STATUS, RUN_DATA_VALIDATIONS)
    VALUES (
        (((@u) % 4) + 1),
        DATEADD(day, (@u % 30), GETDATE()),
        'Scheduled',
        CASE WHEN (@u % 2) = 0 THEN 1 ELSE 0 END
    );
    SET @u = @u + 1;
END

-- Populate RULE_SNAPSHOTS (simulate snapshot data)
DECLARE @v INT = 1;
WHILE @v <= 50
BEGIN
    INSERT INTO RULE_SNAPSHOTS (SNAPSHOT_NAME, CREATED_BY, SNAPSHOT_JSON)
    VALUES (
        'Snapshot ' + CAST(@v AS VARCHAR(10)),
        'admin',
        '{"snapshot": "data"}'
    );
    SET @v = @v + 1;
END

-- Populate RULE_TAGS (simulate tagging for rules)
DECLARE @w INT = 1;
WHILE @w <= 300
BEGIN
    INSERT INTO RULE_TAGS (RULE_ID, TAG_NAME)
    VALUES (
        (((@w) % 4) + 1),
        'Tag' + CAST(@w AS VARCHAR(10))
    );
    SET @w = @w + 1;
END
