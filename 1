#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: data_validations.py
Description:
  Provides a robust, standalone system for managing data validations, including:
    1. DataValidationTab for viewing/adding/editing validations in a table.
    2. Execution of all or selected validations, with pass/fail results displayed.
    3. Integration hooks for BFS or scheduling if you want real-time checks before rule execution.
    4. Extended types of validations ("NOT NULL", "RANGE", "REGEX", "FOREIGN_KEY", etc.)
      and a flexible approach for 'PARAMS' to store thresholds or patterns.

Assumptions:
  - A DB table named DATA_VALIDATIONS with columns:
      DATA_VALIDATION_ID (PK, identity),
      TABLE_NAME (varchar),
      COLUMN_NAME (varchar),
      VALIDATION_TYPE (varchar),  # e.g. "NOT NULL", "RANGE", "REGEX", ...
      PARAMS (varchar),           # e.g. "0,100" or "^[0-9]{10}$"
      CREATED_TIMESTAMP (datetime) [optional],
      CREATED_BY (varchar) [optional].
  - A DB table named DATA_VALIDATION_LOGS for storing pass/fail results:
      VALIDATION_LOG_ID, DATA_VALIDATION_ID, TABLE_NAME, COLUMN_NAME,
      VALIDATION_TYPE, PARAMS, RESULT_FLAG ("PASS"/"FAIL"), DETAILS, VALIDATION_TIMESTAMP.
  - This module can be used standalone or integrated in the aggregator.

"""

import sys
import re
import json
import logging
from datetime import datetime

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QPushButton, QMessageBox, QDialog, QLineEdit, QFormLayout, QLabel,
    QTextEdit, QInputDialog, QPlainTextEdit, QComboBox
)

# If you have a core foundation, you can import your logger, etc.
# from core_foundation import logger, insert_audit_log, fetch_all_dict, fetch_one_dict

###############################################################################
# 1) Data Validation Execution Logic
###############################################################################
def run_single_data_validation(conn, validation_row):
    """
    Execute a single validation record. The record is a dictionary or row with fields:
      - TABLE_NAME
      - COLUMN_NAME
      - VALIDATION_TYPE
      - PARAMS
    Returns (pass_flag, details_message).

    Also logs the result in DATA_VALIDATION_LOGS if table is available.
    """
    table_ = validation_row["TABLE_NAME"]
    column_ = validation_row["COLUMN_NAME"]
    vtype = validation_row["VALIDATION_TYPE"].upper().strip()
    params_ = validation_row.get("PARAMS", "")
    val_id = validation_row["DATA_VALIDATION_ID"]

    c = conn.cursor()
    pass_flag = True
    details = ""

    try:
        if vtype == "NOT NULL":
            # SELECT COUNT(*) FROM table_ WHERE column_ IS NULL
            q = f"SELECT COUNT(*) FROM {table_} WHERE {column_} IS NULL"
            c.execute(q)
            row_ = c.fetchone()
            null_count = row_[0]
            if null_count>0:
                pass_flag=False
                details = f"Found {null_count} null(s) in {table_}.{column_}."

        elif vtype == "RANGE":
            # params => "min,max"
            parts = params_.split(",")
            if len(parts)!=2:
                pass_flag=False
                details = "Invalid RANGE params (expected 'min,max')."
            else:
                try:
                    min_val = float(parts[0])
                    max_val = float(parts[1])
                    q = f"SELECT COUNT(*) FROM {table_} WHERE {column_} < {min_val} OR {column_} > {max_val}"
                    c.execute(q)
                    row_ = c.fetchone()
                    out_of_range = row_[0]
                    if out_of_range>0:
                        pass_flag=False
                        details = f"{out_of_range} row(s) out of [{min_val},{max_val}] in {table_}.{column_}."
                except Exception as ex:
                    pass_flag=False
                    details = f"Error parsing RANGE params: {ex}"

        elif vtype == "REGEX":
            # might do a T-SQL approach or fetch and check in Python
            # we'll do a quick approach => check up to 500 sample rows to reduce overhead
            regex_pattern = params_
            c.execute(f"SELECT TOP 500 {column_} FROM {table_} WHERE {column_} IS NOT NULL")
            sample = c.fetchall()
            invalid_count = 0
            pattern_comp = re.compile(regex_pattern)
            for rowv in sample:
                colv = str(rowv[0])
                if not pattern_comp.match(colv):
                    invalid_count+=1
            if invalid_count>0:
                pass_flag=False
                details = f"{invalid_count} row(s) do not match regex '{params_}' in {table_}.{column_} (sample)."

        elif vtype == "FOREIGN_KEY":
            # assume PARAMS => "ref_table,ref_column"
            # check if any value doesn't exist in ref_table.ref_column
            parts = params_.split(",")
            if len(parts)!=2:
                pass_flag=False
                details = "FOREIGN_KEY params must be 'ref_table,ref_column'."
            else:
                ref_t = parts[0].strip()
                ref_c = parts[1].strip()
                q = f"""
                  SELECT COUNT(*)
                  FROM {table_} t
                  WHERE NOT EXISTS(
                    SELECT 1 FROM {ref_t} r WHERE r.{ref_c}=t.{column_}
                  )
                """
                c.execute(q)
                missing_count = c.fetchone()[0]
                if missing_count>0:
                    pass_flag=False
                    details = f"{missing_count} row(s) in {table_}.{column_} not found in {ref_t}.{ref_c}."

        else:
            pass_flag=False
            details = f"Unknown validation type '{vtype}'."

    except Exception as ex:
        pass_flag=False
        details=f"Runtime error: {ex}"

    # log into DATA_VALIDATION_LOGS if table exists
    try:
        cc = conn.cursor()
        cc.execute("""
            INSERT INTO DATA_VALIDATION_LOGS(
              DATA_VALIDATION_ID, TABLE_NAME, COLUMN_NAME,
              VALIDATION_TYPE, PARAMS, RESULT_FLAG, DETAILS, VALIDATION_TIMESTAMP
            )
            VALUES(?,?,?,?,?,?,?,GETDATE())
        """,(
            val_id, table_, column_, vtype, params_,
            "PASS" if pass_flag else "FAIL",
            details
        ))
        conn.commit()
    except:
        pass  # if table not there, skip

    return pass_flag, details

def run_all_validations(conn):
    """
    Loads all rows in DATA_VALIDATIONS => run them => returns a list of 
    (val_id, table, column, pass/fail, details).
    """
    c = conn.cursor()
    try:
        c.execute("""
            SELECT DATA_VALIDATION_ID, TABLE_NAME, COLUMN_NAME,
                   VALIDATION_TYPE, PARAMS
            FROM DATA_VALIDATIONS
        """)
        rows = c.fetchall()
        colnames=[desc[0] for desc in c.description]
        results=[]
        for row_ in rows:
            d_ = dict(zip(colnames,row_))
            (ok, detail)=run_single_data_validation(conn,d_)
            results.append((d_["DATA_VALIDATION_ID"], d_["TABLE_NAME"], d_["COLUMN_NAME"],
                            "PASS" if ok else "FAIL", detail))
        return results
    except Exception as ex:
        logging.error(f"Error running all validations: {ex}")
        return []


###############################################################################
# 2) DataValidationTab: CRUD + manual execution
###############################################################################
class DataValidationTab(QWidget):
    """
    A Qt tab that lists validations from DATA_VALIDATIONS, 
    allows user to add/edit/delete, and has a “Run All” or “Run Selected” approach.
    """
    def __init__(self, connection, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)

        # search box
        top_h = QHBoxLayout()
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Filter validations by table/column/type..")
        self.search_edit.textChanged.connect(self.filter_validations)
        top_h.addWidget(QLabel("Search:"))
        top_h.addWidget(self.search_edit)
        layout.addLayout(top_h)

        # table
        self.dv_table = QTableWidget(0,5)
        self.dv_table.setHorizontalHeaderLabels(["ID","TABLE_NAME","COLUMN_NAME","VALIDATION_TYPE","PARAMS"])
        self.dv_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.dv_table)

        # button row
        btn_h = QHBoxLayout()
        add_btn = QPushButton("Add Validation")
        add_btn.clicked.connect(self.add_validation)
        btn_h.addWidget(add_btn)

        edit_btn = QPushButton("Edit Validation")
        edit_btn.clicked.connect(self.edit_validation)
        btn_h.addWidget(edit_btn)

        del_btn = QPushButton("Delete Validation")
        del_btn.clicked.connect(self.delete_validation)
        btn_h.addWidget(del_btn)

        run_sel_btn = QPushButton("Run Selected")
        run_sel_btn.clicked.connect(self.run_selected_validations)
        btn_h.addWidget(run_sel_btn)

        run_all_btn = QPushButton("Run All Validations")
        run_all_btn.clicked.connect(self.run_all)
        btn_h.addWidget(run_all_btn)

        ref_btn = QPushButton("Refresh")
        ref_btn.clicked.connect(self.load_validations)
        btn_h.addWidget(ref_btn)
        btn_h.addStretch()
        layout.addLayout(btn_h)

        # result area
        self.result_text = QPlainTextEdit()
        self.result_text.setReadOnly(True)
        layout.addWidget(self.result_text)

        self.setLayout(layout)
        self.load_validations()

    def load_validations(self):
        self.dv_table.setRowCount(0)
        c = self.connection.cursor()
        try:
            c.execute("""
                SELECT DATA_VALIDATION_ID, TABLE_NAME, COLUMN_NAME, VALIDATION_TYPE, PARAMS
                FROM DATA_VALIDATIONS
                ORDER BY DATA_VALIDATION_ID
            """)
            rows = c.fetchall()
            for row_ in rows:
                r_i = self.dv_table.rowCount()
                self.dv_table.insertRow(r_i)
                for col_i,val in enumerate(row_):
                    self.dv_table.setItem(r_i,col_i, QTableWidgetItem(str(val) if val!=None else ""))
        except Exception as ex:
            QMessageBox.critical(self,"Load Error",f"Error loading validations: {ex}")

    def filter_validations(self, text):
        txt = text.lower().strip()
        for row in range(self.dv_table.rowCount()):
            visible=False
            for col_i in range(self.dv_table.columnCount()):
                it=self.dv_table.item(row,col_i)
                if it and txt in it.text().lower():
                    visible=True
                    break
            self.dv_table.setRowHidden(row, not visible)

    def add_validation(self):
        """
        Prompt user => insert new row into DATA_VALIDATIONS.
        """
        table_,ok = QInputDialog.getText(self,"Add Validation","Table name (e.g. 'dbo.Customers'):")
        if not ok or not table_.strip():
            return
        col_,ok2=QInputDialog.getText(self,"Column","Column name:")
        if not ok2 or not col_.strip():
            return
        vtype_,ok3=QInputDialog.getText(self,"Validation Type","(e.g. 'NOT NULL','RANGE','REGEX','FOREIGN_KEY'):")
        if not ok3 or not vtype_.strip():
            return
        param_,ok4=QInputDialog.getText(self,"Params","(optional) param string (e.g. '0,100' or 'ReferenceTable,RefCol'):")
        if not ok4:
            param_=""
        c=self.connection.cursor()
        try:
            c.execute("""
                INSERT INTO DATA_VALIDATIONS(TABLE_NAME,COLUMN_NAME,VALIDATION_TYPE,PARAMS)
                VALUES(?,?,?,?)
            """,(table_.strip(), col_.strip(), vtype_.strip(), param_.strip()))
            self.connection.commit()
            QMessageBox.information(self,"Added","Validation added.")
            self.load_validations()
        except Exception as ex:
            QMessageBox.critical(self,"Add Error",str(ex))

    def get_selected_validation_id(self):
        row=self.dv_table.currentRow()
        if row<0:
            return None
        it=self.dv_table.item(row,0)
        if not it:
            return None
        return int(it.text())

    def edit_validation(self):
        val_id=self.get_selected_validation_id()
        if not val_id:
            QMessageBox.warning(self,"No Selection","No validation selected.")
            return
        # fetch current row => update
        row=self.dv_table.currentRow()
        table_=self.dv_table.item(row,1).text()
        col_=self.dv_table.item(row,2).text()
        vtype_=self.dv_table.item(row,3).text()
        param_=self.dv_table.item(row,4).text()

        new_table,ok=QInputDialog.getText(self,"Edit Table", "Table name:", text=table_)
        if not ok or not new_table.strip():
            return
        new_col,ok2=QInputDialog.getText(self,"Edit Column","Column name:",text=col_)
        if not ok2 or not new_col.strip():
            return
        new_type,ok3=QInputDialog.getText(self,"Validation Type","(NOT NULL,RANGE,REGEX,...)",text=vtype_)
        if not ok3 or not new_type.strip():
            return
        new_param,ok4=QInputDialog.getText(self,"Params","(optional)",text=param_)
        if not ok4:
            new_param=param_

        c=self.connection.cursor()
        try:
            c.execute("""
                UPDATE DATA_VALIDATIONS
                SET TABLE_NAME=?, COLUMN_NAME=?, VALIDATION_TYPE=?, PARAMS=?
                WHERE DATA_VALIDATION_ID=?
            """,(new_table.strip(), new_col.strip(), new_type.strip(), new_param.strip(), val_id))
            self.connection.commit()
            QMessageBox.information(self,"Updated","Validation updated.")
            self.load_validations()
        except Exception as ex:
            QMessageBox.critical(self,"Edit Error",str(ex))

    def delete_validation(self):
        val_id=self.get_selected_validation_id()
        if not val_id:
            QMessageBox.warning(self,"None","No validation selected.")
            return
        confirm=QMessageBox.question(self,"Confirm",f"Delete validation {val_id}?")
        if confirm!=QMessageBox.Yes:
            return
        c=self.connection.cursor()
        try:
            c.execute("DELETE FROM DATA_VALIDATIONS WHERE DATA_VALIDATION_ID=?",(val_id,))
            self.connection.commit()
            QMessageBox.information(self,"Deleted","Validation removed.")
            self.load_validations()
        except Exception as ex:
            QMessageBox.critical(self,"Error",str(ex))

    def run_selected_validations(self):
        row_idxs = self.dv_table.selectionModel().selectedRows()
        if not row_idxs:
            QMessageBox.warning(self,"None","No validations selected.")
            return
        results=[]
        for idx in row_idxs:
            row=idx.row()
            dv_id_str=self.dv_table.item(row,0).text()
            tname=self.dv_table.item(row,1).text()
            cname=self.dv_table.item(row,2).text()
            vtype=self.dv_table.item(row,3).text()
            param=self.dv_table.item(row,4).text()
            # run
            dv_row={
                "DATA_VALIDATION_ID": int(dv_id_str),
                "TABLE_NAME": tname,
                "COLUMN_NAME": cname,
                "VALIDATION_TYPE": vtype,
                "PARAMS": param
            }
            (ok,details)=run_single_data_validation(self.connection,dv_row)
            results.append((dv_id_str, "PASS" if ok else "FAIL", details))

        # display
        lines=["Run Selected Results:"]
        for (vid,res,det) in results:
            lines.append(f"Val {vid} => {res}. {det}")
        self.result_text.setPlainText("\n".join(lines))

    def run_all(self):
        res=run_all_validations(self.connection)
        # res => list of (val_id, table, column, pass/fail, detail)
        lines=["Run All Validations:"]
        for r_ in res:
            lines.append(f"Val {r_[0]} => {r_[3]} => {r_[4]}")
        self.result_text.setPlainText("\n".join(lines))