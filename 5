#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Module: dashboard_cards.py
Description:
  Provides a card-style dashboard tab that displays high-level BRM metrics in a modern
  panel layout. Each "card" is a QGroupBox or a custom widget showing a number/stat,
  possibly with a small icon and short label. This helps users see an at-a-glance summary.

Features:
  - Summaries: # of active rules, pending approvals, open defects, upcoming schedules, etc.
  - Refresh function to query the database for the latest counts.
  - Optionally, a "clickable" approach to open the relevant module/tab (like approvals).

This addresses the “Dashboard Cards” request for a home or summary screen.
"""

import sys
import logging
from datetime import datetime, timedelta
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QGroupBox,
    QGridLayout, QMessageBox
)
from PyQt5.QtCore import Qt


class DashboardCardsTab(QWidget):
    """
    A modern dashboard using card-like QGroupBoxes (or custom widgets)
    to display multiple at-a-glance stats:
      1. Number of Active Rules
      2. Approvals Pending
      3. Open Defects
      4. Critical Rules
      5. Upcoming Schedules
      6. (optionally) Data validations or BFS runs
    """
    def __init__(self, connection, user_id=None, user_group=None, parent=None):
        super().__init__(parent)
        self.connection = connection
        self.user_id = user_id
        self.user_group = user_group

        self.setWindowTitle("Dashboard Cards – High-Level Summary")
        main_layout = QVBoxLayout(self)

        # Title / refresh row
        title_h = QHBoxLayout()
        lbl = QLabel("<h2>BRM Summary Dashboard</h2>")
        title_h.addWidget(lbl)
        title_h.addStretch()

        ref_btn = QPushButton("Refresh Stats")
        ref_btn.clicked.connect(self.refresh_stats)
        title_h.addWidget(ref_btn)

        main_layout.addLayout(title_h)

        # Cards area => use a QGridLayout for responsive “cards”
        self.cards_layout = QGridLayout()
        main_layout.addLayout(self.cards_layout)

        # We'll create some placeholders for each card
        self.card_active_rules = self.create_card_widget("Active Rules", "0")
        self.card_approvals_pending = self.create_card_widget("Approvals Pending", "0")
        self.card_open_defects = self.create_card_widget("Open Defects", "0")
        self.card_critical_rules = self.create_card_widget("Critical Rules", "0")
        self.card_upcoming_schedules = self.create_card_widget("Upcoming Schedules (24h)", "0")

        # place them in a grid
        self.cards_layout.addWidget(self.card_active_rules, 0, 0)
        self.cards_layout.addWidget(self.card_approvals_pending, 0, 1)
        self.cards_layout.addWidget(self.card_open_defects, 1, 0)
        self.cards_layout.addWidget(self.card_critical_rules, 1, 1)
        self.cards_layout.addWidget(self.card_upcoming_schedules, 2, 0)

        main_layout.addStretch()
        self.setLayout(main_layout)

        # initial load
        self.refresh_stats()

    def create_card_widget(self, title_text, count_text):
        """
        Returns a QGroupBox styled like a 'card' with a large count and a label.
        """
        box = QGroupBox()
        box.setStyleSheet("""
        QGroupBox {
            background-color: #ffffff;
            border: 1px solid #cccccc;
            border-radius: 4px;
            margin-top: 2ex;
        }
        QGroupBox:title {
            subcontrol-origin: margin;
            subcontrol-position: top center;
            padding: 0 3px;
            background-color: rgba(0,0,0,0);
        }
        """)

        box.setTitle(title_text)
        layout = QVBoxLayout(box)
        layout.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)

        count_lbl = QLabel(count_text)
        count_lbl.setStyleSheet("font-size: 24px; font-weight: bold; color: #333333;")
        layout.addWidget(count_lbl)

        # Optionally, add a small detail or icon
        # detail_lbl = QLabel("Click for details") # if you want a clickable approach
        # layout.addWidget(detail_lbl)

        # store reference
        box.count_label = count_lbl
        return box

    def refresh_stats(self):
        """
        Query the DB for each metric and update card labels.
        1) # Active Rules => SELECT COUNT(*) FROM BRM_RULES WHERE STATUS='ACTIVE'
        2) Approvals => SELECT COUNT(*) FROM BRM_RULE_APPROVALS WHERE APPROVED_FLAG=0
        3) Defects => SELECT COUNT(*) FROM BRM_DEFECT_LOGS WHERE STATUS<>'Closed'
        4) Critical => SELECT COUNT(*) FROM BRM_RULES WHERE CRITICAL_RULE=1
        5) Schedules => next 24h => SELECT COUNT(*) FROM RULE_SCHEDULES WHERE SCHEDULE_TIME BETWEEN now AND now+24h
        """
        c = self.connection.cursor()

        # Active rules
        try:
            c.execute("SELECT COUNT(*) FROM BRM_RULES WHERE STATUS='ACTIVE'")
            row = c.fetchone()
            active_count = row[0]
            self.card_active_rules.count_label.setText(str(active_count))
        except:
            self.card_active_rules.count_label.setText("-")

        # Approvals pending
        try:
            c.execute("""
                SELECT COUNT(*) 
                FROM BRM_RULE_APPROVALS
                WHERE APPROVED_FLAG=0
            """)
            row=c.fetchone()
            app_count = row[0]
            self.card_approvals_pending.count_label.setText(str(app_count))
        except:
            self.card_approvals_pending.count_label.setText("-")

        # Open defects
        try:
            c.execute("""
                SELECT COUNT(*) 
                FROM BRM_DEFECT_LOGS
                WHERE STATUS IN ('Open','In Progress')
            """)
            row=c.fetchone()
            def_count=row[0]
            self.card_open_defects.count_label.setText(str(def_count))
        except:
            self.card_open_defects.count_label.setText("-")

        # Critical rules
        try:
            c.execute("SELECT COUNT(*) FROM BRM_RULES WHERE CRITICAL_RULE=1")
            row=c.fetchone()
            crit_count=row[0]
            self.card_critical_rules.count_label.setText(str(crit_count))
        except:
            self.card_critical_rules.count_label.setText("-")

        # Upcoming schedules
        try:
            c.execute("""
                SELECT COUNT(*)
                FROM RULE_SCHEDULES
                WHERE STATUS='Scheduled'
                  AND SCHEDULE_TIME >= GETDATE()
                  AND SCHEDULE_TIME <= DATEADD(HOUR,24,GETDATE())
            """)
            row=c.fetchone()
            sch_count = row[0]
            self.card_upcoming_schedules.count_label.setText(str(sch_count))
        except:
            self.card_upcoming_schedules.count_label.setText("-")


if __name__=="__main__":
    from PyQt5.QtWidgets import QApplication
    import pyodbc

    app = QApplication(sys.argv)
    try:
        conn = pyodbc.connect("DSN=YourDSN;Trusted_Connection=yes;")
    except Exception as e:
        print("DB connection error:", e)
        sys.exit(1)

    win = DashboardCardsTab(conn, user_id=1001, user_group="Admin")
    win.show()
    sys.exit(app.exec_())