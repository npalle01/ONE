-- Drop statements (use IF OBJECT_ID to avoid errors if table doesn't exist)
IF OBJECT_ID('dbo.USERS','U') IS NOT NULL DROP TABLE dbo.USERS;
IF OBJECT_ID('dbo.BUSINESS_GROUPS','U') IS NOT NULL DROP TABLE dbo.BUSINESS_GROUPS;
IF OBJECT_ID('dbo.GROUP_PERMISSIONS','U') IS NOT NULL DROP TABLE dbo.GROUP_PERMISSIONS;
IF OBJECT_ID('dbo.BRM_RULE_TYPES','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_TYPES;
IF OBJECT_ID('dbo.BRM_RULE_GROUPS','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_GROUPS;
IF OBJECT_ID('dbo.BRM_RULES','U') IS NOT NULL DROP TABLE dbo.BRM_RULES;
IF OBJECT_ID('dbo.BRM_RULE_TABLE_DEPENDENCIES','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES;
IF OBJECT_ID('dbo.BRM_AUDIT_LOG','U') IS NOT NULL DROP TABLE dbo.BRM_AUDIT_LOG;
IF OBJECT_ID('dbo.BRM_RULE_LINEAGE','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_LINEAGE;
IF OBJECT_ID('dbo.BRM_GROUP_BACKUPS','U') IS NOT NULL DROP TABLE dbo.BRM_GROUP_BACKUPS;
IF OBJECT_ID('dbo.BRM_COLUMN_MAPPING','U') IS NOT NULL DROP TABLE dbo.BRM_COLUMN_MAPPING;
IF OBJECT_ID('dbo.BRM_CUSTOM_RULE_GROUPS','U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_RULE_GROUPS;
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_MEMBERS','U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS;
IF OBJECT_ID('dbo.BUSINESS_GROUP_APPROVERS','U') IS NOT NULL DROP TABLE dbo.BUSINESS_GROUP_APPROVERS;
IF OBJECT_ID('dbo.BRM_RULE_APPROVALS','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_APPROVALS;
IF OBJECT_ID('dbo.BRM_CUSTOM_GROUP_BACKUPS','U') IS NOT NULL DROP TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS;
IF OBJECT_ID('dbo.BRM_GLOBAL_CRITICAL_LINKS','U') IS NOT NULL DROP TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS;
IF OBJECT_ID('dbo.RULE_SCHEDULES','U') IS NOT NULL DROP TABLE dbo.RULE_SCHEDULES;
IF OBJECT_ID('dbo.BRM_RULE_COMMENTS','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_COMMENTS;
IF OBJECT_ID('dbo.DECISION_TABLES','U') IS NOT NULL DROP TABLE dbo.DECISION_TABLES;
IF OBJECT_ID('dbo.RULE_CONFLICTS','U') IS NOT NULL DROP TABLE dbo.RULE_CONFLICTS;
IF OBJECT_ID('dbo.COMPOSITE_RULES','U') IS NOT NULL DROP TABLE dbo.COMPOSITE_RULES;
IF OBJECT_ID('dbo.RULE_SNAPSHOTS','U') IS NOT NULL DROP TABLE dbo.RULE_SNAPSHOTS;
IF OBJECT_ID('dbo.RULE_TAGS','U') IS NOT NULL DROP TABLE dbo.RULE_TAGS;
IF OBJECT_ID('dbo.DATA_VALIDATIONS','U') IS NOT NULL DROP TABLE dbo.DATA_VALIDATIONS;
IF OBJECT_ID('dbo.RULE_EXECUTION_LOGS','U') IS NOT NULL DROP TABLE dbo.RULE_EXECUTION_LOGS;
IF OBJECT_ID('dbo.DATA_VALIDATION_LOGS','U') IS NOT NULL DROP TABLE dbo.DATA_VALIDATION_LOGS;
IF OBJECT_ID('dbo.BRM_RULE_LOCKS','U') IS NOT NULL DROP TABLE dbo.BRM_RULE_LOCKS;

------------------------------------------------------------------------------
-- USERS
------------------------------------------------------------------------------
CREATE TABLE dbo.USERS (
    USER_ID       INT          NOT NULL IDENTITY(1,1),
    USERNAME      NVARCHAR(100) NOT NULL,
    PASSWORD      NVARCHAR(100) NOT NULL,
    USER_GROUP    NVARCHAR(100) NOT NULL,
    PRIMARY KEY (USER_ID)
);

------------------------------------------------------------------------------
-- BUSINESS_GROUPS
------------------------------------------------------------------------------
CREATE TABLE dbo.BUSINESS_GROUPS (
    GROUP_NAME       NVARCHAR(100) NOT NULL PRIMARY KEY,
    DESCRIPTION      NVARCHAR(500) NULL,
    EMAIL            NVARCHAR(200) NULL,
    IS_OWNER_GROUP   BIT NOT NULL DEFAULT(0)
);

------------------------------------------------------------------------------
-- GROUP_PERMISSIONS
------------------------------------------------------------------------------
CREATE TABLE dbo.GROUP_PERMISSIONS (
    PERMISSION_ID INT NOT NULL IDENTITY(1,1),
    GROUP_NAME    NVARCHAR(100) NOT NULL,
    TARGET_TABLE  NVARCHAR(200) NOT NULL,
    PRIMARY KEY (PERMISSION_ID)
);

------------------------------------------------------------------------------
-- BRM_RULE_TYPES
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_TYPES (
    RULE_TYPE_ID   INT NOT NULL,
    RULE_TYPE_NAME NVARCHAR(100) NOT NULL,
    PRIMARY KEY (RULE_TYPE_ID)
);

------------------------------------------------------------------------------
-- BRM_RULE_GROUPS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_GROUPS (
    GROUP_ID   INT NOT NULL,
    GROUP_NAME NVARCHAR(100) NOT NULL,
    PRIMARY KEY (GROUP_ID)
);

------------------------------------------------------------------------------
-- BRM_RULES
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULES (
    RULE_ID             INT NOT NULL IDENTITY(1,1),
    RULE_NAME           NVARCHAR(200) NOT NULL,
    GROUP_ID            INT NULL,
    PARENT_RULE_ID      INT NULL,
    RULE_TYPE_ID        INT NULL,
    RULE_SQL            NVARCHAR(MAX) NULL,
    EFFECTIVE_START_DATE   DATETIME NULL,
    EFFECTIVE_END_DATE     DATETIME NULL,
    STATUS             NVARCHAR(50) NULL,
    VERSION            INT NOT NULL DEFAULT(1),
    CREATED_BY         NVARCHAR(100) NULL,
    DESCRIPTION        NVARCHAR(MAX) NULL,
    OPERATION_TYPE     NVARCHAR(20) NULL,
    BUSINESS_JUSTIFICATION NVARCHAR(MAX) NULL,
    CREATED_TIMESTAMP  DATETIME NULL,
    UPDATED_BY         NVARCHAR(100) NULL,
    OWNER_GROUP        NVARCHAR(100) NULL,
    CLUSTER_NAME       NVARCHAR(100) NULL,
    APPROVAL_STATUS    NVARCHAR(50) NULL,
    IS_GLOBAL          BIT NOT NULL DEFAULT(0),
    CRITICAL_RULE      BIT NOT NULL DEFAULT(0),
    CRITICAL_SCOPE     NVARCHAR(50) NULL,
    CDC_TYPE           NVARCHAR(50) NULL,
    LIFECYCLE_STATE    NVARCHAR(50) NULL,
    LOCK_STATUS        NVARCHAR(50) NULL,    -- Optional if you store lock text
    PERF_MS_AVG        DECIMAL(10,2) NULL,   -- Optional if you store performance in the table
    EXECUTION_STATE    NVARCHAR(50) NULL,    -- optional for BFS pass/fail
    ENCRYPTED_FILE_PATH NVARCHAR(500) NULL,  -- if needed
    PRIMARY KEY (RULE_ID)
);

------------------------------------------------------------------------------
-- BRM_RULE_TABLE_DEPENDENCIES
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_TABLE_DEPENDENCIES (
    DEPENDENCY_ID INT NOT NULL IDENTITY(1,1),
    RULE_ID       INT NOT NULL,
    DATABASE_NAME NVARCHAR(100) NULL,
    TABLE_NAME    NVARCHAR(200) NULL,
    COLUMN_NAME   NVARCHAR(200) NULL,
    COLUMN_OP     NVARCHAR(10) NULL,  -- 'READ' / 'WRITE'
    PRIMARY KEY (DEPENDENCY_ID)
);

------------------------------------------------------------------------------
-- BRM_AUDIT_LOG
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_AUDIT_LOG (
    AUDIT_ID      INT NOT NULL IDENTITY(1,1),
    ACTION        NVARCHAR(50) NOT NULL,
    TABLE_NAME    NVARCHAR(100) NOT NULL,
    RECORD_ID     NVARCHAR(50) NULL,
    ACTION_BY     NVARCHAR(100) NULL,
    OLD_DATA      NVARCHAR(MAX) NULL,
    NEW_DATA      NVARCHAR(MAX) NULL,
    ACTION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    PRIMARY KEY (AUDIT_ID)
);

------------------------------------------------------------------------------
-- BRM_RULE_LINEAGE
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_LINEAGE (
    LINEAGE_ID   INT NOT NULL IDENTITY(1,1),
    RULE_ID      INT NOT NULL,
    REF_RULE_ID  INT NULL,
    DESCRIPTION  NVARCHAR(200) NULL,
    PRIMARY KEY (LINEAGE_ID)
);

------------------------------------------------------------------------------
-- BRM_GROUP_BACKUPS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_GROUP_BACKUPS (
    BACKUP_ID          INT NOT NULL IDENTITY(1,1),
    GROUP_NAME         NVARCHAR(100) NOT NULL,
    BACKUP_TIMESTAMP   DATETIME NOT NULL DEFAULT(GETDATE()),
    BACKUP_JSON        NVARCHAR(MAX) NULL,
    PRIMARY KEY (BACKUP_ID)
);

------------------------------------------------------------------------------
-- BRM_COLUMN_MAPPING
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_COLUMN_MAPPING (
    MAPPING_ID INT NOT NULL IDENTITY(1,1),
    SOURCE_RULE_ID INT NULL,
    RULE_ID       INT NULL,
    COLUMN_NAME   NVARCHAR(200) NULL,
    MAP_DETAILS   NVARCHAR(MAX) NULL,
    PRIMARY KEY (MAPPING_ID)
);

------------------------------------------------------------------------------
-- BRM_CUSTOM_RULE_GROUPS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_CUSTOM_RULE_GROUPS (
    CUSTOM_GROUP_ID     INT NOT NULL IDENTITY(1,1),
    CUSTOM_GROUP_NAME   NVARCHAR(200) NOT NULL,
    OWNER_BUSINESS_GROUP NVARCHAR(100) NULL,
    CREATED_BY          NVARCHAR(100) NULL,
    CREATED_TIMESTAMP   DATETIME NOT NULL DEFAULT(GETDATE()),
    PRIMARY KEY (CUSTOM_GROUP_ID)
);

------------------------------------------------------------------------------
-- BRM_CUSTOM_GROUP_MEMBERS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_CUSTOM_GROUP_MEMBERS (
    MEMBER_ID       INT NOT NULL IDENTITY(1,1),
    CUSTOM_GROUP_ID INT NOT NULL,
    RULE_ID         INT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
);

------------------------------------------------------------------------------
-- BUSINESS_GROUP_APPROVERS
------------------------------------------------------------------------------
CREATE TABLE dbo.BUSINESS_GROUP_APPROVERS (
    APPROVER_ID INT NOT NULL IDENTITY(1,1),
    GROUP_NAME  NVARCHAR(100) NOT NULL,
    USERNAME    NVARCHAR(100) NOT NULL,
    PRIMARY KEY (APPROVER_ID)
);

------------------------------------------------------------------------------
-- BRM_RULE_APPROVALS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_APPROVALS (
    APPROVAL_ID    INT NOT NULL IDENTITY(1,1),
    RULE_ID        INT NOT NULL,
    GROUP_NAME     NVARCHAR(100) NULL,
    USERNAME       NVARCHAR(100) NULL,
    APPROVED_FLAG  INT NOT NULL DEFAULT(0), -- 0=pending,1=approved,2=rejected
    APPROVED_TIMESTAMP DATETIME NULL,
    APPROVAL_STAGE INT NOT NULL DEFAULT(1),
    PRIMARY KEY (APPROVAL_ID)
);

------------------------------------------------------------------------------
-- BRM_CUSTOM_GROUP_BACKUPS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_CUSTOM_GROUP_BACKUPS (
    BACKUP_ROW_ID    INT NOT NULL IDENTITY(1,1),
    CUSTOM_GROUP_ID  INT NOT NULL,
    BACKUP_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    BACKUP_VERSION   INT NOT NULL,
    BACKUP_JSON      NVARCHAR(MAX) NULL,
    PRIMARY KEY (BACKUP_ROW_ID)
);

------------------------------------------------------------------------------
-- BRM_GLOBAL_CRITICAL_LINKS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_GLOBAL_CRITICAL_LINKS (
    LINK_ID       INT NOT NULL IDENTITY(1,1),
    GCR_RULE_ID   INT NOT NULL,   -- parent
    TARGET_RULE_ID INT NOT NULL,  -- child
    PRIMARY KEY (LINK_ID)
);

------------------------------------------------------------------------------
-- RULE_SCHEDULES
------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_SCHEDULES (
    SCHEDULE_ID   INT NOT NULL IDENTITY(1,1),
    RULE_ID       INT NOT NULL,
    SCHEDULE_TIME DATETIME NOT NULL,
    STATUS        NVARCHAR(50) NOT NULL DEFAULT('Scheduled'),
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    VALIDATION_FLAG BIT NOT NULL DEFAULT(0),
    PRIMARY KEY (SCHEDULE_ID)
);

------------------------------------------------------------------------------
-- BRM_RULE_COMMENTS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_COMMENTS (
    COMMENT_ID  INT NOT NULL IDENTITY(1,1),
    RULE_ID     INT NOT NULL,
    COMMENT_TXT NVARCHAR(MAX) NOT NULL,
    CREATED_BY  NVARCHAR(100) NULL,
    CREATED_TS  DATETIME NOT NULL DEFAULT(GETDATE()),
    PRIMARY KEY (COMMENT_ID)
);

------------------------------------------------------------------------------
-- DECISION_TABLES
------------------------------------------------------------------------------
CREATE TABLE dbo.DECISION_TABLES (
    DECISION_TABLE_ID INT NOT NULL IDENTITY(1,1),
    TABLE_NAME        NVARCHAR(200) NOT NULL,
    DESCRIPTION       NVARCHAR(MAX) NULL,
    PRIMARY KEY (DECISION_TABLE_ID)
);

------------------------------------------------------------------------------
-- RULE_CONFLICTS
------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_CONFLICTS (
    CONFLICT_ID INT NOT NULL IDENTITY(1,1),
    RULE_ID1    INT NOT NULL,
    RULE_ID2    INT NOT NULL,
    PRIORITY    INT NOT NULL DEFAULT(0),
    PRIMARY KEY (CONFLICT_ID)
);

------------------------------------------------------------------------------
-- COMPOSITE_RULES
------------------------------------------------------------------------------
CREATE TABLE dbo.COMPOSITE_RULES (
    COMPOSITE_RULE_ID INT NOT NULL IDENTITY(1,1),
    CRULE_NAME        NVARCHAR(200) NOT NULL,
    LOGIC_EXPR        NVARCHAR(MAX) NULL,
    ACTION_ON_PASS    NVARCHAR(200) NULL,
    PRIMARY KEY (COMPOSITE_RULE_ID)
);

------------------------------------------------------------------------------
-- RULE_SNAPSHOTS
------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_SNAPSHOTS (
    SNAPSHOT_ID     INT NOT NULL IDENTITY(1,1),
    SNAPSHOT_NAME   NVARCHAR(200) NOT NULL,
    CREATED_BY      NVARCHAR(100) NULL,
    CREATED_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    SNAPSHOT_JSON   NVARCHAR(MAX) NULL,
    PRIMARY KEY (SNAPSHOT_ID)
);

------------------------------------------------------------------------------
-- RULE_TAGS
------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_TAGS (
    TAG_ID   INT NOT NULL IDENTITY(1,1),
    RULE_ID  INT NOT NULL,
    TAG_NAME NVARCHAR(100) NOT NULL,
    PRIMARY KEY (TAG_ID)
);

------------------------------------------------------------------------------
-- DATA_VALIDATIONS
------------------------------------------------------------------------------
CREATE TABLE dbo.DATA_VALIDATIONS (
    VALIDATION_ID   INT NOT NULL IDENTITY(1,1),
    TABLE_NAME      NVARCHAR(200) NOT NULL,
    COLUMN_NAME     NVARCHAR(200) NOT NULL,
    VALIDATION_TYPE NVARCHAR(50) NOT NULL,  -- e.g. 'NOT NULL','RANGE','REGEX'
    PARAMS          NVARCHAR(200) NULL,
    PRIMARY KEY (VALIDATION_ID)
);

------------------------------------------------------------------------------
-- RULE_EXECUTION_LOGS
------------------------------------------------------------------------------
CREATE TABLE dbo.RULE_EXECUTION_LOGS (
    LOG_ID               INT NOT NULL IDENTITY(1,1),
    RULE_ID              INT NOT NULL,
    EXECUTION_TIMESTAMP  DATETIME NOT NULL DEFAULT(GETDATE()),
    PASS_FLAG            BIT NOT NULL DEFAULT(0),
    MESSAGE              NVARCHAR(MAX) NULL,
    RECORD_COUNT         INT NOT NULL DEFAULT(0),
    EXECUTION_TIME_MS    INT NOT NULL DEFAULT(0),
    PRIMARY KEY (LOG_ID)
);

------------------------------------------------------------------------------
-- DATA_VALIDATION_LOGS
------------------------------------------------------------------------------
CREATE TABLE dbo.DATA_VALIDATION_LOGS (
    DVL_ID              INT NOT NULL IDENTITY(1,1),
    VALIDATION_TIMESTAMP DATETIME NOT NULL DEFAULT(GETDATE()),
    VALIDATION_ID       INT NOT NULL,
    TABLE_NAME          NVARCHAR(200) NOT NULL,
    COLUMN_NAME         NVARCHAR(200) NOT NULL,
    RESULT_FLAG         NVARCHAR(10) NOT NULL DEFAULT('PASS'),  -- 'PASS' or 'FAIL'
    DETAILS             NVARCHAR(MAX) NULL,
    PRIMARY KEY (DVL_ID)
);

------------------------------------------------------------------------------
-- BRM_RULE_LOCKS
------------------------------------------------------------------------------
CREATE TABLE dbo.BRM_RULE_LOCKS (
    LOCK_ID         INT NOT NULL IDENTITY(1,1),
    RULE_ID         INT NOT NULL,
    LOCKED_BY       INT NULL,              -- user_id
    LOCK_TIMESTAMP  DATETIME NOT NULL DEFAULT(GETDATE()),
    EXPIRY_TIMESTAMP DATETIME NULL,
    FORCE_LOCK      BIT NOT NULL DEFAULT(0),
    ACTIVE_LOCK     BIT NOT NULL DEFAULT(1),
    PRIMARY KEY (LOCK_ID)
);
